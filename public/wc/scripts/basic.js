






//console.log(gameFielg[0].length)
//gameFielgMap



//console.log(gameFielg[0]);

//centerDrawPoint.x=centerDrawPoint.cellObj[7][7].x+25;
//centerDrawPoint.y=centerDrawPoint.cellObj[7][7].y+25;

//console.log(centerDrawPoint.x+" "+centerDrawPoint.y);
//console.log(centerDrawPoint.cellObj);

//dragoonDamages

Obj.prototype.progCenterDrawPoint = function () {
  /*
if(player){
centerDrawPoint.cellObj.vertikal=player.peoples[0].cell.vertikal;
centerDrawPoint.cellObj.horizont=player.peoples[0].cell.horizont;
this.cellObj=player.peoples[0].cell;
};
*/

  let vertikal; //=this.cellObj.vertikal;
  let horizont; //=this.cellObj.horizont;

  if (this.cellObj) {
    vertikal = this.cellObj.vertikal;
    horizont = this.cellObj.horizont;
  } else {
    return;
  }
  //let od=[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]];

  ///*

  let cellY = -1;

  //let check=0; oil

  od = [];

  for (let i = 0; i < 1500; i++) {
    od.push([]);
  }

  od_grunt = [];

  for (let i = 0; i < 8; i++) {
    od_grunt.push([]);
  }

  //let stena=[];

  for (let i = vertikal - 9; i < vertikal + 9; i++) {
    //cellY++;

    for (let k = horizont + 9; k > horizont - 10; k--) {
      //check++;
      if (gameFielg[i] && gameFielg[i][k]) {
        let cell = gameFielg[i][k];

        od_grunt[cell.sloy].push(cell);

        //if(gameFielg[i][k].pen.length){

        for (let p = 0; p < cell.pen.length; p++) {
          onDrawTrups.push(cell.pen[p]);
        }
        //};

        for (let p = 0; p < cell.water_sleds.length; p++) {
          water_sleds_onDraw.push(cell.water_sleds[p]);
        }

        let drawY;

        let unit = cell.unit;

        if (cell.vossalObj) {
          unit = cell.vossalObj;
        }
        //if(gameFielg[i][k].oil){unit=gameFielg[i][k].oil;};

        if (unit && !unit.myDraw) {
          //if(!unit.s){
          drawY = unit.y;

          if (unit.type === "wood") {
            drawY = unit.drawY + 100;
          }

          unit.myDraw = true;

          //if(od[Math.round(drawY+removeY)+400].indexOf(unit)===-1){

          if (unit.gabarit > 50) {
            drawY -= 50;
          }

          if (unit.gabarit === 150) {
            drawY += 50;
          }

          if (!unit.s) {
            if (od[Math.round(drawY + removeY) + 400]) {
              od[Math.round(drawY + removeY) + 400].push(unit);
            }
          } else {
            od[0].push(unit);
          }
          //}
          //else{
          //od[0].push(unit);
          //};
          //};
          //}
          //else{stena.push(unit)};
        }

        for (let dr = 0; dr < cell.dragoonDamages.length; dr++) {
          let drawY = cell.dragoonDamages[dr].y;

          //if(od[Math.round(drawY+removeY)+400]){

          od[Math.round(drawY + removeY) + 400].push(cell.dragoonDamages[dr]);

          //};
        }

        if (cell.dragoon && fly.indexOf(cell.dragoon) === -1) {
          fly.push(cell.dragoon);
        }
      }
    }
  }

  /*
for(let i=0;i<stena.length;i++){
	
	let unit=stena[i];
	
	
	

let drawY=unit.y;




unit.myDraw=true;



if(od[0]){
od[0].unshift(unit);
}	
	
	
		
};
*/
  //*/

  //pausa=1;

  //console.log(check);
  ///////////////////////////////////////////////////////////////////////////
  //console.log(obj.x)

  let x = Math.floor((Math.abs(removeX) + 350) / 50); //Math.floor((obj.x-removeX)/50);//(this.cellObj.x/50)-8;
  let y = Math.floor((Math.abs(removeY) + 350) / 50); //Math.floor((obj.y-removeY)/50);//(this.cellObj.y/50)-8;

  //console.log(y);

  if (gameFielg[y] && gameFielg[y][x]) {
    obj.cell = gameFielg[y][x];
  }

  //ctx.fillStyle="violet";
  //ctx.fillRect(this.cellObj.x+removeX,this.cellObj.y+removeY,50,50);
};

LandObj.prototype.draw = function () {
  this.myDraw = false;

  if (this.type !== "wood" && this.hp <= 0 && !this.crash_s) {
    this.crash_s = true;

    ////////////////////////////////////////////////  SOUND
    if (sounds_fly.length + sounds_fight.length < 35) {
      let dis; //=get_distanse_on_lineyka(this.target.cell,this.target.gabarit,gameFielg[centerDrawPoint.cellObj.vertikal][centerDrawPoint.cellObj.horizont],50);

      let a =
        this.x -
        gameFielg[centerDrawPoint.cellObj.vertikal][
          centerDrawPoint.cellObj.horizont
        ].x;
      let b =
        this.y -
        gameFielg[centerDrawPoint.cellObj.vertikal][
          centerDrawPoint.cellObj.horizont
        ].y;

      dis = Math.sqrt(a * a + b * b);

      let volume = (450 - dis) / 450;

      //console.log(volume); pausa=1;
      if (volume < 0) {
        volume = 0;
      }

      select_sound_fly(undefined, "crash", volume);
    }
    //////////////////////////////////////////////////
  }

  if (this.type === "stena") {
    ctx.drawImage(
      this.imageToDraw,
      0,
      0,
      32,
      32,
      this.x + removeX,
      this.y + removeY,
      50,
      50
    );

    //ctx.strokeStyle="red";
    //ctx.strokeRect(this.x+removeX,this.y+removeY,100,100);
  } else if (this.type === "gora") {
    ctx.drawImage(
      this.imageToDraw,
      this.animX,
      0,
      200,
      200,
      this.x + removeX,
      this.y + removeY - 20,
      100,
      140
    );

    //ctx.strokeStyle="red";
    //ctx.strokeRect(this.x+removeX,this.y+removeY,100,100);
  } else if (this.type === "foundry") {
    if (this.drawQuatro) {
      if (this.control === "player") {
        ctx.strokeStyle = "green";
      } else {
        ctx.strokeStyle = "red";
      }

      ctx.strokeRect(this.x + removeX - 50, this.y + removeY - 50, 150, 150);
    }

    this.drawQuatro = false;

    if (this.buildready > 0 && this.hp > 0) {
      let procent = this.buildready / (this.hpfull / 100);
      let procentHp = this.hp / (this.hpfull / 100);
      //console.log(procent);

      if (procent === 100) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          0,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );

        //this.buildready=2000;
      } else if (procent < 100) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          100,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );
      }

      //console.log("draw");

      if (procentHp <= 90) {
        this.gabX = (150 - procentHp) * 1.2;
        this.gabY = (150 - procentHp) * 1.2;

        ctx.drawImage(
          fire,
          this.animX,
          this.animY,
          200,
          200,
          this.x - 30 + (100 - this.gabX) / 2 + removeX,
          this.y - 60 + (100 - this.gabY) / 2 + removeY,
          this.gabX,
          this.gabY
        );

        this.animTimer++;

        if (this.animTimer === 3) {
          this.animTimer = 0;

          this.animX += 200;

          if (this.animX === 1000) {
            this.animX = 0;
            this.animY += 200;
          }

          if (this.animY === 400) {
            this.animY = 0;
          }
        }
      }
    } else {
      this.gabX = 180;
      this.gabY = 180;

      this.animX = 510;
      this.animY = 150;
      this.tileStepX = 40;
      this.tileStepY = 35;
      this.animKorrektorY = -65;
      this.animKorrektorX = -85;

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }

      ctx.drawImage(
        port_trup,
        0,
        0,
        100,
        100,
        this.x + removeX + this.animKorrektorX,
        this.y + removeY + this.animKorrektorY,
        this.gabX,
        this.gabY
      );

      ctx.globalAlpha = 1;

      if ((this.hp <= 0 || this.buildready <= 0) && this.distroyTimer >= 436) {
        if (this.distroyTimer <= 500 && this.distroyTimer > 496) {
          this.animX_2 = 0;
        } else if (this.distroyTimer <= 496 && this.distroyTimer > 492) {
          this.animX_2 = 100;
        } else if (this.distroyTimer <= 492 && this.distroyTimer > 488) {
          this.animX_2 = 200;
        } else if (this.distroyTimer <= 488 && this.distroyTimer > 484) {
          this.animX_2 = 300;
        } else if (this.distroyTimer <= 484 && this.distroyTimer > 480) {
          this.animX_2 = 400;
        } else if (this.distroyTimer <= 480 && this.distroyTimer > 476) {
          this.animX_2 = 500;
        } else if (this.distroyTimer <= 476 && this.distroyTimer > 472) {
          this.animX_2 = 600;
        } else if (this.distroyTimer <= 472 && this.distroyTimer > 468) {
          this.animX_2 = 700;
        } else if (this.distroyTimer <= 468 && this.distroyTimer > 464) {
          this.animX_2 = 800;
        } else if (this.distroyTimer <= 464 && this.distroyTimer > 460) {
          this.animX_2 = 900;
        } else if (this.distroyTimer <= 460 && this.distroyTimer > 456) {
          this.animX_2 = 1000;
        } else if (this.distroyTimer <= 456 && this.distroyTimer > 452) {
          this.animX_2 = 1100;
        } else if (this.distroyTimer <= 452 && this.distroyTimer > 448) {
          this.animX_2 = 1200;
        } else if (this.distroyTimer <= 448 && this.distroyTimer > 444) {
          this.animX_2 = 1300;
        } else if (this.distroyTimer <= 444 && this.distroyTimer > 440) {
          this.animX_2 = 1400;
        } else if (this.distroyTimer <= 440 && this.distroyTimer > 436) {
          this.animX_2 = 1500;
        }

        ctx.drawImage(
          vzryv1,
          this.animX_2 + 5,
          this.animY_2,
          96,
          100,
          this.x + removeX - 75,
          this.y + removeY - 170,
          200,
          350
        );
      }
    }
  } else if (this.type === "oil_platform") {
    //console.log("ok");

    if (this.drawQuatro) {
      if (this.control === "player") {
        ctx.strokeStyle = "green";
      } else {
        ctx.strokeStyle = "red";
      }

      ctx.strokeRect(this.x + removeX, this.y + removeY - 50, 100, 100);
    }

    this.drawQuatro = false;

    if (this.hp > 0 && this.buildready > 0) {
      let procent = this.buildready / (this.hpfull / 100);
      let procentHp = this.hp / (this.hpfull / 100);

      //console.log(procent);

      if (procent === 100) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          300,
          100,
          100,
          this.x + removeX,
          this.y + removeY - 50,
          100,
          100
        );

        //this.buildready=2000;
      } else if (procent > 60) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          200,
          100,
          100,
          this.x + removeX,
          this.y + removeY - 50,
          100,
          100
        );
      } else if (procent > 30) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          100,
          100,
          100,
          this.x + removeX,
          this.y + removeY - 50,
          100,
          100
        );
      } else if (procent >= 0) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          0,
          100,
          100,
          this.x + removeX,
          this.y + removeY - 50,
          100,
          100
        );
      }

      if (procentHp <= 90) {
        this.gabX = (100 - procentHp) * 1.2;
        this.gabY = (100 - procentHp) * 1.2;

        ctx.drawImage(
          fire,
          this.animX,
          this.animY,
          200,
          200,
          this.x + (100 - this.gabX) / 2 + removeX,
          this.y - 90 + (100 - this.gabY) / 2 + removeY,
          this.gabX,
          this.gabY
        );

        this.animTimer++;

        if (this.animTimer === 3) {
          this.animTimer = 0;

          this.animX += 200;

          if (this.animX === 1000) {
            this.animX = 0;
            this.animY += 200;
          }

          if (this.animY === 400) {
            this.animY = 0;
          }
        }
      }
    }

    if (this.distroyTimer < 501) {
      this.gabX = 100;
      this.gabY = 100;
      this.animX = 510;
      this.animY = 150;
      //this.tileStepX=40;
      //this.tileStepY=35;
      this.animKorrektorY = -50;
      //this.animKorrektorX=-10;

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }

      ctx.drawImage(
        this.imageToDraw,
        0,
        500,
        100,
        100,
        this.x + removeX,
        this.y + removeY + this.animKorrektorY,
        this.gabX,
        this.gabY
      );

      ctx.globalAlpha = 1;

      if ((this.hp <= 0 || this.buildready <= 0) && this.distroyTimer >= 436) {
        if (this.distroyTimer <= 500 && this.distroyTimer > 496) {
          this.animX_2 = 0;
        } else if (this.distroyTimer <= 496 && this.distroyTimer > 492) {
          this.animX_2 = 100;
        } else if (this.distroyTimer <= 492 && this.distroyTimer > 488) {
          this.animX_2 = 200;
        } else if (this.distroyTimer <= 488 && this.distroyTimer > 484) {
          this.animX_2 = 300;
        } else if (this.distroyTimer <= 484 && this.distroyTimer > 480) {
          this.animX_2 = 400;
        } else if (this.distroyTimer <= 480 && this.distroyTimer > 476) {
          this.animX_2 = 500;
        } else if (this.distroyTimer <= 476 && this.distroyTimer > 472) {
          this.animX_2 = 600;
        } else if (this.distroyTimer <= 472 && this.distroyTimer > 468) {
          this.animX_2 = 700;
        } else if (this.distroyTimer <= 468 && this.distroyTimer > 464) {
          this.animX_2 = 800;
        } else if (this.distroyTimer <= 464 && this.distroyTimer > 460) {
          this.animX_2 = 900;
        } else if (this.distroyTimer <= 460 && this.distroyTimer > 456) {
          this.animX_2 = 1000;
        } else if (this.distroyTimer <= 456 && this.distroyTimer > 452) {
          this.animX_2 = 1100;
        } else if (this.distroyTimer <= 452 && this.distroyTimer > 448) {
          this.animX_2 = 1200;
        } else if (this.distroyTimer <= 448 && this.distroyTimer > 444) {
          this.animX_2 = 1300;
        } else if (this.distroyTimer <= 444 && this.distroyTimer > 440) {
          this.animX_2 = 1400;
        } else if (this.distroyTimer <= 440 && this.distroyTimer > 436) {
          this.animX_2 = 1500;
        }

        ctx.drawImage(
          vzryv1,
          this.animX_2 + 5,
          this.animY_2,
          96,
          100,
          this.x + removeX - 25,
          this.y + removeY - 115,
          150,
          200
        );

        //console.log(this.distroyTimer);
      }
    }
  } else if (this.type === "oil_Ref") {
    //hp oil_ref_orc_black
    //console.log()

    if (this.drawQuatro) {
      if (this.control === "player") {
        ctx.strokeStyle = "green";
      } else {
        ctx.strokeStyle = "red";
      }

      ctx.strokeRect(this.x + removeX - 50, this.y + removeY - 50, 150, 150);
    }

    this.drawQuatro = false;

    if (this.buildready > 0 && this.hp > 0) {
      let procent = this.buildready / (this.hpfull / 100);
      let procentHp = this.hp / (this.hpfull / 100);
      //console.log(procent);

      if (procent === 100) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          0,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );

        //this.buildready=2000;
      } else if (procent < 100) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          100,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );
      }

      //console.log("draw");

      if (procentHp <= 90) {
        this.gabX = (150 - procentHp) * 1.2;
        this.gabY = (150 - procentHp) * 1.2;

        ctx.drawImage(
          fire,
          this.animX,
          this.animY,
          200,
          200,
          this.x - 30 + (100 - this.gabX) / 2 + removeX,
          this.y - 60 + (100 - this.gabY) / 2 + removeY,
          this.gabX,
          this.gabY
        );

        this.animTimer++;

        if (this.animTimer === 3) {
          this.animTimer = 0;

          this.animX += 200;

          if (this.animX === 1000) {
            this.animX = 0;
            this.animY += 200;
          }

          if (this.animY === 400) {
            this.animY = 0;
          }
        }
      }
    } else {
      this.gabX = 180;
      this.gabY = 180;

      this.animX = 510;
      this.animY = 150;
      this.tileStepX = 40;
      this.tileStepY = 35;
      this.animKorrektorY = -65;
      this.animKorrektorX = -85;

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }

      ctx.drawImage(
        port_trup,
        0,
        0,
        100,
        100,
        this.x + removeX + this.animKorrektorX,
        this.y + removeY + this.animKorrektorY,
        this.gabX,
        this.gabY
      );

      ctx.globalAlpha = 1;

      if ((this.hp <= 0 || this.buildready <= 0) && this.distroyTimer >= 436) {
        if (this.distroyTimer <= 500 && this.distroyTimer > 496) {
          this.animX_2 = 0;
        } else if (this.distroyTimer <= 496 && this.distroyTimer > 492) {
          this.animX_2 = 100;
        } else if (this.distroyTimer <= 492 && this.distroyTimer > 488) {
          this.animX_2 = 200;
        } else if (this.distroyTimer <= 488 && this.distroyTimer > 484) {
          this.animX_2 = 300;
        } else if (this.distroyTimer <= 484 && this.distroyTimer > 480) {
          this.animX_2 = 400;
        } else if (this.distroyTimer <= 480 && this.distroyTimer > 476) {
          this.animX_2 = 500;
        } else if (this.distroyTimer <= 476 && this.distroyTimer > 472) {
          this.animX_2 = 600;
        } else if (this.distroyTimer <= 472 && this.distroyTimer > 468) {
          this.animX_2 = 700;
        } else if (this.distroyTimer <= 468 && this.distroyTimer > 464) {
          this.animX_2 = 800;
        } else if (this.distroyTimer <= 464 && this.distroyTimer > 460) {
          this.animX_2 = 900;
        } else if (this.distroyTimer <= 460 && this.distroyTimer > 456) {
          this.animX_2 = 1000;
        } else if (this.distroyTimer <= 456 && this.distroyTimer > 452) {
          this.animX_2 = 1100;
        } else if (this.distroyTimer <= 452 && this.distroyTimer > 448) {
          this.animX_2 = 1200;
        } else if (this.distroyTimer <= 448 && this.distroyTimer > 444) {
          this.animX_2 = 1300;
        } else if (this.distroyTimer <= 444 && this.distroyTimer > 440) {
          this.animX_2 = 1400;
        } else if (this.distroyTimer <= 440 && this.distroyTimer > 436) {
          this.animX_2 = 1500;
        }

        ctx.drawImage(
          vzryv1,
          this.animX_2 + 5,
          this.animY_2,
          96,
          100,
          this.x + removeX - 75,
          this.y + removeY - 170,
          200,
          350
        );
      }
    }
  } else if (this.type === "oil") {
    ctx.drawImage(
      oil,
      this.animX,
      this.animY,
      100,
      100,
      this.x + removeX,
      this.y + removeY - 50,
      100,
      100
    );

    //ctx.strokeStyle="red";
    //ctx.strokeRect(this.x+removeX,(this.y+removeY)-50,100,100);
  } else if (this.type === "port") {
    //hp

    if (this.drawQuatro) {
      if (this.control === "player") {
        ctx.strokeStyle = "green";
      } else {
        ctx.strokeStyle = "red";
      }

      ctx.strokeRect(this.x + removeX - 50, this.y + removeY - 50, 150, 150);
    }

    this.drawQuatro = false;

    if (this.buildready > 0 && this.hp > 0) {
      let procent = this.buildready / (this.hpfull / 100);
      let procentHp = this.hp / (this.hpfull / 100);
      //console.log(procent);

      if (procent === 100) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          0,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );

        //this.buildready=2000;
      } else if (procent < 100) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          100,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );
      }

      //console.log("draw");

      if (procentHp <= 90) {
        this.gabX = (150 - procentHp) * 1.2;
        this.gabY = (150 - procentHp) * 1.2;

        ctx.drawImage(
          fire,
          this.animX,
          this.animY,
          200,
          200,
          this.x - 30 + (100 - this.gabX) / 2 + removeX,
          this.y - 60 + (100 - this.gabY) / 2 + removeY,
          this.gabX,
          this.gabY
        );

        this.animTimer++;

        if (this.animTimer === 3) {
          this.animTimer = 0;

          this.animX += 200;

          if (this.animX === 1000) {
            this.animX = 0;
            this.animY += 200;
          }

          if (this.animY === 400) {
            this.animY = 0;
          }
        }
      }
    } else {
      this.gabX = 180;
      this.gabY = 180;

      this.animX = 510;
      this.animY = 150;
      this.tileStepX = 40;
      this.tileStepY = 35;
      this.animKorrektorY = -65;
      this.animKorrektorX = -85;

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }

      ctx.drawImage(
        port_trup,
        0,
        0,
        100,
        100,
        this.x + removeX + this.animKorrektorX,
        this.y + removeY + this.animKorrektorY,
        this.gabX,
        this.gabY
      );

      ctx.globalAlpha = 1;

      if ((this.hp <= 0 || this.buildready <= 0) && this.distroyTimer >= 436) {
        if (this.distroyTimer <= 500 && this.distroyTimer > 496) {
          this.animX_2 = 0;
        } else if (this.distroyTimer <= 496 && this.distroyTimer > 492) {
          this.animX_2 = 100;
        } else if (this.distroyTimer <= 492 && this.distroyTimer > 488) {
          this.animX_2 = 200;
        } else if (this.distroyTimer <= 488 && this.distroyTimer > 484) {
          this.animX_2 = 300;
        } else if (this.distroyTimer <= 484 && this.distroyTimer > 480) {
          this.animX_2 = 400;
        } else if (this.distroyTimer <= 480 && this.distroyTimer > 476) {
          this.animX_2 = 500;
        } else if (this.distroyTimer <= 476 && this.distroyTimer > 472) {
          this.animX_2 = 600;
        } else if (this.distroyTimer <= 472 && this.distroyTimer > 468) {
          this.animX_2 = 700;
        } else if (this.distroyTimer <= 468 && this.distroyTimer > 464) {
          this.animX_2 = 800;
        } else if (this.distroyTimer <= 464 && this.distroyTimer > 460) {
          this.animX_2 = 900;
        } else if (this.distroyTimer <= 460 && this.distroyTimer > 456) {
          this.animX_2 = 1000;
        } else if (this.distroyTimer <= 456 && this.distroyTimer > 452) {
          this.animX_2 = 1100;
        } else if (this.distroyTimer <= 452 && this.distroyTimer > 448) {
          this.animX_2 = 1200;
        } else if (this.distroyTimer <= 448 && this.distroyTimer > 444) {
          this.animX_2 = 1300;
        } else if (this.distroyTimer <= 444 && this.distroyTimer > 440) {
          this.animX_2 = 1400;
        } else if (this.distroyTimer <= 440 && this.distroyTimer > 436) {
          this.animX_2 = 1500;
        }

        ctx.drawImage(
          vzryv1,
          this.animX_2 + 5,
          this.animY_2,
          96,
          100,
          this.x + removeX - 75,
          this.y + removeY - 170,
          200,
          350
        );
      }
    }
  } else if (
    this.type === "altar" ||
    this.type === "dragon_roost" ||
    this.type === "temple"
  ) {
    //barack

    if (this.drawQuatro) {
      if (this.control === "player") {
        ctx.strokeStyle = "green";
      } else {
        ctx.strokeStyle = "red";
      }

      ctx.strokeRect(this.x + removeX - 50, this.y + removeY - 50, 150, 150);
    }

    this.drawQuatro = false;

    if (this.buildready > 0 && this.hp > 0) {
      let procent = this.buildready / (this.hpfull / 100);
      let procentHp = this.hp / (this.hpfull / 100);
      //console.log(procent);

      if (procent === 100) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          0,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );

        //this.buildready=2000;
      } else if (procent > 60) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          100,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );
      } else if (procent > 30) {
        ctx.drawImage(
          som,
          580,
          200,
          80,
          60,
          this.x + removeX - 70,
          this.y + removeY - 80,
          200,
          200
        );
      } else if (procent >= 0) {
        ctx.drawImage(
          som,
          580,
          140,
          80,
          60,
          this.x + removeX - 70,
          this.y + removeY - 70,
          200,
          200
        );
      }

      //console.log("draw");

      if (procentHp <= 90) {
        this.gabX = (150 - procentHp) * 1.2;
        this.gabY = (150 - procentHp) * 1.2;

        ctx.drawImage(
          fire,
          this.animX,
          this.animY,
          200,
          200,
          this.x - 30 + (100 - this.gabX) / 2 + removeX,
          this.y - 60 + (100 - this.gabY) / 2 + removeY,
          this.gabX,
          this.gabY
        );

        this.animTimer++;

        if (this.animTimer === 3) {
          this.animTimer = 0;

          this.animX += 200;

          if (this.animX === 1000) {
            this.animX = 0;
            this.animY += 200;
          }

          if (this.animY === 400) {
            this.animY = 0;
          }
        }
      }
    } else {
      if (this.imageToDraw !== som) {
        this.imageToDraw = som;
      }

      this.gabX = 180;
      this.gabY = 180;

      this.animX = 510;
      this.animY = 150;
      this.tileStepX = 40;
      this.tileStepY = 35;
      this.animKorrektorY = -65;
      this.animKorrektorX = -85;

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }

      ctx.drawImage(
        this.imageToDraw,
        this.animX,
        this.animY,
        this.tileStepX,
        this.tileStepY,
        this.x + removeX + this.animKorrektorX,
        this.y + removeY + this.animKorrektorY,
        this.gabX,
        this.gabY
      );

      ctx.globalAlpha = 1;

      if ((this.hp <= 0 || this.buildready <= 0) && this.distroyTimer >= 436) {
        if (this.distroyTimer <= 500 && this.distroyTimer > 496) {
          this.animX_2 = 0;
        } else if (this.distroyTimer <= 496 && this.distroyTimer > 492) {
          this.animX_2 = 100;
        } else if (this.distroyTimer <= 492 && this.distroyTimer > 488) {
          this.animX_2 = 200;
        } else if (this.distroyTimer <= 488 && this.distroyTimer > 484) {
          this.animX_2 = 300;
        } else if (this.distroyTimer <= 484 && this.distroyTimer > 480) {
          this.animX_2 = 400;
        } else if (this.distroyTimer <= 480 && this.distroyTimer > 476) {
          this.animX_2 = 500;
        } else if (this.distroyTimer <= 476 && this.distroyTimer > 472) {
          this.animX_2 = 600;
        } else if (this.distroyTimer <= 472 && this.distroyTimer > 468) {
          this.animX_2 = 700;
        } else if (this.distroyTimer <= 468 && this.distroyTimer > 464) {
          this.animX_2 = 800;
        } else if (this.distroyTimer <= 464 && this.distroyTimer > 460) {
          this.animX_2 = 900;
        } else if (this.distroyTimer <= 460 && this.distroyTimer > 456) {
          this.animX_2 = 1000;
        } else if (this.distroyTimer <= 456 && this.distroyTimer > 452) {
          this.animX_2 = 1100;
        } else if (this.distroyTimer <= 452 && this.distroyTimer > 448) {
          this.animX_2 = 1200;
        } else if (this.distroyTimer <= 448 && this.distroyTimer > 444) {
          this.animX_2 = 1300;
        } else if (this.distroyTimer <= 444 && this.distroyTimer > 440) {
          this.animX_2 = 1400;
        } else if (this.distroyTimer <= 440 && this.distroyTimer > 436) {
          this.animX_2 = 1500;
        }

        ctx.drawImage(
          vzryv1,
          this.animX_2 + 5,
          this.animY_2,
          96,
          100,
          this.x + removeX - 75,
          this.y + removeY - 170,
          200,
          350
        );
      }
    }
  } else if (this.type === "ogreBase") {
    //barack

    if (this.drawQuatro) {
      if (this.control === "player") {
        ctx.strokeStyle = "green";
      } else {
        ctx.strokeStyle = "red";
      }

      ctx.strokeRect(this.x + removeX - 50, this.y + removeY - 50, 150, 150);
    }

    this.drawQuatro = false;

    if (this.buildready > 0 && this.hp > 0) {
      let procent = this.buildready / (this.hpfull / 100);
      let procentHp = this.hp / (this.hpfull / 100);
      //console.log(procent);

      if (procent === 100) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          0,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );

        //this.buildready=2000;
      } else if (procent > 60) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          100,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );
      } else if (procent > 30) {
        ctx.drawImage(
          som,
          580,
          200,
          80,
          60,
          this.x + removeX - 70,
          this.y + removeY - 80,
          200,
          200
        );
      } else if (procent >= 0) {
        ctx.drawImage(
          som,
          580,
          140,
          80,
          60,
          this.x + removeX - 70,
          this.y + removeY - 70,
          200,
          200
        );
      }

      //console.log("draw");

      if (procentHp <= 90) {
        this.gabX = (150 - procentHp) * 1.2;
        this.gabY = (150 - procentHp) * 1.2;

        ctx.drawImage(
          fire,
          this.animX,
          this.animY,
          200,
          200,
          this.x - 30 + (100 - this.gabX) / 2 + removeX,
          this.y - 60 + (100 - this.gabY) / 2 + removeY,
          this.gabX,
          this.gabY
        );

        this.animTimer++;

        if (this.animTimer === 3) {
          this.animTimer = 0;

          this.animX += 200;

          if (this.animX === 1000) {
            this.animX = 0;
            this.animY += 200;
          }

          if (this.animY === 400) {
            this.animY = 0;
          }
        }
      }
    } else {
      if (this.imageToDraw !== som) {
        this.imageToDraw = som;
      }

      this.gabX = 180;
      this.gabY = 180;

      this.animX = 510;
      this.animY = 150;
      this.tileStepX = 40;
      this.tileStepY = 35;
      this.animKorrektorY = -65;
      this.animKorrektorX = -85;

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }

      ctx.drawImage(
        this.imageToDraw,
        this.animX,
        this.animY,
        this.tileStepX,
        this.tileStepY,
        this.x + removeX + this.animKorrektorX,
        this.y + removeY + this.animKorrektorY,
        this.gabX,
        this.gabY
      );

      ctx.globalAlpha = 1;

      if ((this.hp <= 0 || this.buildready <= 0) && this.distroyTimer >= 436) {
        if (this.distroyTimer <= 500 && this.distroyTimer > 496) {
          this.animX_2 = 0;
        } else if (this.distroyTimer <= 496 && this.distroyTimer > 492) {
          this.animX_2 = 100;
        } else if (this.distroyTimer <= 492 && this.distroyTimer > 488) {
          this.animX_2 = 200;
        } else if (this.distroyTimer <= 488 && this.distroyTimer > 484) {
          this.animX_2 = 300;
        } else if (this.distroyTimer <= 484 && this.distroyTimer > 480) {
          this.animX_2 = 400;
        } else if (this.distroyTimer <= 480 && this.distroyTimer > 476) {
          this.animX_2 = 500;
        } else if (this.distroyTimer <= 476 && this.distroyTimer > 472) {
          this.animX_2 = 600;
        } else if (this.distroyTimer <= 472 && this.distroyTimer > 468) {
          this.animX_2 = 700;
        } else if (this.distroyTimer <= 468 && this.distroyTimer > 464) {
          this.animX_2 = 800;
        } else if (this.distroyTimer <= 464 && this.distroyTimer > 460) {
          this.animX_2 = 900;
        } else if (this.distroyTimer <= 460 && this.distroyTimer > 456) {
          this.animX_2 = 1000;
        } else if (this.distroyTimer <= 456 && this.distroyTimer > 452) {
          this.animX_2 = 1100;
        } else if (this.distroyTimer <= 452 && this.distroyTimer > 448) {
          this.animX_2 = 1200;
        } else if (this.distroyTimer <= 448 && this.distroyTimer > 444) {
          this.animX_2 = 1300;
        } else if (this.distroyTimer <= 444 && this.distroyTimer > 440) {
          this.animX_2 = 1400;
        } else if (this.distroyTimer <= 440 && this.distroyTimer > 436) {
          this.animX_2 = 1500;
        }

        ctx.drawImage(
          vzryv1,
          this.animX_2 + 5,
          this.animY_2,
          96,
          100,
          this.x + removeX - 75,
          this.y + removeY - 170,
          200,
          350
        );
      }
    }
  } else if (this.type === "kuznya") {
    //barack

    if (this.drawQuatro) {
      if (this.control === "player") {
        ctx.strokeStyle = "green";
      } else {
        ctx.strokeStyle = "red";
      }

      ctx.strokeRect(this.x + removeX - 50, this.y + removeY - 50, 150, 150);
    }

    this.drawQuatro = false;

    if (this.buildready > 0 && this.hp > 0) {
      let procent = this.buildready / (this.hpfull / 100);
      let procentHp = this.hp / (this.hpfull / 100);
      //console.log(procent);

      if (procent === 100) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          0,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );

        //this.buildready=2000;
      } else if (procent > 60) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          100,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );
      } else if (procent > 30) {
        ctx.drawImage(
          som,
          580,
          200,
          80,
          60,
          this.x + removeX - 70,
          this.y + removeY - 80,
          200,
          200
        );
      } else if (procent >= 0) {
        ctx.drawImage(
          som,
          580,
          140,
          80,
          60,
          this.x + removeX - 70,
          this.y + removeY - 70,
          200,
          200
        );
      }

      //console.log("draw");

      if (procentHp <= 90) {
        this.gabX = (150 - procentHp) * 1.2;
        this.gabY = (150 - procentHp) * 1.2;

        ctx.drawImage(
          fire,
          this.animX,
          this.animY,
          200,
          200,
          this.x - 30 + (100 - this.gabX) / 2 + removeX,
          this.y - 60 + (100 - this.gabY) / 2 + removeY,
          this.gabX,
          this.gabY
        );

        this.animTimer++;

        if (this.animTimer === 3) {
          this.animTimer = 0;

          this.animX += 200;

          if (this.animX === 1000) {
            this.animX = 0;
            this.animY += 200;
          }

          if (this.animY === 400) {
            this.animY = 0;
          }
        }
      }
    } else {
      if (this.imageToDraw !== som) {
        this.imageToDraw = som;
      }

      this.gabX = 180;
      this.gabY = 180;

      this.animX = 510;
      this.animY = 150;
      this.tileStepX = 40;
      this.tileStepY = 35;
      this.animKorrektorY = -65;
      this.animKorrektorX = -85;

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }

      ctx.drawImage(
        this.imageToDraw,
        this.animX,
        this.animY,
        this.tileStepX,
        this.tileStepY,
        this.x + removeX + this.animKorrektorX,
        this.y + removeY + this.animKorrektorY,
        this.gabX,
        this.gabY
      );

      ctx.globalAlpha = 1;

      if ((this.hp <= 0 || this.buildready <= 0) && this.distroyTimer >= 436) {
        if (this.distroyTimer <= 500 && this.distroyTimer > 496) {
          this.animX_2 = 0;
        } else if (this.distroyTimer <= 496 && this.distroyTimer > 492) {
          this.animX_2 = 100;
        } else if (this.distroyTimer <= 492 && this.distroyTimer > 488) {
          this.animX_2 = 200;
        } else if (this.distroyTimer <= 488 && this.distroyTimer > 484) {
          this.animX_2 = 300;
        } else if (this.distroyTimer <= 484 && this.distroyTimer > 480) {
          this.animX_2 = 400;
        } else if (this.distroyTimer <= 480 && this.distroyTimer > 476) {
          this.animX_2 = 500;
        } else if (this.distroyTimer <= 476 && this.distroyTimer > 472) {
          this.animX_2 = 600;
        } else if (this.distroyTimer <= 472 && this.distroyTimer > 468) {
          this.animX_2 = 700;
        } else if (this.distroyTimer <= 468 && this.distroyTimer > 464) {
          this.animX_2 = 800;
        } else if (this.distroyTimer <= 464 && this.distroyTimer > 460) {
          this.animX_2 = 900;
        } else if (this.distroyTimer <= 460 && this.distroyTimer > 456) {
          this.animX_2 = 1000;
        } else if (this.distroyTimer <= 456 && this.distroyTimer > 452) {
          this.animX_2 = 1100;
        } else if (this.distroyTimer <= 452 && this.distroyTimer > 448) {
          this.animX_2 = 1200;
        } else if (this.distroyTimer <= 448 && this.distroyTimer > 444) {
          this.animX_2 = 1300;
        } else if (this.distroyTimer <= 444 && this.distroyTimer > 440) {
          this.animX_2 = 1400;
        } else if (this.distroyTimer <= 440 && this.distroyTimer > 436) {
          this.animX_2 = 1500;
        }

        ctx.drawImage(
          vzryv1,
          this.animX_2 + 5,
          this.animY_2,
          96,
          100,
          this.x + removeX - 75,
          this.y + removeY - 170,
          200,
          350
        );
      }
    }
  } else if (this.type === "tower") {
    //tower

    let imageToDraw;

    if (this.upgrade === "watch") {
      imageToDraw = this.imageToDraw;
    } else if (this.upgrade === "guard") {
      imageToDraw = this.imageToDraw_2;
    } else if (this.upgrade === "cannon") {
      imageToDraw = this.imageToDraw_3;
    }

    /////////////////
    /*
let vertikal=Math.floor(this.damagePointY/50);
let horizont=Math.floor(this.damagePointX/50);

for(let i=vertikal-11;i<vertikal+11;i++){
	
	for(let k=horizont-11;k<horizont+11;k++){
		
	if(gameFielg[i]&&gameFielg[i][k]){	
		let a=(gameFielg[i][k].x+25)-this.damagePointX;
		let b=(gameFielg[i][k].y+25)-this.damagePointY;
		
		let c=Math.sqrt(a*a+b*b);
		
	if(c<=450){
		
		ctx.strokeStyle="red";
		ctx.strokeRect(gameFielg[i][k].x+removeX,gameFielg[i][k].y+removeY,50,50);
		
	};

	};
		
	};
	
};

*/
    /////////////////////

    if (this.drawQuatro) {
      if (this.control === "player") {
        ctx.strokeStyle = "green";
      } else {
        ctx.strokeStyle = "red";
      }

      ctx.strokeRect(this.x + removeX, this.y + removeY - 50, 100, 100);
    }

    this.drawQuatro = false;

    if (this.hp > 0 && this.buildready > 0) {
      let procent = this.buildready / (this.hpfull / 100);
      let procentHp = this.hp / (this.hpfull / 100);

      //console.log(procent);

      //if(this.target){

      //	ctx.fillStyle="red";
      //	ctx.fillRect(this.target.x+removeX,this.target.y+removeY,50,50);

      //};

      if (procent === 100 && !this.upgradeTimer) {
        ctx.drawImage(
          imageToDraw,
          0,
          0,
          100,
          100,
          this.x + removeX - 10,
          this.y + removeY - 105,
          120,
          150
        );

        //this.buildready=2000;
      } else {
        ctx.drawImage(
          imageToDraw,
          0,
          100,
          100,
          100,
          this.x + removeX - 10,
          this.y + removeY - 105,
          120,
          150
        );
      }

      //ctx.fillStyle="red";
      //ctx.fillRect(this.firePointX+removeX,this.firePointY+removeY,5,5);

      if (procentHp <= 90) {
        this.gabX = (100 - procentHp) * 1.2;
        this.gabY = (100 - procentHp) * 1.2;

        ctx.drawImage(
          fire,
          this.animX,
          this.animY,
          200,
          200,
          this.x + (100 - this.gabX) / 2 + removeX,
          this.y - 90 + (100 - this.gabY) / 2 + removeY - 20,
          this.gabX,
          this.gabY
        );

        this.animTimer++;

        if (this.animTimer === 3) {
          this.animTimer = 0;

          this.animX += 200;

          if (this.animX === 1000) {
            this.animX = 0;
            this.animY += 200;
          }

          if (this.animY === 400) {
            this.animY = 0;
          }
        }
      }
    }

    if (this.distroyTimer < 501) {
      if (imageToDraw !== som) {
        imageToDraw = som;
      }

      this.gabX = 100;
      this.gabY = 100;
      this.animX = 510;
      this.animY = 150;
      this.tileStepX = 40;
      this.tileStepY = 35;
      this.animKorrektorY = -50;
      this.animKorrektorX = -10;

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }

      ctx.drawImage(
        imageToDraw,
        this.animX,
        this.animY,
        this.tileStepX,
        this.tileStepY,
        this.x + removeX + this.animKorrektorX,
        this.y + removeY + this.animKorrektorY,
        this.gabX,
        this.gabY
      );

      ctx.globalAlpha = 1;

      if ((this.hp <= 0 || this.buildready <= 0) && this.distroyTimer >= 436) {
        if (this.distroyTimer <= 500 && this.distroyTimer > 496) {
          this.animX_2 = 0;
        } else if (this.distroyTimer <= 496 && this.distroyTimer > 492) {
          this.animX_2 = 100;
        } else if (this.distroyTimer <= 492 && this.distroyTimer > 488) {
          this.animX_2 = 200;
        } else if (this.distroyTimer <= 488 && this.distroyTimer > 484) {
          this.animX_2 = 300;
        } else if (this.distroyTimer <= 484 && this.distroyTimer > 480) {
          this.animX_2 = 400;
        } else if (this.distroyTimer <= 480 && this.distroyTimer > 476) {
          this.animX_2 = 500;
        } else if (this.distroyTimer <= 476 && this.distroyTimer > 472) {
          this.animX_2 = 600;
        } else if (this.distroyTimer <= 472 && this.distroyTimer > 468) {
          this.animX_2 = 700;
        } else if (this.distroyTimer <= 468 && this.distroyTimer > 464) {
          this.animX_2 = 800;
        } else if (this.distroyTimer <= 464 && this.distroyTimer > 460) {
          this.animX_2 = 900;
        } else if (this.distroyTimer <= 460 && this.distroyTimer > 456) {
          this.animX_2 = 1000;
        } else if (this.distroyTimer <= 456 && this.distroyTimer > 452) {
          this.animX_2 = 1100;
        } else if (this.distroyTimer <= 452 && this.distroyTimer > 448) {
          this.animX_2 = 1200;
        } else if (this.distroyTimer <= 448 && this.distroyTimer > 444) {
          this.animX_2 = 1300;
        } else if (this.distroyTimer <= 444 && this.distroyTimer > 440) {
          this.animX_2 = 1400;
        } else if (this.distroyTimer <= 440 && this.distroyTimer > 436) {
          this.animX_2 = 1500;
        }

        ctx.drawImage(
          vzryv1,
          this.animX_2 + 5,
          this.animY_2,
          96,
          100,
          this.x + removeX - 25,
          this.y + removeY - 115,
          150,
          200
        );

        //console.log(this.distroyTimer);
      }
    }
  } else if (this.type === 5) {
    //barack

    /*
	
	if(this.fatherFraction.fraction==="redOrcs"&&this.imageToDraw!==leso){
		
	this.imageToDraw=leso;
	}
	else if(this.fatherFraction.fraction==="blackOrcs"&&this.imageToDraw!==leso_black){
		
		this.imageToDraw=leso_black;
	}
		else if(this.fatherFraction.fraction==="lazurOrcs"&&this.imageToDraw!==leso_lazur){
		
		this.imageToDraw=leso_lazur;
	}
	*/

    if (this.drawQuatro) {
      if (this.control === "player") {
        ctx.strokeStyle = "green";
      } else {
        ctx.strokeStyle = "red";
      }

      ctx.strokeRect(this.x + removeX - 50, this.y + removeY - 50, 150, 150);
    }

    this.drawQuatro = false;

    if (this.buildready > 0 && this.hp > 0) {
      let procent = this.buildready / (this.hpfull / 100);
      let procentHp = this.hp / (this.hpfull / 100);
      //console.log(procent);

      if (procent === 100) {
        ctx.drawImage(
          this.imageToDraw,
          100,
          0,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );

        //this.buildready=2000;
      } else if (procent > 60) {
        ctx.drawImage(
          this.imageToDraw,
          100,
          100,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );
      } else if (procent > 30) {
        ctx.drawImage(
          som,
          580,
          200,
          80,
          60,
          this.x + removeX - 70,
          this.y + removeY - 80,
          200,
          200
        );
      } else if (procent >= 0) {
        ctx.drawImage(
          som,
          580,
          140,
          80,
          60,
          this.x + removeX - 70,
          this.y + removeY - 70,
          200,
          200
        );
      }

      //console.log("draw");

      if (procentHp <= 90) {
        this.gabX = (150 - procentHp) * 1.2;
        this.gabY = (150 - procentHp) * 1.2;

        ctx.drawImage(
          fire,
          this.animX,
          this.animY,
          200,
          200,
          this.x - 30 + (100 - this.gabX) / 2 + removeX,
          this.y - 60 + (100 - this.gabY) / 2 + removeY,
          this.gabX,
          this.gabY
        );

        this.animTimer++;

        if (this.animTimer === 3) {
          this.animTimer = 0;

          this.animX += 200;

          if (this.animX === 1000) {
            this.animX = 0;
            this.animY += 200;
          }

          if (this.animY === 400) {
            this.animY = 0;
          }
        }
      }
    } else {
      if (this.imageToDraw !== som) {
        this.imageToDraw = som;
      }

      this.gabX = 180;
      this.gabY = 180;

      this.animX = 510;
      this.animY = 150;
      this.tileStepX = 40;
      this.tileStepY = 35;
      this.animKorrektorY = -65;
      this.animKorrektorX = -85;

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }

      ctx.drawImage(
        this.imageToDraw,
        this.animX,
        this.animY,
        this.tileStepX,
        this.tileStepY,
        this.x + removeX + this.animKorrektorX,
        this.y + removeY + this.animKorrektorY,
        this.gabX,
        this.gabY
      );

      ctx.globalAlpha = 1;

      if ((this.hp <= 0 || this.buildready <= 0) && this.distroyTimer >= 436) {
        if (this.distroyTimer <= 500 && this.distroyTimer > 496) {
          this.animX_2 = 0;
        } else if (this.distroyTimer <= 496 && this.distroyTimer > 492) {
          this.animX_2 = 100;
        } else if (this.distroyTimer <= 492 && this.distroyTimer > 488) {
          this.animX_2 = 200;
        } else if (this.distroyTimer <= 488 && this.distroyTimer > 484) {
          this.animX_2 = 300;
        } else if (this.distroyTimer <= 484 && this.distroyTimer > 480) {
          this.animX_2 = 400;
        } else if (this.distroyTimer <= 480 && this.distroyTimer > 476) {
          this.animX_2 = 500;
        } else if (this.distroyTimer <= 476 && this.distroyTimer > 472) {
          this.animX_2 = 600;
        } else if (this.distroyTimer <= 472 && this.distroyTimer > 468) {
          this.animX_2 = 700;
        } else if (this.distroyTimer <= 468 && this.distroyTimer > 464) {
          this.animX_2 = 800;
        } else if (this.distroyTimer <= 464 && this.distroyTimer > 460) {
          this.animX_2 = 900;
        } else if (this.distroyTimer <= 460 && this.distroyTimer > 456) {
          this.animX_2 = 1000;
        } else if (this.distroyTimer <= 456 && this.distroyTimer > 452) {
          this.animX_2 = 1100;
        } else if (this.distroyTimer <= 452 && this.distroyTimer > 448) {
          this.animX_2 = 1200;
        } else if (this.distroyTimer <= 448 && this.distroyTimer > 444) {
          this.animX_2 = 1300;
        } else if (this.distroyTimer <= 444 && this.distroyTimer > 440) {
          this.animX_2 = 1400;
        } else if (this.distroyTimer <= 440 && this.distroyTimer > 436) {
          this.animX_2 = 1500;
        }

        ctx.drawImage(
          vzryv1,
          this.animX_2 + 5,
          this.animY_2,
          96,
          100,
          this.x + removeX - 75,
          this.y + removeY - 170,
          200,
          350
        );
      }
    }
  } else if (this.type === 4) {
    //lesopilka

    if (
      this.fatherFraction.fraction === "redOrcs" &&
      this.imageToDraw !== leso
    ) {
      this.imageToDraw = leso;
    } else if (
      this.fatherFraction.fraction === "blackOrcs" &&
      this.imageToDraw !== leso_black
    ) {
      this.imageToDraw = leso_black;
    } else if (
      this.fatherFraction.fraction === "lazurOrcs" &&
      this.imageToDraw !== leso_lazur
    ) {
      this.imageToDraw = leso_lazur;
    }

    if (this.drawQuatro) {
      if (this.control === "player") {
        ctx.strokeStyle = "green";
      } else {
        ctx.strokeStyle = "red";
      }

      ctx.strokeRect(this.x + removeX - 50, this.y + removeY - 50, 150, 150);
    }

    this.drawQuatro = false;

    if (this.buildready > 0 && this.hp > 0) {
      let procent = this.buildready / (this.hpfull / 100);
      let procentHp = this.hp / (this.hpfull / 100);
      //console.log(procent);

      if (procent === 100) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          0,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );

        //this.buildready=2000;
      } else if (procent > 60) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          100,
          100,
          100,
          this.x + removeX - 55,
          this.y + removeY - 50,
          160,
          160
        );
      } else if (procent > 30) {
        ctx.drawImage(
          som,
          580,
          200,
          80,
          60,
          this.x + removeX - 70,
          this.y + removeY - 80,
          200,
          200
        );
      } else if (procent >= 0) {
        ctx.drawImage(
          som,
          580,
          140,
          80,
          60,
          this.x + removeX - 70,
          this.y + removeY - 70,
          200,
          200
        );
      }

      //console.log("draw");

      if (procentHp <= 90) {
        this.gabX = (150 - procentHp) * 1.2;
        this.gabY = (150 - procentHp) * 1.2;

        ctx.drawImage(
          fire,
          this.animX,
          this.animY,
          200,
          200,
          this.x - 30 + (100 - this.gabX) / 2 + removeX,
          this.y - 60 + (100 - this.gabY) / 2 + removeY,
          this.gabX,
          this.gabY
        );

        this.animTimer++;

        if (this.animTimer === 3) {
          this.animTimer = 0;

          this.animX += 200;

          if (this.animX === 1000) {
            this.animX = 0;
            this.animY += 200;
          }

          if (this.animY === 400) {
            this.animY = 0;
          }
        }
      }
    } else {
      if (this.imageToDraw !== som) {
        this.imageToDraw = som;
      }

      this.gabX = 180;
      this.gabY = 180;

      this.animX = 510;
      this.animY = 150;
      this.tileStepX = 40;
      this.tileStepY = 35;
      this.animKorrektorY = -65;
      this.animKorrektorX = -85;

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }

      ctx.drawImage(
        this.imageToDraw,
        this.animX,
        this.animY,
        this.tileStepX,
        this.tileStepY,
        this.x + removeX + this.animKorrektorX,
        this.y + removeY + this.animKorrektorY,
        this.gabX,
        this.gabY
      );

      ctx.globalAlpha = 1;

      if ((this.hp <= 0 || this.buildready <= 0) && this.distroyTimer >= 436) {
        if (this.distroyTimer <= 500 && this.distroyTimer > 496) {
          this.animX_2 = 0;
        } else if (this.distroyTimer <= 496 && this.distroyTimer > 492) {
          this.animX_2 = 100;
        } else if (this.distroyTimer <= 492 && this.distroyTimer > 488) {
          this.animX_2 = 200;
        } else if (this.distroyTimer <= 488 && this.distroyTimer > 484) {
          this.animX_2 = 300;
        } else if (this.distroyTimer <= 484 && this.distroyTimer > 480) {
          this.animX_2 = 400;
        } else if (this.distroyTimer <= 480 && this.distroyTimer > 476) {
          this.animX_2 = 500;
        } else if (this.distroyTimer <= 476 && this.distroyTimer > 472) {
          this.animX_2 = 600;
        } else if (this.distroyTimer <= 472 && this.distroyTimer > 468) {
          this.animX_2 = 700;
        } else if (this.distroyTimer <= 468 && this.distroyTimer > 464) {
          this.animX_2 = 800;
        } else if (this.distroyTimer <= 464 && this.distroyTimer > 460) {
          this.animX_2 = 900;
        } else if (this.distroyTimer <= 460 && this.distroyTimer > 456) {
          this.animX_2 = 1000;
        } else if (this.distroyTimer <= 456 && this.distroyTimer > 452) {
          this.animX_2 = 1100;
        } else if (this.distroyTimer <= 452 && this.distroyTimer > 448) {
          this.animX_2 = 1200;
        } else if (this.distroyTimer <= 448 && this.distroyTimer > 444) {
          this.animX_2 = 1300;
        } else if (this.distroyTimer <= 444 && this.distroyTimer > 440) {
          this.animX_2 = 1400;
        } else if (this.distroyTimer <= 440 && this.distroyTimer > 436) {
          this.animX_2 = 1500;
        }

        ctx.drawImage(
          vzryv1,
          this.animX_2 + 5,
          this.animY_2,
          96,
          100,
          this.x + removeX - 75,
          this.y + removeY - 170,
          200,
          350
        );
      }
    }
  } else if (this.type === "wood") {
    //ctx.strokeStyle="black";
    //ctx.strokeRect(this.x+removeX,this.y+removeY,50,50);

    if (this.animTimer < 6) {
      this.animTimer++;
    } else {
      this.animTimer = 0;

      this.animX += 200;
    }

    if (this.animX === 800) {
      this.animX = 0;
    }

    let vibro = this.vibro;

    if (this.vibro % 2 === 0) {
      vibro = -this.vibro;
    }

    ctx.globalAlpha = this.distroyTimer / 20;

    //ctx.strokeStyle="red";
    //ctx.strokeRect(this.x+removeX,this.y+removeY,50,50);
    //console.log(this.animX)

    ctx.drawImage(
      this.imageToDraw,
      this.animX,
      this.animY,
      200,
      200,
      this.drawX - 10 + removeX + vibro / 4,
      this.drawY + removeY,
      60 + this.ranGabX,
      100 + this.ranGabY
    );

    ctx.globalAlpha = 1;
    //console.log(this.ranY);

    //ctx.fillStyle="blue";
    //ctx.fillRect(this.drawX+removeX,this.drawY+removeY+100,5,5);
  } else if (this.type === 1) {
    //shahta

    if (this.drawQuatro) {
      ctx.strokeStyle = "violet";
      ctx.strokeRect(this.x + removeX - 50, this.y + removeY - 50, 150, 150);
    }

    this.drawQuatro = false;

    if (this.hp > 0) {
      if (!this.workers.length) {
        this.animKorrektorX = -75;
        this.animKorrektorY = -70;
        this.animX = 0;
        this.animY = 0;
        this.tileStepX = 110;
        this.tileStepY = 105;
        this.gabX = 180;
        this.gabY = 180;

        if (this.imageToDraw !== som) {
          this.imageToDraw = som;
        }
      } else {
        //ctx.drawImage(som,0,100,110,105,this.x+removeX-75,this.y+removeY-63,180,180);
        this.animX = 0;
        this.animY = 100;
        this.animKorrektorY = -63;
        this.animKorrektorX = -75;
        this.tileStepX = 110;
        this.tileStepY = 105;
        this.gabX = 180;
        this.gabY = 180;

        if (this.imageToDraw !== som) {
          this.imageToDraw = som;
        }
      }
    } else {
      if (this.imageToDraw !== som) {
        this.imageToDraw = som;
      }

      this.animX = 510;
      this.animY = 150;
      this.tileStepX = 40;
      this.tileStepY = 35;
      this.animKorrektorY = -65;
      this.animKorrektorX = -85;

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }
    }

    ctx.drawImage(
      this.imageToDraw,
      this.animX,
      this.animY,
      this.tileStepX,
      this.tileStepY,
      this.x + removeX + this.animKorrektorX,
      this.y + removeY + this.animKorrektorY,
      this.gabX,
      this.gabY
    );

    ctx.globalAlpha = 1;

    if ((this.hp <= 0 || this.buildready <= 0) && this.distroyTimer >= 436) {
      if (this.distroyTimer <= 500 && this.distroyTimer > 496) {
        this.animX_2 = 0;
      } else if (this.distroyTimer <= 496 && this.distroyTimer > 492) {
        this.animX_2 = 100;
      } else if (this.distroyTimer <= 492 && this.distroyTimer > 488) {
        this.animX_2 = 200;
      } else if (this.distroyTimer <= 488 && this.distroyTimer > 484) {
        this.animX_2 = 300;
      } else if (this.distroyTimer <= 484 && this.distroyTimer > 480) {
        this.animX_2 = 400;
      } else if (this.distroyTimer <= 480 && this.distroyTimer > 476) {
        this.animX_2 = 500;
      } else if (this.distroyTimer <= 476 && this.distroyTimer > 472) {
        this.animX_2 = 600;
      } else if (this.distroyTimer <= 472 && this.distroyTimer > 468) {
        this.animX_2 = 700;
      } else if (this.distroyTimer <= 468 && this.distroyTimer > 464) {
        this.animX_2 = 800;
      } else if (this.distroyTimer <= 464 && this.distroyTimer > 460) {
        this.animX_2 = 900;
      } else if (this.distroyTimer <= 460 && this.distroyTimer > 456) {
        this.animX_2 = 1000;
      } else if (this.distroyTimer <= 456 && this.distroyTimer > 452) {
        this.animX_2 = 1100;
      } else if (this.distroyTimer <= 452 && this.distroyTimer > 448) {
        this.animX_2 = 1200;
      } else if (this.distroyTimer <= 448 && this.distroyTimer > 444) {
        this.animX_2 = 1300;
      } else if (this.distroyTimer <= 444 && this.distroyTimer > 440) {
        this.animX_2 = 1400;
      } else if (this.distroyTimer <= 440 && this.distroyTimer > 436) {
        this.animX_2 = 1500;
      }

      ctx.drawImage(
        vzryv1,
        this.animX_2 + 5,
        this.animY_2,
        96,
        100,
        this.x + removeX - 75,
        this.y + removeY - 170,
        200,
        350
      );

      //console.log(this.distroyTimer);
    }
  } else if (this.type === 2) {
    //townHoll

    if (this.level === 1 && this.myJoube !== "levelUpgrade") {
      //console.log("?????");

      if (this.fatherFraction.nation === "orc") {
        this.face_animY = 500;
      } else {
        this.face_animY = 400;
      }

      if (
        this.fatherFraction.fraction === "redOrcs" &&
        this.imageToDraw !== townHoll_orc_red
      ) {
        this.imageToDraw = townHoll_orc_red;
      } else if (
        this.fatherFraction.fraction === "blackOrcs" &&
        this.imageToDraw !== townHoll_orc_black
      ) {
        this.imageToDraw = townHoll_orc_black;
      } else if (
        this.fatherFraction.fraction === "lazurOrcs" &&
        this.imageToDraw !== townHoll_orc_lazur
      ) {
        this.imageToDraw = townHoll_orc_lazur;
      } else if (
        this.fatherFraction.fraction === "h_blue" &&
        this.imageToDraw !== townHoll_h_blue
      ) {
        this.imageToDraw = townHoll_h_blue;
      }
    }

    if (
      this.level === 2 ||
      (this.level === 1 && this.myJoube === "levelUpgrade")
    ) {
      //console.log("?????");

      if (
        this.fatherFraction.fraction === "redOrcs" &&
        this.imageToDraw !== townHoll_2_orc_red
      ) {
        this.imageToDraw = townHoll_2_orc_red;
      } else if (
        this.fatherFraction.fraction === "blackOrcs" &&
        this.imageToDraw !== townHoll_2_orc_black
      ) {
        this.imageToDraw = townHoll_2_orc_black;
      } else if (
        this.fatherFraction.fraction === "lazurOrcs" &&
        this.imageToDraw !== townHoll_2_orc_lazur
      ) {
        this.imageToDraw = townHoll_2_orc_lazur;
      } else if (
        this.fatherFraction.fraction === "h_blue" &&
        this.imageToDraw !== townHoll_2_h_blue
      ) {
        this.imageToDraw = townHoll_2_h_blue;
      }
    }

    if (
      this.level === 3 ||
      (this.level === 2 && this.myJoube === "levelUpgrade")
    ) {
      //console.log("?????");

      if (
        this.fatherFraction.fraction === "redOrcs" &&
        this.imageToDraw !== townHoll_3_orc_red
      ) {
        this.imageToDraw = townHoll_3_orc_red;
      } else if (
        this.fatherFraction.fraction === "blackOrcs" &&
        this.imageToDraw !== townHoll_3_orc_black
      ) {
        this.imageToDraw = townHoll_3_orc_black;
      } else if (
        this.fatherFraction.fraction === "lazurOrcs" &&
        this.imageToDraw !== townHoll_3_orc_lazur
      ) {
        this.imageToDraw = townHoll_3_orc_lazur;
      } else if (
        this.fatherFraction.fraction === "h_blue" &&
        this.imageToDraw !== townHoll_3_h_blue
      ) {
        this.imageToDraw = townHoll_3_h_blue;
      }
    }

    //console.log(this.myJoube);

    if (this.drawQuatro) {
      if (this.control === "player") {
        ctx.strokeStyle = "green";
      } else {
        ctx.strokeStyle = "red";
      }

      ctx.strokeRect(this.x + removeX - 50, this.y + removeY - 50, 150, 150);
    }

    this.drawQuatro = false;

    if (this.buildready > 0 && this.hp > 0) {
      let procent = this.buildready / (this.hpfull / 100);
      let procentHp = this.hp / (this.hpfull / 100);
      //console.log(procent);

      if (procent === 100 && this.myJoube !== "levelUpgrade") {
        //ctx.drawImage(this.imageToDraw,0,0,100,100,this.x+removeX-70,this.y+removeY-110,190,230);
        this.animX = 0;
        this.animY = 0;

        //this.buildready=2000;
      } else if (
        procent > 60 ||
        (this.myJoubeTimer && this.myJoube === "levelUpgrade")
      ) {
        //ctx.drawImage(this.imageToDraw,0,100,100,100,this.x+removeX-70,this.y+removeY-110,190,230);

        this.animX = 0;
        this.animY = 100;
      } else if (procent > 30) {
        ctx.drawImage(
          som,
          580,
          200,
          80,
          60,
          this.x + removeX - 70,
          this.y + removeY - 80,
          200,
          200
        );
      } else if (procent >= 0) {
        ctx.drawImage(
          som,
          580,
          140,
          80,
          60,
          this.x + removeX - 70,
          this.y + removeY - 70,
          200,
          200
        );
      }

      if (procent > 60) {
        ctx.drawImage(
          this.imageToDraw,
          this.animX,
          this.animY,
          100,
          100,
          this.x + removeX - 60,
          this.y + removeY - 125,
          170,
          250
        );
      }

      //ctx.strokeStyle="red";
      //ctx.strokeRect(this.x+removeX-50,this.y+removeY-50,150,150);

      if (procentHp <= 90) {
        this.gabX = (150 - procentHp) * 1.2;
        this.gabY = (150 - procentHp) * 1.2;

        ctx.drawImage(
          fire,
          this.animX2,
          this.animY2,
          200,
          200,
          this.x - 30 + (100 - this.gabX) / 2 + removeX,
          this.y - 60 + (100 - this.gabY) / 2 + removeY,
          this.gabX,
          this.gabY
        );

        this.animTimer++;

        if (this.animTimer === 3) {
          this.animTimer = 0;

          this.animX2 += 200;

          if (this.animX2 === 1000) {
            this.animX2 = 0;
            this.animY2 += 200;
          }

          if (this.animY2 === 400) {
            this.animY2 = 0;
          }
        }
      }
    } else {
      if (this.imageToDraw !== som) {
        this.imageToDraw = som;
      }

      this.gabX = 180;
      this.gabY = 180;

      this.animX = 510;
      this.animY = 150;
      this.tileStepX = 40;
      this.tileStepY = 35;
      this.animKorrektorY = -65;
      this.animKorrektorX = -85;

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }

      ctx.drawImage(
        this.imageToDraw,
        this.animX,
        this.animY,
        this.tileStepX,
        this.tileStepY,
        this.x + removeX + this.animKorrektorX,
        this.y + removeY + this.animKorrektorY,
        this.gabX,
        this.gabY
      );

      ctx.globalAlpha = 1;

      if ((this.hp <= 0 || this.buildready <= 0) && this.distroyTimer >= 436) {
        if (this.distroyTimer <= 500 && this.distroyTimer > 496) {
          this.animX_2 = 0;
        } else if (this.distroyTimer <= 496 && this.distroyTimer > 492) {
          this.animX_2 = 100;
        } else if (this.distroyTimer <= 492 && this.distroyTimer > 488) {
          this.animX_2 = 200;
        } else if (this.distroyTimer <= 488 && this.distroyTimer > 484) {
          this.animX_2 = 300;
        } else if (this.distroyTimer <= 484 && this.distroyTimer > 480) {
          this.animX_2 = 400;
        } else if (this.distroyTimer <= 480 && this.distroyTimer > 476) {
          this.animX_2 = 500;
        } else if (this.distroyTimer <= 476 && this.distroyTimer > 472) {
          this.animX_2 = 600;
        } else if (this.distroyTimer <= 472 && this.distroyTimer > 468) {
          this.animX_2 = 700;
        } else if (this.distroyTimer <= 468 && this.distroyTimer > 464) {
          this.animX_2 = 800;
        } else if (this.distroyTimer <= 464 && this.distroyTimer > 460) {
          this.animX_2 = 900;
        } else if (this.distroyTimer <= 460 && this.distroyTimer > 456) {
          this.animX_2 = 1000;
        } else if (this.distroyTimer <= 456 && this.distroyTimer > 452) {
          this.animX_2 = 1100;
        } else if (this.distroyTimer <= 452 && this.distroyTimer > 448) {
          this.animX_2 = 1200;
        } else if (this.distroyTimer <= 448 && this.distroyTimer > 444) {
          this.animX_2 = 1300;
        } else if (this.distroyTimer <= 444 && this.distroyTimer > 440) {
          this.animX_2 = 1400;
        } else if (this.distroyTimer <= 440 && this.distroyTimer > 436) {
          this.animX_2 = 1500;
        }

        ctx.drawImage(
          vzryv1,
          this.animX_2 + 5,
          this.animY_2,
          96,
          100,
          this.x + removeX - 75,
          this.y + removeY - 170,
          200,
          350
        );
      }
    }
  } else if (this.type === 3) {
    //farm

    if (this.drawQuatro) {
      if (this.control === "player") {
        ctx.strokeStyle = "green";
      } else {
        ctx.strokeStyle = "red";
      }

      ctx.strokeRect(this.x + removeX, this.y + removeY - 50, 100, 100);
    }

    this.drawQuatro = false;

    if (this.hp > 0 && this.buildready > 0) {
      let procent = this.buildready / (this.hpfull / 100);
      let procentHp = this.hp / (this.hpfull / 100);

      //console.log(procent);

      //ctx.strokeStyle="red";
      //ctx.strokeRect(this.x+removeX,this.y+removeY-50,100,100);

      if (procent === 100) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          0,
          100,
          100,
          this.x + removeX,
          this.y + removeY - 50,
          100,
          100
        );

        //this.buildready=2000;
      } else if (procent > 60) {
        ctx.drawImage(
          this.imageToDraw,
          0,
          100,
          100,
          100,
          this.x + removeX,
          this.y + removeY - 50,
          100,
          100
        );
      } else if (procent > 30) {
        ctx.drawImage(
          som,
          580,
          200,
          80,
          60,
          this.x + removeX - 5,
          this.y + removeY - 65,
          120,
          120
        );
      } else if (procent >= 0) {
        ctx.drawImage(
          som,
          580,
          140,
          80,
          60,
          this.x + removeX - 5,
          this.y + removeY - 60,
          120,
          120
        );
      }

      if (procentHp <= 90) {
        this.gabX = (100 - procentHp) * 1.2;
        this.gabY = (100 - procentHp) * 1.2;

        ctx.drawImage(
          fire,
          this.animX,
          this.animY,
          200,
          200,
          this.x + (100 - this.gabX) / 2 + removeX,
          this.y - 90 + (100 - this.gabY) / 2 + removeY,
          this.gabX,
          this.gabY
        );

        this.animTimer++;

        if (this.animTimer === 3) {
          this.animTimer = 0;

          this.animX += 200;

          if (this.animX === 1000) {
            this.animX = 0;
            this.animY += 200;
          }

          if (this.animY === 400) {
            this.animY = 0;
          }
        }
      }
    }

    if (this.distroyTimer < 501) {
      if (this.imageToDraw !== som) {
        this.imageToDraw = som;
      }

      this.gabX = 100;
      this.gabY = 100;
      this.animX = 510;
      this.animY = 150;
      this.tileStepX = 40;
      this.tileStepY = 35;
      this.animKorrektorY = -50;
      this.animKorrektorX = -10;

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }

      ctx.drawImage(
        this.imageToDraw,
        this.animX,
        this.animY,
        this.tileStepX,
        this.tileStepY,
        this.x + removeX + this.animKorrektorX,
        this.y + removeY + this.animKorrektorY,
        this.gabX,
        this.gabY
      );

      ctx.globalAlpha = 1;

      if ((this.hp <= 0 || this.buildready <= 0) && this.distroyTimer >= 436) {
        if (this.distroyTimer <= 500 && this.distroyTimer > 496) {
          this.animX_2 = 0;
        } else if (this.distroyTimer <= 496 && this.distroyTimer > 492) {
          this.animX_2 = 100;
        } else if (this.distroyTimer <= 492 && this.distroyTimer > 488) {
          this.animX_2 = 200;
        } else if (this.distroyTimer <= 488 && this.distroyTimer > 484) {
          this.animX_2 = 300;
        } else if (this.distroyTimer <= 484 && this.distroyTimer > 480) {
          this.animX_2 = 400;
        } else if (this.distroyTimer <= 480 && this.distroyTimer > 476) {
          this.animX_2 = 500;
        } else if (this.distroyTimer <= 476 && this.distroyTimer > 472) {
          this.animX_2 = 600;
        } else if (this.distroyTimer <= 472 && this.distroyTimer > 468) {
          this.animX_2 = 700;
        } else if (this.distroyTimer <= 468 && this.distroyTimer > 464) {
          this.animX_2 = 800;
        } else if (this.distroyTimer <= 464 && this.distroyTimer > 460) {
          this.animX_2 = 900;
        } else if (this.distroyTimer <= 460 && this.distroyTimer > 456) {
          this.animX_2 = 1000;
        } else if (this.distroyTimer <= 456 && this.distroyTimer > 452) {
          this.animX_2 = 1100;
        } else if (this.distroyTimer <= 452 && this.distroyTimer > 448) {
          this.animX_2 = 1200;
        } else if (this.distroyTimer <= 448 && this.distroyTimer > 444) {
          this.animX_2 = 1300;
        } else if (this.distroyTimer <= 444 && this.distroyTimer > 440) {
          this.animX_2 = 1400;
        } else if (this.distroyTimer <= 440 && this.distroyTimer > 436) {
          this.animX_2 = 1500;
        }

        ctx.drawImage(
          vzryv1,
          this.animX_2 + 5,
          this.animY_2,
          96,
          100,
          this.x + removeX - 25,
          this.y + removeY - 115,
          150,
          200
        );

        //console.log(this.distroyTimer);
      }
    }
  }

  /*
	
	if(this.type==="ogreBase"){
	
	for(let i=0;i<this.contaktCells.length;i++){
			
			ctx.fillStyle="black";
			ctx.fillRect(this.contaktCells[i].x+removeX,this.contaktCells[i].y+removeY,50,50);
			
			if(this.contaktCells[i].moveVektor){
				
				//console.log("ok");
				
ctx.textBaseline="top";
ctx.textAlign="left";
ctx.font="9px Areal";	
ctx.fillStyle="red";
ctx.fillText(this.contaktCells[i].moveVektor,this.contaktCells[i].x+removeX,this.contaktCells[i].y+removeY+20);
				
			};
			
			
		};	
	
	if(this.cellToOut){
	//ctx.fillStyle="violet";
//ctx.fillRect(this.cellToOut.x+removeX,this.cellToOut.y+removeY,50,50);
	};
	
	};
//*/
};

Unit.prototype.drawFly = function () {
  ////////////////////////////////	SOUND

  if (sounds_fly.length + sounds_fight.length < 35) {
    if (this.tyuk) {
      let dis = get_distanse_on_lineyka(
        this.cell,
        100,
        gameFielg[centerDrawPoint.cellObj.vertikal][
          centerDrawPoint.cellObj.horizont
        ],
        50
      );

      let volume = (450 - dis) / 450;

      //console.log(volume); pausa=1;
      if (volume < 0) {
        volume = 0;
      }

      select_sound_fight(this.cell.dragoon, "fight", volume);

      this.tyuk = false;
    }

    //if(this.hp<=0){console.log(this.distroyTimer);};

    if (this.hp <= 0 && !this.dead_sound && this.distroyTimer === 29) {
      //

      this.dead_sound = true;

      let dis = get_distanse_on_lineyka(
        this.cell,
        50,
        gameFielg[centerDrawPoint.cellObj.vertikal][
          centerDrawPoint.cellObj.horizont
        ],
        50
      );

      let volume = (450 - dis) / 450;

      //console.log(volume); pausa=1;
      if (volume < 0) {
        volume = 0;
      }

      select_sound_fight(this.cell.dragoon, "dead", volume);
    }
  }
  ///////////////////////////////////////

  this.myDraw = false;

  if (this.moveVektor === "right") {
    // this.imageToDraw=peon;

    this.animX = 200;

    //if(this.gold){this.animX=100;};
  } else if (this.moveVektor === "right_Down") {
    // this.imageToDraw=peon;

    this.animX = 300;

    //if(this.gold){this.animX=140;};
  } else if (this.moveVektor === "down") {
    // this.imageToDraw=peon;

    this.animX = 400;

    //if(this.gold){this.animX=180;};
  } else if (this.moveVektor === "down_Left") {
    // this.imageToDraw=peon2;

    this.animX = 500;

    //if(this.gold){this.animX=75;};
  } else if (this.moveVektor === "left") {
    // this.imageToDraw=peon2;

    this.animX = 600;

    //if(this.gold){this.animX=115;};
  } else if (this.moveVektor === "left_Up") {
    // this.imageToDraw=peon2;

    this.animX = 700;

    // if(this.gold){this.animX=150;};
  } else if (this.moveVektor === "up") {
    // this.imageToDraw=peon;

    this.animX = 0;

    //if(this.gold){this.animX=30;};
  } else if (this.moveVektor === "up_Right") {
    // this.imageToDraw=peon;

    this.animX = 100;

    // if(this.gold){this.animX=65;};
  }
  //////////////////////////////////////////
  if (!this.animDr) {
    this.animDr = 10000;
  }
  this.animDr--;

  if (
    (!this.iFight && !this.iStand && this.animDr % 4 === 0) ||
    (this.iStand && this.animDr % 5 === 0)
  ) {
    this.animY += 100;

    if (this.animY >= 400) {
      this.animY = 0;
    }
  }

  if (this.fatherFraction.nation === "orc") {
    if (this.iFight || this.stopTroll > 170) {
      this.animY = 400;
    }

    if (this.stopTroll === 170) {
      this.animY = 0;
    }
  } else {
    if (this.iDoTakt === 4) {
      this.animY = 400;
    } else if (this.iDoTakt === 5) {
      this.animY = 500;
    }
    if (this.iDoTakt >= 6) {
      this.animY = 600;
    }
  }

  //

  if (this.hp <= 0) {
    this.animY = 500 + this.dopAnim;

    //console.log(this.animY);
  }

  ctx.globalAlpha = 0.5;
  ctx.drawImage(
    dragoon_orc_shadow,
    this.animX,
    this.animY,
    100,
    100,
    this.x + removeX + 4,
    this.y + removeY - 50,
    100,
    100
  );
  ctx.globalAlpha = 1;

  ctx.drawImage(
    this.imageToDraw,
    this.animX,
    this.animY,
    100,
    100,
    this.x + removeX - 17,
    this.y + removeY - 120,
    150,
    150
  );

  if (this.nar) {
    ctx.drawImage(
      nar,
      0,
      0,
      100,
      100,
      this.x + removeX,
      this.y + removeY - 50,
      100,
      100
    );
  }

  /*
	
	ctx.lineWidth=3;
	ctx.strokeStyle="violet";
ctx.strokeRect(this.x+removeX,(this.y+removeY)-50,100,100);
	

ctx.fillStyle="red";
ctx.fillRect(this.damagePointX+removeX,(this.damagePointY+removeY),5,5);	
	
	
ctx.fillStyle="red";
ctx.fillRect(this.cell.x+removeX,(this.cell.y+removeY),50,50);	
	
	
for(let i=0;i<this.way.length;i++){
	
	
	//console.log(this.way[i].x)
	
ctx.fillStyle="red";
ctx.fillRect(this.way[i].x+removeX,(this.way[i].y+removeY),50,50);	
	
};	

		
	//console.log(this.way.length);
//*/

  /*
	ctx.lineWidth=3;
	ctx.strokeStyle="violet";
ctx.strokeRect(this.x+removeX,(this.y+removeY)-50,100,100);



ctx.fillStyle="red";
ctx.fillRect(this.firePoint.x+removeX,(this.firePoint.y+removeY),5,5);
*/
};

DragoonDamage.prototype.drawDragDam = function () {
  if (
    this.x >= centerDrawPoint.cellObj.x - 350 &&
    this.x < centerDrawPoint.cellObj.x + 350 &&
    this.y >= centerDrawPoint.cellObj.y - 350 &&
    this.y < centerDrawPoint.cellObj.y + 350
  ) {
    if (this.timer <= 60) {
      if (this.animX < 0) {
        this.animX = 0;
      }

      if (this.dragoon.fatherFraction.nation === "orc") {
        ctx.drawImage(
          boom,
          this.animX,
          this.animY,
          95,
          100,
          this.x - 50 + removeX,
          this.y - 170 + removeY,
          100,
          200
        );

        ///////////////////////////////////////////////////////	sound
        if (!this.sound && !this.animX && !this.animY) {
          this.sound = true;

          if (sounds_fly.length + sounds_fight.length < 35) {
            let dis; //=get_distanse_on_lineyka(this.target.cell,this.target.gabarit,gameFielg[centerDrawPoint.cellObj.vertikal][centerDrawPoint.cellObj.horizont],50);

            let a =
              this.x -
              gameFielg[centerDrawPoint.cellObj.vertikal][
                centerDrawPoint.cellObj.horizont
              ].x;
            let b =
              this.y -
              gameFielg[centerDrawPoint.cellObj.vertikal][
                centerDrawPoint.cellObj.horizont
              ].y;

            dis = Math.sqrt(a * a + b * b);

            let volume = (450 - dis) / 450;

            //console.log(volume); pausa=1;
            if (volume < 0) {
              volume = 0;
            }

            select_sound_fly(undefined, "boo_drag", volume);
          }
        }
        ////////////////////////////////////////////////////////////
      } else {
        ctx.drawImage(
          gry_boo,
          this.animX,
          this.animY,
          95,
          100,
          this.x - 50 + removeX,
          this.y - 170 + removeY,
          100,
          200
        );
      }

      //ctx.fillStyle="red";
      //ctx.fillRect(this.x+removeX,(this.y+removeY),5,5);

      //pausa=1
    }
  }
};

//hp_up

Unit.prototype.drawUnit = function () {
  this.myDraw = false;

  if (this.hp < 0) {
    this.hp = 0;
  }

  //console.log("draw")

  if (this.sweeme) {
    ////////////////////////////////	SOUND

    if (sounds_fly.length + sounds_fight.length < 35) {
      if (this.tyuk) {
        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "fight", volume);

        this.tyuk = false;
      }

      //if(this.hp<=0){console.log(this.distroyTimer);};

      if (this.hp <= 0 && !this.dead_sound && this.distroyTimer === 29) {
        //

        this.dead_sound = true;

        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "dead", volume);
      }
    }
    ///////////////////////////////////////
  }

  /*
for(let i=0;i<this.way.length;i++){
	
	
	//console.log(this.way[i].x)
	
ctx.fillStyle="red";
ctx.fillRect(this.way[i].x+removeX,(this.way[i].y+removeY),50,50);	
	
};	
*/
  /*
if(this.spedr){
	
ctx.fillStyle="red";
ctx.fillRect(this.x+removeX,(this.y+removeY),50,50);	
};
*/

  if (this.type === "mag") {
    ////////////////////////////////	SOUND

    if (sounds_fly.length + sounds_fight.length < 35) {
      if (this.tyuk_rage) {
        //let dis=get_distanse_on_lineyka(this.cell,50,gameFielg[centerDrawPoint.cellObj.vertikal][centerDrawPoint.cellObj.horizont],50);

        //let volume=(450-dis)/450;

        //console.log(volume); pausa=1;
        //if(volume<0){volume=0;};

        select_sound_fight(this.cell.unit, this.tyuk_rage);

        this.tyuk_rage = false;
      } else if (this.tyuk) {
        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "fight", volume);

        this.tyuk = false;
      }

      //if(this.hp<=0){console.log(this.distroyTimer);};

      if (this.hp <= 0 && !this.dead_sound && this.distroyTimer === 1019) {
        //

        this.dead_sound = true;

        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "dead", volume);
      }
    }
    ///////////////////////////////////////

    if (this.hp > 0) {
      // 75

      //if(!this.iGetMyCell){this.iStand=false;};

      if (!this.iStand) {
        this.moveTimer = 100;
      } else {
        this.moveTimer--;

        /*
if(!this.gold){	
	this.animY=0;
}
else{
	this.animY=0;
};
	//*/
      }

      if (this.iStand && !this.anim_magick_timer) {
        this.animY = 0;
      }

      //console.log(this.gold);

      //this.imageToDraw=peon;

      if (this.animTimer > 0) {
        this.animTimer--;
      }

      if (this.iStand && this.moveTimer <= 0 && !this.iFight) {
        if ((!this.animTimer || !this.moveVektor) && this.hp > 0) {
          this.animTimer = Math.floor(Math.random() * 150) + 30;

          //this.animX=Math.floor(Math.random()*5)*51;
          this.randomMoveVektor = Math.floor(Math.random() * 8);

          if (this.randomMoveVektor === 0) {
            this.moveVektor = "right";
          } else if (this.randomMoveVektor === 1) {
            this.moveVektor = "up_Right";
          } else if (this.randomMoveVektor === 2) {
            this.moveVektor = "right_Down";
          } else if (this.randomMoveVektor === 3) {
            this.moveVektor = "down";
          } else if (this.randomMoveVektor === 4) {
            this.moveVektor = "down_Left";
          } else if (this.randomMoveVektor === 5) {
            this.moveVektor = "left_Up";
          } else if (this.randomMoveVektor === 6) {
            this.moveVektor = "up";
          } else if (this.randomMoveVektor === 7) {
            this.moveVektor = "left";
          }
        }
      }

      //if(!this.moveVektor){console.log("pizda");};

      if (this.moveVektor === "right") {
        // this.imageToDraw=peon;

        this.animX = 200;

        //if(this.gold){this.animX=100;};
      } else if (this.moveVektor === "right_Down") {
        // this.imageToDraw=peon;

        this.animX = 300;

        //if(this.gold){this.animX=140;};
      } else if (this.moveVektor === "down") {
        // this.imageToDraw=peon;

        this.animX = 400;

        //if(this.gold){this.animX=180;};
      } else if (this.moveVektor === "down_Left") {
        // this.imageToDraw=peon2;

        this.animX = 500;

        //if(this.gold){this.animX=75;};
      } else if (this.moveVektor === "left") {
        // this.imageToDraw=peon2;

        this.animX = 600;

        //if(this.gold){this.animX=115;};
      } else if (this.moveVektor === "left_Up") {
        // this.imageToDraw=peon2;

        this.animX = 700;

        // if(this.gold){this.animX=150;};
      } else if (this.moveVektor === "up") {
        // this.imageToDraw=peon;

        this.animX = 0;

        //if(this.gold){this.animX=30;};
      } else if (this.moveVektor === "up_Right") {
        // this.imageToDraw=peon;

        this.animX = 100;

        // if(this.gold){this.animX=65;};
      }
      //////////////////////////////////////////

      if (!this.iFight && this.moveVektor && !this.iStand) {
        if (this.animTimer === 0) {
          this.animTimer = 200;
        }

        if (this.animTimer % 4 === 0) {
          this.animY += 100;
        }

        if (this.animY >= 500 || this.iDraw === 0) {
          this.animY = 100;
        }
      } else if (this.iFight) {
        //console.log("ok");

        this.animY = this.iDoTakt * 100 + 400;

        if (this.animY === 400) {
          this.animY = 0;
        }
      }

      //console.log(this.drawQuatro);

      //if(this.fatherFraction.control==="comp"){

      //console.log(this.animY);

      //};

      //if(this.fatherFraction.control==="player"&&this.way.length){console.log(this.iStand);};
      //if(this.iStand&&this.myJoube!=="i build"){
      //	if(!this.gold){
      //	this.animY=0;
      //	}
      //	else{this.animY=530;};

      //	};

      //if(!this.iStand&&this.gold&&!this.iDraw){this.animY=575;};	//&&&!!!!!!!????????????
      /*	
	if(this.hp<=0){
if(this.distroyTimer<992){	
		this.animY=1100;
}
else if(this.distroyTimer<996){	
		this.animY=1000;
}	
else if(this.distroyTimer<1000){	
		this.animY=900;
}
*/

      //////////////////////////////////////////////////

      /*
if(this.distroyTimer<990){

if(this.distroyTimer>0){
	ctx.globalAlpha=this.distroyTimer/50;
	}
	else{ctx.globalAlpha=0;};

	



ctx.drawImage(this.imageToDraw,this.animX,1300,100,99,this.x+removeX-30,this.y+removeY-35,110,110);


ctx.globalAlpha=1;

if(this.distroyTimer>0){
	ctx.globalAlpha=this.distroyTimer/900;
	}
	else{ctx.globalAlpha=0;};

	



ctx.drawImage(this.imageToDraw,this.animX,1200,100,99,this.x+removeX-30,this.y+removeY-35,110,110);

ctx.globalAlpha=1;

};

/////////////////////////////////////////////////



if(this.distroyTimer>0){
	ctx.globalAlpha=this.distroyTimer/1100;
	}
	else{ctx.globalAlpha=0;};

	};
	
*/

      //if(this.fatherFraction.control==="comp"){console.log(this.distroyTimer/300);};
    }

    //if(this.hp<=0){console.log(this.animY);};

    ctx.drawImage(
      this.imageToDraw,
      this.animX,
      this.animY,
      100,
      99,
      this.x + removeX - 30,
      this.y + removeY - 35,
      110,
      110
    );

    //ctx.globalAlpha=1;

    this.iStand = true;

    this.iDraw = 2;

    if (this.drawQuatro) {
      let bar = (this.hpfull / 80) * this.hp;

      ctx.strokeStyle = "green";
      ctx.strokeRect(this.x + removeX, this.y + removeY, 50, 50);

      if (bar > 70) {
        ctx.fillStyle = "green";
      } else if (bar > 40) {
        ctx.fillStyle = "yellow";
      } else if (bar > 0) {
        ctx.fillStyle = "red";
      }

      ctx.fillRect(
        this.x + removeX,
        this.y + removeY - 8,
        (this.hp * 50) / this.hpfull,
        5
      );
    }

    this.drawQuatro = false;

    /*
if(this.target){
	

ctx.fillStyle="red";
ctx.fillRect(this.target.x+removeX,this.target.y+removeY,50,50);


};
//*/
    //ctx.fillStyle="red";
    //ctx.fillRect(this.hotCell.x+removeX,this.hotCell.y+removeY,50,50);
  } else if (this.type === "turtle") {
    //iDoTakt

    //this.draw_visible=true;

    if (this.fatherFraction.control === "player") {
      this.draw_visible = true;
    }

    if (this.draw_visible) {
      if (this.hp > 0) {
        if (this.moveVektor === "right") {
          this.animX = 200;
        } else if (this.moveVektor === "right_Down") {
          this.animX = 300;
        } else if (this.moveVektor === "down") {
          this.animX = 400;
        } else if (this.moveVektor === "down_Left") {
          this.animX = 500;
        } else if (this.moveVektor === "left") {
          this.animX = 600;
        } else if (this.moveVektor === "left_Up") {
          this.animX = 700;
        } else if (this.moveVektor === "up") {
          this.animX = 0;
        } else if (this.moveVektor === "up_Right") {
          this.animX = 100;
        }
      }

      //*
      if (this.drawGabarit >= 105) {
        //console.log(this.drawGabarit);
        this.drawGabarit = 105;
      } else if (this.drawGabarit <= 95) {
        //console.log(this.drawGabarit);
        this.drawGabarit = 95;
      }
      //*/

      if (this.drawGabarit > 100) {
        this.gabaritVector = 0;
      } else if (this.drawGabarit < 100) {
        this.gabaritVector = 1;
      }

      //this.drawConor+=0.01;

      if (this.conorVektor) {
        this.drawConor += 0.001;
      } else {
        this.drawConor -= 0.001;
      }

      if (this.drawConor >= 0.05) {
        this.conorVektor = 0;
        //console.log(this.drawConor)
      } else if (this.drawConor <= -0.05) {
        this.conorVektor = 1;
        //console.log(this.drawConor)
      }

      if (this.gabaritVector) {
        this.gabaritKoof += 0.002;
      } else {
        this.gabaritKoof -= 0.002;
      }

      this.drawGabarit += this.gabaritKoof;

      if (this.iFight) {
        //thithis.iDoTakt
        if (this.iDoTakt === 1 || this.iDoTakt === 3) {
          this.animY = 100;
        } else if (this.iDoTakt === 2) {
          this.animY = 200;
        } else if (this.iDoTakt === 4) {
          this.animY = 0;
        }
      }

      ctx.save();
      ctx.translate(this.x + 50 + removeX, this.y + removeY);
      ctx.rotate(this.drawConor);

      ctx.drawImage(
        this.imageToDraw,
        this.animX,
        this.animY,
        100,
        100,
        -this.drawGabarit / 2,
        -this.drawGabarit / 2,
        this.drawGabarit,
        this.drawGabarit
      );

      ctx.restore();
    }

    /*
ctx.beginPath();
ctx.arc(this.damagePointX+removeX, this.damagePointY+removeY, this.seeing, 0, 2 * Math.PI, false);
//ctx.fillStyle = 'green';
//ctx.fill();
ctx.lineWidth = 1;
ctx.strokeStyle = '#003300';
ctx.stroke();



            ctx.fillStyle="violet";
			ctx.fillRect(this.damagePointX+removeX,this.damagePointY+removeY,5,5);

*/

    /*	
for(let i=this.vertikal-11;i<=this.vertikal+11;i++){
	for(let k=this.horizont-11;k<=this.horizont+11;k++){
		
		
	if(gameFielg[i]&&gameFielg[i][k])	{
		let dis=get_distanse_on_lineyka(this.cell,100,gameFielg[i][k],50);
		
		
		if(
		dis<=this.seeing
		){
			ctx.strokeStyle="red";
			ctx.strokeRect(gameFielg[i][k].x+removeX,(gameFielg[i][k].y+removeY),5,5);
		};
		
	};
		
		
	};
};

//*/
  } else if (this.type === "linkor") {
    if (this.moveVektor === "right") {
      this.animX = 200;
    } else if (this.moveVektor === "right_Down") {
      this.animX = 300;
    } else if (this.moveVektor === "down") {
      this.animX = 400;
    } else if (this.moveVektor === "down_Left") {
      this.animX = 500;
    } else if (this.moveVektor === "left") {
      this.animX = 600;
    } else if (this.moveVektor === "left_Up") {
      this.animX = 700;
    } else if (this.moveVektor === "up") {
      this.animX = 0;
    } else if (this.moveVektor === "up_Right") {
      this.animX = 100;
    }

    //*
    if (this.drawGabarit >= 105) {
      //console.log(this.drawGabarit);
      this.drawGabarit = 105;
    } else if (this.drawGabarit <= 95) {
      //console.log(this.drawGabarit);
      this.drawGabarit = 95;
    }
    //*/

    if (this.drawGabarit > 100) {
      this.gabaritVector = 0;
    } else if (this.drawGabarit < 100) {
      this.gabaritVector = 1;
    }

    //this.drawConor+=0.01;

    if (this.conorVektor) {
      this.drawConor += 0.001;
    } else {
      this.drawConor -= 0.001;
    }

    if (this.drawConor >= 0.05) {
      this.conorVektor = 0;
      //console.log(this.drawConor)
    } else if (this.drawConor <= -0.05) {
      this.conorVektor = 1;
      //console.log(this.drawConor)
    }

    if (this.gabaritVector) {
      this.gabaritKoof += 0.002;
    } else {
      this.gabaritKoof -= 0.002;
    }

    this.drawGabarit += this.gabaritKoof;

    ctx.save();
    ctx.translate(this.x + 50 + removeX, this.y + removeY);
    ctx.rotate(this.drawConor);

    ctx.drawImage(
      this.imageToDraw,
      this.animX,
      this.animY,
      100,
      100,
      -this.drawGabarit / 2,
      -this.drawGabarit / 2,
      this.drawGabarit,
      this.drawGabarit
    );

    ctx.restore();

    //console.log(this.drawConor)

    //if(this.ii_saveCell){
    //ctx.strokeStyle="red";
    //ctx.strokeRect(this.ii_saveCell.x+removeX,this.ii_saveCell.y+removeY,50,50);
    //};

    /*
ctx.fillStyle="green";
ctx.fillRect(this.damagePointX+removeX,this.damagePointY+removeY,5,5);	


if(this.target){
ctx.fillStyle="red";
ctx.fillRect(this.target.x+removeX,(this.target.y+removeY),50,50);
};
*/

    /*
for(let i=0;i<this.way.length;i++){
	
	
	//console.log(this.way[i].x)
	
ctx.fillStyle="red";
ctx.fillRect(this.way[i].x+removeX,(this.way[i].y+removeY),50,50);	
	
};	
//*/
  } else if (this.type === "distroer") {
    if (this.moveVektor === "right") {
      this.animX = 200;
    } else if (this.moveVektor === "right_Down") {
      this.animX = 300;
    } else if (this.moveVektor === "down") {
      this.animX = 400;
    } else if (this.moveVektor === "down_Left") {
      this.animX = 500;
    } else if (this.moveVektor === "left") {
      this.animX = 600;
    } else if (this.moveVektor === "left_Up") {
      this.animX = 700;
    } else if (this.moveVektor === "up") {
      this.animX = 0;
    } else if (this.moveVektor === "up_Right") {
      this.animX = 100;
    }

    //*
    if (this.drawGabarit >= 105) {
      //console.log(this.drawGabarit);
      this.drawGabarit = 105;
    } else if (this.drawGabarit <= 95) {
      //console.log(this.drawGabarit);
      this.drawGabarit = 95;
    }
    //*/

    if (this.drawGabarit > 100) {
      this.gabaritVector = 0;
    } else if (this.drawGabarit < 100) {
      this.gabaritVector = 1;
    }

    //this.drawConor+=0.01;

    if (this.conorVektor) {
      this.drawConor += 0.001;
    } else {
      this.drawConor -= 0.001;
    }

    if (this.drawConor >= 0.05) {
      this.conorVektor = 0;
      //console.log(this.drawConor)
    } else if (this.drawConor <= -0.05) {
      this.conorVektor = 1;
      //console.log(this.drawConor)
    }

    if (this.gabaritVector) {
      this.gabaritKoof += 0.002;
    } else {
      this.gabaritKoof -= 0.002;
    }

    this.drawGabarit += this.gabaritKoof;

    ctx.save();
    ctx.translate(this.x + 50 + removeX, this.y + removeY);
    ctx.rotate(this.drawConor);

    ctx.drawImage(
      this.imageToDraw,
      this.animX,
      this.animY,
      100,
      100,
      -this.drawGabarit / 2,
      -this.drawGabarit / 2,
      this.drawGabarit,
      this.drawGabarit
    );

    ctx.restore();

    /*	
	ctx.beginPath();
ctx.arc(this.damagePointX+removeX, this.damagePointY+removeY, this.dash, 0, 2 * Math.PI, false);
//ctx.fillStyle = 'green';
//ctx.fill();
ctx.lineWidth = 1;
ctx.strokeStyle = 'red';
ctx.stroke();



            ctx.fillStyle="violet";
			ctx.fillRect(this.damagePointX+removeX,this.damagePointY+removeY,5,5);
	*/

    //console.log(this.drawConor)

    //if(this.ii_saveCell){
    //ctx.strokeStyle="red";
    //ctx.strokeRect(this.ii_saveCell.x+removeX,this.ii_saveCell.y+removeY,50,50);
    //};

    /*
ctx.fillStyle="green";
ctx.fillRect(this.damagePointX+removeX,this.damagePointY+removeY,5,5);	


if(this.target){
ctx.fillStyle="red";
ctx.fillRect(this.target.x+removeX,(this.target.y+removeY),50,50);
};
*/

    /*
for(let i=0;i<this.way.length;i++){
	
	
	//console.log(this.way[i].x)
	
ctx.fillStyle="red";
ctx.fillRect(this.way[i].x+removeX,(this.way[i].y+removeY),50,50);	
	
};	
//*/
  } else if (this.type === "oil_tanker") {
    if (this.moveVektor === "right") {
      this.animX = 200;
    } else if (this.moveVektor === "right_Down") {
      this.animX = 300;
    } else if (this.moveVektor === "down") {
      this.animX = 400;
    } else if (this.moveVektor === "down_Left") {
      this.animX = 500;
    } else if (this.moveVektor === "left") {
      this.animX = 600;
    } else if (this.moveVektor === "left_Up") {
      this.animX = 700;
    } else if (this.moveVektor === "up") {
      this.animX = 0;
    } else if (this.moveVektor === "up_Right") {
      this.animX = 100;
    }

    /*
for(let i=0;i<this.way.length;i++){
	
	
	//console.log(this.way[i].x)
	
ctx.fillStyle="red";
ctx.fillRect(this.way[i].x+removeX,(this.way[i].y+removeY),50,50);	
	
};	
*/

    //*
    if (this.drawGabarit >= 105) {
      //console.log(this.drawGabarit);
      this.drawGabarit = 105;
    } else if (this.drawGabarit <= 95) {
      //console.log(this.drawGabarit);
      this.drawGabarit = 95;
    }
    //*/

    if (this.drawGabarit > 100) {
      this.gabaritVector = 0;
    } else if (this.drawGabarit < 100) {
      this.gabaritVector = 1;
    }

    //this.drawConor+=0.01;

    if (this.conorVektor) {
      this.drawConor += 0.001;
    } else {
      this.drawConor -= 0.001;
    }

    if (this.drawConor >= 0.05) {
      this.conorVektor = 0;
      //console.log(this.drawConor)
    } else if (this.drawConor <= -0.05) {
      this.conorVektor = 1;
      //console.log(this.drawConor)
    }

    if (this.gabaritVector) {
      this.gabaritKoof += 0.002;
    } else {
      this.gabaritKoof -= 0.002;
    }

    this.drawGabarit += this.gabaritKoof;

    let imageToDraw;

    if (this.oil) {
      imageToDraw = this.imageToDraw_2;
    } else {
      imageToDraw = this.imageToDraw;
    }

    ctx.save();
    ctx.translate(this.x + 50 + removeX, this.y + removeY);
    ctx.rotate(this.drawConor);

    ctx.drawImage(
      imageToDraw,
      this.animX,
      this.animY,
      100,
      100,
      -this.drawGabarit / 2,
      -this.drawGabarit / 2,
      this.drawGabarit,
      this.drawGabarit
    );

    ctx.restore();

    //ctx.strokeStyle="red";
    //ctx.strokeRect(this.x+removeX,(this.y+removeY)-50,100,100);
  } else if (this.type === "transport") {
    //ctx.fillStyle="green";
    //ctx.fillRect(this.cell.x+removeX,this.cell.y+removeY,50,50);

    //console.log(this.moveVektor)

    if (this.moveVektor === "right") {
      this.animX = 200;
    } else if (this.moveVektor === "right_Down") {
      this.animX = 300;
    } else if (this.moveVektor === "down") {
      this.animX = 400;
    } else if (this.moveVektor === "down_Left") {
      this.animX = 500;
    } else if (this.moveVektor === "left") {
      this.animX = 600;
    } else if (this.moveVektor === "left_Up") {
      this.animX = 700;
    } else if (this.moveVektor === "up") {
      this.animX = 0;
    } else if (this.moveVektor === "up_Right") {
      this.animX = 100;
    }

    if (
      this.landing &&
      this.landing.passagers_out_cells.length &&
      this.hp > 0
    ) {
      ctx.drawImage(
        parking,
        0,
        0,
        300,
        300,
        this.x + removeX,
        this.y - 50 + removeY,
        100,
        100
      );
    } else {
      //*
      if (this.drawGabarit >= 105) {
        //console.log(this.drawGabarit);
        this.drawGabarit = 105;
      } else if (this.drawGabarit <= 95) {
        //console.log(this.drawGabarit);
        this.drawGabarit = 95;
      }
      //*/

      if (this.drawGabarit > 100) {
        this.gabaritVector = 0;
      } else if (this.drawGabarit < 100) {
        this.gabaritVector = 1;
      }

      //this.drawConor+=0.01;

      if (this.conorVektor) {
        this.drawConor += 0.001;
      } else {
        this.drawConor -= 0.001;
      }

      if (this.drawConor >= 0.05) {
        this.conorVektor = 0;
        //console.log(this.drawConor)
      } else if (this.drawConor <= -0.05) {
        this.conorVektor = 1;
        //console.log(this.drawConor)
      }

      if (this.gabaritVector) {
        this.gabaritKoof += 0.002;
      } else {
        this.gabaritKoof -= 0.002;
      }

      this.drawGabarit += this.gabaritKoof;
    }

    ctx.save();
    ctx.translate(this.x + 50 + removeX, this.y + removeY);
    ctx.rotate(this.drawConor);

    ctx.drawImage(
      this.imageToDraw,
      this.animX,
      this.animY,
      100,
      100,
      -this.drawGabarit / 2,
      -this.drawGabarit / 2,
      this.drawGabarit,
      this.drawGabarit
    );

    ctx.restore();

    /*
for(let i=0;i<this.ii_passagers.length;i++){
	
	ctx.fillStyle="violet"
	ctx.fillRect(this.ii_passagers[i].x+removeX,this.ii_passagers[i].y+removeY,50,50);
	
	
					ctx.textBaseline="top";
ctx.textAlign="left";
ctx.font="25px Areal";	
ctx.fillStyle="black";
	

	
	

ctx.fillText(this.persolalNumber,this.ii_passagers[i].x+removeX,this.ii_passagers[i].y+removeY);
};
//*/

    /*
for(let i=0;i<this.way.length;i++){
	
	ctx.fillStyle="violet"
	ctx.fillRect(this.way[i].x+removeX,this.way[i].y+removeY,50,50);
	
	
					ctx.textBaseline="top";
ctx.textAlign="left";
ctx.font="25px Areal";	
ctx.fillStyle="black";
	

	
	

ctx.fillText(this.persolalNumber,this.way[i].x+removeX,this.way[i].y+removeY);
};
//*/

    /*
if(this.tardetLandCell){
	
		ctx.fillStyle="red"
	ctx.fillRect(this.tardetLandCell.x+removeX,this.tardetLandCell.y+removeY,50,50);
	
};

///*

if(this.tardetLandCell){
	
				ctx.textBaseline="top";
ctx.textAlign="left";
ctx.font="25px Areal";	
ctx.fillStyle="black";
	

	
	

ctx.fillText(this.persolalNumber,this.tardetLandCell+removeX,this.tardetLandCell.y+removeY);

ctx.fillStyle="green";

ctx.fillText(this.persolalNumber,this.x+removeX,this.y+removeY);
};

//*/

    //*/
    /*
if(this.landing){
	
	for(let i=0;i<this.landing.landCells.length;i++){
		
		
			ctx.fillStyle="yellow"
	ctx.fillRect(this.landing.landCells[i].x+removeX,this.landing.landCells[i].y+removeY,50,50);	
		
		
		
					ctx.textBaseline="top";
ctx.textAlign="left";
ctx.font="25px Areal";	
ctx.fillStyle="black";
	

	
	



ctx.fillStyle="green";

ctx.fillText(i,this.landing.landCells[i].x+removeX,this.landing.landCells[i].y+removeY);	
		
		
		
		
		
	};
	
};
//*/
    /*
if(this.spe){
	
		ctx.fillStyle="red"
	ctx.fillRect(this.spe.x+removeX,this.spe.y+removeY,50,50);
	
};



if(this.spe){
	
				ctx.textBaseline="top";
ctx.textAlign="left";
ctx.font="25px Areal";	
ctx.fillStyle="black";
	

	
	

ctx.fillText(this.persolalNumber,this.spe.x+removeX,this.spe.y+removeY);

ctx.fillStyle="green";

ctx.fillText(this.persolalNumber,this.x+removeX,this.y+removeY);
};

//*/

    //console.log(this.drawConor);
    ///*
    //ctx.strokeStyle="red";
    //ctx.strokeRect(this.x+removeX,(this.y-50)+removeY,100,100);

    //ctx.strokeStyle="violet";
    //ctx.strokeRect(this.damagePointX+removeX,this.damagePointY+removeY,5,5);
    //*/
  } else if (this.type === "rizar") {
    ////////////////////////////////	SOUND

    if (sounds_fly.length + sounds_fight.length < 35) {
      if (this.tyuk_rage) {
        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "rage", volume);

        this.tyuk_rage = false;
      } else if (this.tyuk) {
        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "fight", volume);

        this.tyuk = false;
      }

      //if(this.hp<=0){console.log(this.distroyTimer);};

      if (this.hp <= 0 && !this.dead_sound && this.distroyTimer === 1000) {
        this.dead_sound = true;

        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "dead", volume);
      }
    }
    ///////////////////////////////////////

    // 75

    //if(!this.iGetMyCell){this.iStand=false;};

    if (!this.iStand) {
      this.moveTimer = 100;
    } else {
      this.moveTimer--;

      /*
if(!this.gold){	
	this.animY=0;
}
else{
	this.animY=0;
};
	//*/
    }

    if (this.iStand) {
      this.animY = 0;
    }

    //console.log(this.gold);

    //this.imageToDraw=peon;

    if (this.animTimer > 0) {
      this.animTimer--;
    }

    if (this.iStand && this.moveTimer <= 0 && !this.iFight) {
      if ((!this.animTimer || !this.moveVektor) && this.hp > 0) {
        this.animTimer = Math.floor(Math.random() * 150) + 30;

        //this.animX=Math.floor(Math.random()*5)*51;
        this.randomMoveVektor = Math.floor(Math.random() * 8);

        if (this.randomMoveVektor === 0) {
          this.moveVektor = "right";
        } else if (this.randomMoveVektor === 1) {
          this.moveVektor = "up_Right";
        } else if (this.randomMoveVektor === 2) {
          this.moveVektor = "right_Down";
        } else if (this.randomMoveVektor === 3) {
          this.moveVektor = "down";
        } else if (this.randomMoveVektor === 4) {
          this.moveVektor = "down_Left";
        } else if (this.randomMoveVektor === 5) {
          this.moveVektor = "left_Up";
        } else if (this.randomMoveVektor === 6) {
          this.moveVektor = "up";
        } else if (this.randomMoveVektor === 7) {
          this.moveVektor = "left";
        }
      }
    }

    //if(!this.moveVektor){console.log("pizda");};

    if (this.moveVektor === "right") {
      // this.imageToDraw=peon;

      this.animX = 200;

      //if(this.gold){this.animX=100;};
    } else if (this.moveVektor === "right_Down") {
      // this.imageToDraw=peon;

      this.animX = 300;

      //if(this.gold){this.animX=140;};
    } else if (this.moveVektor === "down") {
      // this.imageToDraw=peon;

      this.animX = 400;

      //if(this.gold){this.animX=180;};
    } else if (this.moveVektor === "down_Left") {
      // this.imageToDraw=peon2;

      this.animX = 500;

      //if(this.gold){this.animX=75;};
    } else if (this.moveVektor === "left") {
      // this.imageToDraw=peon2;

      this.animX = 600;

      //if(this.gold){this.animX=115;};
    } else if (this.moveVektor === "left_Up") {
      // this.imageToDraw=peon2;

      this.animX = 700;

      // if(this.gold){this.animX=150;};
    } else if (this.moveVektor === "up") {
      // this.imageToDraw=peon;

      this.animX = 0;

      //if(this.gold){this.animX=30;};
    } else if (this.moveVektor === "up_Right") {
      // this.imageToDraw=peon;

      this.animX = 100;

      // if(this.gold){this.animX=65;};
    }
    //////////////////////////////////////////

    if (!this.iFight && this.moveVektor && !this.iStand) {
      if (this.animTimer === 0) {
        this.animTimer = 200;
      }

      if (this.animTimer % 2 === 0) {
        this.animY += 100;
      }

      if (this.animY >= 500 || this.iDraw === 0) {
        this.animY = 100;
      }
    } else if (this.iFight) {
      //console.log("ok");

      this.animY = this.iDoTakt * 100 + 400;

      if (this.animY === 400) {
        this.animY = 0;
      }
    }

    //console.log(this.drawQuatro);

    //if(this.fatherFraction.control==="comp"){

    //console.log(this.animY);

    //};

    //if(this.fatherFraction.control==="player"&&this.way.length){console.log(this.iStand);};
    //if(this.iStand&&this.myJoube!=="i build"){
    //	if(!this.gold){
    //	this.animY=0;
    //	}
    //	else{this.animY=530;};

    //	};

    //if(!this.iStand&&this.gold&&!this.iDraw){this.animY=575;};	//&&&!!!!!!!????????????

    if (this.hp <= 0) {
      if (this.distroyTimer < 992) {
        this.animY = 1100;
      } else if (this.distroyTimer < 996) {
        this.animY = 1000;
      } else if (this.distroyTimer < 1000) {
        this.animY = 900;
      }

      //////////////////////////////////////////////////
      if (this.distroyTimer < 990) {
        if (this.distroyTimer > 0) {
          ctx.globalAlpha = this.distroyTimer / 50;
        } else {
          ctx.globalAlpha = 0;
        }

        ctx.drawImage(
          this.imageToDraw,
          this.animX,
          1300,
          100,
          99,
          this.x + removeX - 30,
          this.y + removeY - 35,
          110,
          110
        );

        ctx.globalAlpha = 1;

        if (this.distroyTimer > 0) {
          ctx.globalAlpha = this.distroyTimer / 900;
        } else {
          ctx.globalAlpha = 0;
        }

        ctx.drawImage(
          this.imageToDraw,
          this.animX,
          1200,
          100,
          99,
          this.x + removeX - 30,
          this.y + removeY - 35,
          110,
          110
        );

        ctx.globalAlpha = 1;
      }

      /////////////////////////////////////////////////

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 1100;
      } else {
        ctx.globalAlpha = 0;
      }
    }

    //if(this.fatherFraction.control==="comp"){console.log(this.distroyTimer/300);};

    ctx.drawImage(
      this.imageToDraw,
      this.animX,
      this.animY,
      100,
      99,
      this.x + removeX - 30,
      this.y + removeY - 35,
      110,
      110
    );

    ctx.globalAlpha = 1;

    this.iStand = true;

    this.iDraw = 2;

    if (this.drawQuatro) {
      let bar = (this.hpfull / 80) * this.hp;

      ctx.strokeStyle = "green";
      ctx.strokeRect(this.x + removeX, this.y + removeY, 50, 50);

      if (bar > 70) {
        ctx.fillStyle = "green";
      } else if (bar > 40) {
        ctx.fillStyle = "yellow";
      } else if (bar > 0) {
        ctx.fillStyle = "red";
      }

      ctx.fillRect(
        this.x + removeX,
        this.y + removeY - 8,
        (this.hp * 50) / this.hpfull,
        5
      );
    }

    this.drawQuatro = false;

    /*
if(this.target){
	

ctx.fillStyle="red";
ctx.fillRect(this.target.x+removeX,this.target.y+removeY,50,50);


};
//*/
    //ctx.fillStyle="red";
    //ctx.fillRect(this.hotCell.x+removeX,this.hotCell.y+removeY,50,50);
  } else if (this.type === "ballista") {
    ////////////////////////////////	SOUND

    if (sounds_fly.length + sounds_fight.length < 35) {
      if (this.tyuk) {
        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "fight", volume);

        this.tyuk = false;
      }

      //if(this.hp<=0){console.log(this.distroyTimer);};

      if (this.hp <= 0 && !this.dead_sound && this.distroyTimer === 1000) {
        this.dead_sound = true;

        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "dead", volume);
      }
    }
    ///////////////////////////////////////

    if (this.drawQuatro) {
      let bar = (100 * this.hp) / this.hpfull; //(this.hpfull/100)*this.hp;

      //console.log(this.hpfull/100)
      //ctx.strokeStyle="green";
      //ctx.strokeRect(this.x+removeX,this.y+removeY,50,50);
      ctx.globalAlpha = 0.3;

      ctx.drawImage(
        vydel,
        this.q_animX,
        this.q_animY,
        100,
        100,
        this.x + removeX - 25,
        this.y + removeY - 20,
        100,
        100
      );

      ctx.globalAlpha = 1;

      this.q_timer++;

      if (this.q_timer === 3) {
        this.q_timer = 0;
        this.q_animX += 100;
      }

      if (this.q_animX === 1500) {
        this.q_animX = 0;
      }
      //if(this.q_animY===300){this.q_animY=0;};

      if (bar > 70) {
        ctx.fillStyle = "green";
      } else if (bar > 40) {
        ctx.fillStyle = "yellow";
      } else if (bar > 0) {
        ctx.fillStyle = "red";
      }

      ctx.fillRect(
        this.x + removeX + 2.5,
        this.y + removeY - 30,
        (this.hp * 45) / this.hpfull,
        5
      );
    }

    this.drawQuatro = false;

    if (this.moveVektor === "right") {
      // this.imageToDraw=peon;

      this.animX = 200;

      //if(this.gold){this.animX=100;};
    } else if (this.moveVektor === "right_Down") {
      // this.imageToDraw=peon;

      this.animX = 300;

      //if(this.gold){this.animX=140;};
    } else if (this.moveVektor === "down") {
      // this.imageToDraw=peon;

      this.animX = 400;

      //if(this.gold){this.animX=180;};
    } else if (this.moveVektor === "down_Left") {
      // this.imageToDraw=peon2;

      this.animX = 500;

      //if(this.gold){this.animX=75;};
    } else if (this.moveVektor === "left") {
      // this.imageToDraw=peon2;

      this.animX = 600;

      //if(this.gold){this.animX=115;};
    } else if (this.moveVektor === "left_Up") {
      // this.imageToDraw=peon2;

      this.animX = 700;

      // if(this.gold){this.animX=150;};
    } else if (this.moveVektor === "up") {
      // this.imageToDraw=peon;

      this.animX = 0;

      //if(this.gold){this.animX=30;};
    } else if (this.moveVektor === "up_Right") {
      // this.imageToDraw=peon;

      this.animX = 100;

      // if(this.gold){this.animX=65;};
    }
    //////////////////////////////////////////

    if (this.animTimer) {
      this.animTimer--;
    }

    if (this.animTimer === 0) {
      this.animTimer = 20000;
    }

    if (!this.iFight && this.moveVektor && !this.iStand) {
      //console.log(this.iStand);

      if (this.animTimer % 3 === 0) {
        this.animY += 100;
      }

      if (
        this.animY >= 200
        //||this.iDraw===0
      ) {
        this.animY = 0;
      }
    } else if (this.iFight) {
      // console.log(this.iDoTakt);
      // pausa=1;

      // this.animY=this.iDoTakt*100+100;

      //if(this.animY===400){this.animY=300;};

      if (this.iDoTakt === 3) {
        this.animY = 300;
      }
      if (this.iDoTakt === 4) {
        this.animY = 200;
      }

      //console.log(this.animY)
    }

    if (this.hp > 0) {
      if (this.stopTroll) {
        this.animY = 300;
      }

      ctx.drawImage(
        this.imageToDraw,
        this.animX,
        this.animY,
        100,
        100,
        this.x + removeX - 8,
        this.y + removeY - 13,
        70,
        70
      );
    } else {
      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }

      ctx.drawImage(
        ballista_orc_hlam,
        0,
        0,
        100,
        100,
        this.x + removeX - 10,
        this.y + removeY - 8,
        70,
        70
      );

      ctx.globalAlpha = 1;

      // console.log(this.distroyTimer)
      //pausa=1

      if (this.distroyTimer === 501) {
        ctx.drawImage(
          b_oo,
          0,
          0,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 500) {
        ctx.drawImage(
          b_oo,
          100,
          0,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 499) {
        ctx.drawImage(
          b_oo,
          200,
          0,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 498) {
        ctx.drawImage(
          b_oo,
          300,
          0,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 497) {
        ctx.drawImage(
          b_oo,
          0,
          100,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 496) {
        ctx.drawImage(
          b_oo,
          100,
          100,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 495) {
        ctx.drawImage(
          b_oo,
          200,
          100,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 494) {
        ctx.drawImage(
          b_oo,
          300,
          100,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 493) {
        ctx.drawImage(
          b_oo,
          0,
          200,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 492) {
        ctx.drawImage(
          b_oo,
          100,
          200,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 491) {
        ctx.drawImage(
          b_oo,
          200,
          200,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 490) {
        ctx.drawImage(
          b_oo,
          300,
          200,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 489) {
        ctx.drawImage(
          b_oo,
          0,
          300,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 488) {
        ctx.drawImage(
          b_oo,
          100,
          300,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 487) {
        ctx.drawImage(
          b_oo,
          200,
          300,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      } else if (this.distroyTimer === 486) {
        ctx.drawImage(
          b_oo,
          300,
          300,
          100,
          100,
          this.x + removeX - 15,
          this.y + removeY - 15,
          80,
          80
        );
      }

      //ctx.fillStyle="blue";
      //ctx.fillRect(this.x+25+removeX,this.y+25+removeY,5,5);
    }

    if (this.iFight && this.iDoTakt < 3) {
      this.animY = 0;
    }

    //console.log("ok");
    //ctx.strokeStyle="red";
    //ctx.strokeRect(this.x+removeX,this.y+removeY,50,50);

    this.iStand = true;

    if (this.firePoint) {
      //ctx.fillStyle="blue";
      //ctx.fillRect(this.firePoint.x+removeX,this.firePoint.y+removeY,5,5);
    }
  } else if (this.type === "boo") {
    ctx.globalAlpha = this.alpf;

    ctx.drawImage(
      boo,
      0,
      0,
      100,
      100,
      this.x + removeX - 20,
      this.y + removeY - 5,
      50,
      50
    );

    ctx.globalAlpha = 1;
    //console.log("ok");
  } else if (this.type === 3) {
    //luchnik

    // 75

    ////////////////////////////////	SOUND

    if (sounds_fly.length + sounds_fight.length < 35) {
      if (this.tyuk) {
        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        // pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "fight", volume);

        this.tyuk = false;
      }

      if (this.hp <= 0 && !this.dead_sound && this.distroyTimer === 500) {
        this.dead_sound = true;

        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "dead", volume);
      }
    }
    ///////////////////////////////////////

    if (!this.iStand) {
      this.moveTimer = 100;
    } else {
      this.moveTimer--;
      ///*
      if (!this.gold) {
        this.animY = 0;
      } else {
        this.animY = 0;
      }
      //*/
    }

    //console.log(this.gold);

    //this.imageToDraw=peon;

    if (this.animTimer > 0) {
      this.animTimer--;
    }

    if (
      this.iStand &&
      this.moveTimer <= 0 &&
      !this.iFight &&
      !this.iGetTarget
    ) {
      if ((!this.animTimer || !this.moveVektor) && this.hp > 0) {
        this.animTimer = Math.floor(Math.random() * 150) + 30;

        //this.animX=Math.floor(Math.random()*5)*51;
        this.randomMoveVektor = Math.floor(Math.random() * 8);

        if (this.randomMoveVektor === 0) {
          this.moveVektor = "right";
        } else if (this.randomMoveVektor === 1) {
          this.moveVektor = "up_Right";
        } else if (this.randomMoveVektor === 2) {
          this.moveVektor = "right_Down";
        } else if (this.randomMoveVektor === 3) {
          this.moveVektor = "down";
        } else if (this.randomMoveVektor === 4) {
          this.moveVektor = "down_Left";
        } else if (this.randomMoveVektor === 5) {
          this.moveVektor = "left_Up";
        } else if (this.randomMoveVektor === 6) {
          this.moveVektor = "up";
        } else if (this.randomMoveVektor === 7) {
          this.moveVektor = "left";
        }
      }
    }

    //if(!this.moveVektor){console.log("pizda");};

    if (this.moveVektor === "right") {
      // this.imageToDraw=peon;

      this.animX = 200;

      //if(this.gold){this.animX=100;};
    } else if (this.moveVektor === "right_Down") {
      // this.imageToDraw=peon;

      this.animX = 300;

      //if(this.gold){this.animX=140;};
    } else if (this.moveVektor === "down") {
      // this.imageToDraw=peon;

      this.animX = 400;

      //if(this.gold){this.animX=180;};
    } else if (this.moveVektor === "down_Left") {
      // this.imageToDraw=peon2;

      this.animX = 500;

      //if(this.gold){this.animX=75;};
    } else if (this.moveVektor === "left") {
      // this.imageToDraw=peon2;

      this.animX = 600;

      //if(this.gold){this.animX=115;};
    } else if (this.moveVektor === "left_Up") {
      // this.imageToDraw=peon2;

      this.animX = 700;

      // if(this.gold){this.animX=150;};
    } else if (this.moveVektor === "up") {
      // this.imageToDraw=peon;

      this.animX = 0;

      //if(this.gold){this.animX=30;};
    } else if (this.moveVektor === "up_Right") {
      // this.imageToDraw=peon;

      this.animX = 100;

      // if(this.gold){this.animX=65;};
    }
    //////////////////////////////////////////

    if (!this.iFight && this.moveVektor && !this.iStand) {
      if (this.animTimer === 0) {
        this.animTimer = 200;
      }

      if (this.animTimer % 3 === 0) {
        this.animY += 100;
      }

      if (this.animY >= 500 || this.iDraw === 0) {
        this.animY = 100;
      }
    } else if (this.iFight) {
      //console.log("ok");

      this.animY = this.iDoTakt * 100 + 400;

      if (this.animY === 400) {
        this.animY = 0;
      }
    }

    //console.log(this.drawQuatro);

    //if(this.fatherFraction.control==="comp"){

    //console.log(this.animY);

    //};

    //if(this.fatherFraction.control==="player"&&this.way.length){console.log(this.iStand);};
    //if(this.iStand&&this.myJoube!=="i build"){
    //	if(!this.gold){
    //	this.animY=0;
    //	}
    //	else{this.animY=530;};

    //	};

    //if(!this.iStand&&this.gold&&!this.iDraw){this.animY=575;};	//&&&!!!!!!!????????????

    if (this.hp <= 0) {
      if (this.distroyTimer < 492) {
        this.animY = 1100;
      } else if (this.distroyTimer < 496) {
        this.animY = 1000;
      } else if (this.distroyTimer < 500) {
        this.animY = 900;
      }

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }
    }

    if (this.drawQuatro) {
      let bar = (this.hpfull / 80) * this.hp;

      //ctx.strokeStyle="green";
      //ctx.strokeRect(this.x+removeX,this.y+removeY,50,50);
      ctx.globalAlpha = 0.3;

      ctx.drawImage(
        vydel,
        this.q_animX,
        this.q_animY,
        100,
        100,
        this.x + removeX - 25,
        this.y + removeY - 20,
        100,
        100
      );

      ctx.globalAlpha = 1;

      this.q_timer++;

      if (this.q_timer === 3) {
        this.q_timer = 0;
        this.q_animX += 100;
      }

      if (this.q_animX === 1500) {
        this.q_animX = 0;
      }
      //if(this.q_animY===300){this.q_animY=0;};

      if (bar > 70) {
        ctx.fillStyle = "green";
      } else if (bar > 40) {
        ctx.fillStyle = "yellow";
      } else if (bar > 0) {
        ctx.fillStyle = "red";
      }

      ctx.fillRect(
        this.x + removeX + 2.5,
        this.y + removeY - 30,
        (this.hp * 45) / this.hpfull,
        5
      );
    }

    this.drawQuatro = false;

    ctx.drawImage(
      this.imageToDraw,
      this.animX,
      this.animY,
      100,
      99,
      this.x + removeX - 30,
      this.y + removeY - 35,
      110,
      110
    );

    ctx.globalAlpha = 1;

    this.iStand = true;

    this.iDraw = 2;

    //ctx.fillStyle="violet";
    //ctx.fillRect(this.damagePointX+removeX,this.damagePointY+removeY,5,5);
    //console.log("is mi");pausa=1;
    //if(this.fatherFraction.control==="player"){console.log(this.cell.horizont)};

    /*

for(let i=this.cell.vertikal-10;i<=this.cell.vertikal+10;i++){
	for(let k=this.cell.horizont-10;k<=this.cell.horizont+10;k++){
		
	//ctx.fillStyle="red";
//ctx.fillRect((gameFielg[i][k].x+25)+removeX,(gameFielg[i][k].y+25)+removeY,5,5);	

if(gameFielg[i]&&gameFielg[i][k]){

		ctx.textAlign="left";
ctx.font="10px Areal";	
ctx.fillStyle="red";
	
let a=(this.cell.x+25)-(gameFielg[i][k].x+50);
let b=(this.cell.y+25)-(gameFielg[i][k].y);
	
	let c=Math.sqrt(a*a+b*b);
	
	

	
	

ctx.fillText(Math.floor(get_distanse_on_lineyka(this.cell,50,gameFielg[i][k],100)),(gameFielg[i][k].x+25)+removeX,(gameFielg[i][k].y+25)+removeY);

			ctx.textAlign="left";
ctx.font="10px Areal";	
ctx.fillStyle="violet";

ctx.fillText(Math.floor(c),((gameFielg[i][k].x+25)+removeX)-20,(gameFielg[i][k].y+25)+removeY);
};
//console.log((gameFielg[i][k].x+25)+removeX)
	
	//break
	
	};
};
	
*/

    /*
if(this.target){
	
if(this.iGetTarget){
ctx.fillStyle="red";
}
else{
ctx.fillStyle="blue";	
	
};


ctx.fillRect(this.target.x+removeX,this.target.y+removeY,50,50);


};
//*/
    //ctx.fillStyle="red";
    //ctx.fillRect(this.hotCell.x+removeX,this.hotCell.y+removeY,50,50);
  } else if (this.type === 1) {
    //peon

    if (this.fatherFraction.nation === "orc") {
      if (this.fatherFraction.fraction === "redOrcs") {
        if (!this.gold && !this.wood && this.imageToDraw !== peon_new) {
          this.imageToDraw = peon_new;
        } else if (this.gold && this.imageToDraw !== peon_with_gold) {
          this.imageToDraw = peon_with_gold;
        } else if (this.wood && this.imageToDraw !== peon_with_wood) {
          this.imageToDraw = peon_with_wood;
        }
      } else if (this.fatherFraction.fraction === "blackOrcs") {
        if (!this.gold && !this.wood && this.imageToDraw !== peon_new_black) {
          this.imageToDraw = peon_new_black;
        } else if (this.gold && this.imageToDraw !== peon_with_gold_black) {
          this.imageToDraw = peon_with_gold_black;
        } else if (this.wood && this.imageToDraw !== peon_with_wood_black) {
          this.imageToDraw = peon_with_wood_black;
        }
      } else if (this.fatherFraction.fraction === "lazurOrcs") {
        if (!this.gold && !this.wood && this.imageToDraw !== peon_new_lazur) {
          this.imageToDraw = peon_new_lazur;
        } else if (this.gold && this.imageToDraw !== peon_with_gold_lazur) {
          this.imageToDraw = peon_with_gold_lazur;
        } else if (this.wood && this.imageToDraw !== peon_with_wood_lazur) {
          this.imageToDraw = peon_with_wood_lazur;
        }
      }
    } else {
      if (this.fatherFraction.fraction === "h_blue") {
        if (!this.gold && !this.wood && this.imageToDraw !== peon_new_lazur) {
          this.imageToDraw = peon_h_blue;
        } else if (this.gold && this.imageToDraw !== peon_with_gold_lazur) {
          this.imageToDraw = peon_gold_h_blue;
        } else if (this.wood && this.imageToDraw !== peon_with_wood_lazur) {
          this.imageToDraw = peon_wood_h_blue;
        }
      }
    }

    //if(!this.imageToDraw){console.log(this.fatherFraction.fraction)}

    ////////////////////////////////	SOUND

    if (sounds_fly.length + sounds_fight.length < 35) {
      if (this.tyuk) {
        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "tree_sound", volume);

        this.tyuk = false;
      }

      if (this.hp <= 0 && !this.dead_sound && this.distroyTimer === 500) {
        this.dead_sound = true;

        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "dead", volume);
      }
    }
    ///////////////////////////////////////

    // 75
    //console.log(this.animY+" up");
    let iBuildWithGold = 0;
    let iStandWithGold = 0;

    if (this.gold && this.myJoube === "i build") {
      this.gold = 0;
      iBuildWithGold = 1;
    }

    if (!this.iStand) {
      this.moveTimer = 100;
    } else {
      this.moveTimer--;
      ///*
      if (!this.gold) {
        this.animY = 0;
      } else {
        this.animY = 0;
      }
      //*/
    }

    //console.log(this.gold);

    //this.imageToDraw=peon;

    if (this.animTimer > 0) {
      this.animTimer--;
    }

    if (this.iStand && this.moveTimer <= 0 && this.myJoube !== "i build") {
      if ((!this.animTimer || !this.moveVektor) && this.hp > 0) {
        this.animTimer = Math.floor(Math.random() * 150) + 30;

        //this.animX=Math.floor(Math.random()*5)*51;
        this.randomMoveVektor = Math.floor(Math.random() * 8);

        if (this.randomMoveVektor === 0) {
          this.moveVektor = "right";
        } else if (this.randomMoveVektor === 1) {
          this.moveVektor = "up_Right";
        } else if (this.randomMoveVektor === 2) {
          this.moveVektor = "right_Down";
        } else if (this.randomMoveVektor === 3) {
          this.moveVektor = "down";
        } else if (this.randomMoveVektor === 4) {
          this.moveVektor = "down_Left";
        } else if (this.randomMoveVektor === 5) {
          this.moveVektor = "left_Up";
        } else if (this.randomMoveVektor === 6) {
          this.moveVektor = "up";
        } else if (this.randomMoveVektor === 7) {
          this.moveVektor = "left";
        }
      }
    }

    //if(!this.moveVektor){console.log("pizda");};

    if (this.moveVektor === "right") {
      // this.imageToDraw=peon;

      this.animX = 200;

      //if(this.gold){this.animX=100;};
    } else if (this.moveVektor === "right_Down") {
      // this.imageToDraw=peon;

      this.animX = 300;

      //if(this.gold){this.animX=140;};
    } else if (this.moveVektor === "down") {
      // this.imageToDraw=peon;

      this.animX = 400;

      //if(this.gold){this.animX=180;};
    } else if (this.moveVektor === "down_Left") {
      // this.imageToDraw=peon2;

      this.animX = 500;

      //if(this.gold){this.animX=75;};
    } else if (this.moveVektor === "left") {
      // this.imageToDraw=peon2;

      this.animX = 600;

      //if(this.gold){this.animX=115;};
    } else if (this.moveVektor === "left_Up") {
      // this.imageToDraw=peon2;

      this.animX = 700;

      // if(this.gold){this.animX=150;};
    } else if (this.moveVektor === "up") {
      // this.imageToDraw=peon;

      this.animX = 0;

      //if(this.gold){this.animX=30;};
    } else if (this.moveVektor === "up_Right") {
      // this.imageToDraw=peon;

      this.animX = 100;

      // if(this.gold){this.animX=65;};
    }
    //////////////////////////////////////////

    if (this.myJoube !== "i build" && this.moveVektor && !this.iStand) {
      if (this.animTimer === 0) {
        this.animTimer = 200;
      }

      if (this.animTimer % 4 === 0) {
        this.animY += 100;
      }

      if (this.animY >= 500 || this.iDraw === 0) {
        this.animY = 100;
      }
    } else if (this.myJoube === "i build") {
      //console.log("ok");

      this.animY = this.iDoTakt * 100 + 500;
    }

    //console.log(this.drawQuatro);

    //if(this.fatherFraction.control==="comp"){

    //console.log(this.animY);

    //};

    //if(this.fatherFraction.control==="player"&&this.way.length){console.log(this.iStand);};
    //if(this.iStand&&this.myJoube!=="i build"){
    //	if(!this.gold){
    //	this.animY=0;
    //	}
    //	else{this.animY=530;};

    //	};

    //if(!this.iStand&&this.gold&&!this.iDraw){this.animY=575;};	//&&&!!!!!!!????????????

    if (this.hp <= 0) {
      if (this.distroyTimer < 492) {
        this.animY = 1200;
      } else if (this.distroyTimer < 496) {
        this.animY = 1100;
      } else if (this.distroyTimer < 500) {
        this.animY = 1000;
      }

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }
    }

    ctx.drawImage(
      this.imageToDraw,
      this.animX,
      this.animY,
      100,
      100,
      this.x + removeX - 30,
      this.y + removeY - 35,
      110,
      110
    );

    ctx.globalAlpha = 1;

    this.iStand = true;

    if (iBuildWithGold) {
      this.gold = 100;
    }

    this.iDraw = 2;

    if (this.drawQuatro) {
      let bar = (100 / 80) * this.hp;

      ctx.strokeStyle = "green";
      ctx.strokeRect(this.x + removeX, this.y + removeY, 50, 50);
    }

    this.drawQuatro = false;

    /*

	
for(let i=0;i<this.contaktCells.length;i++){	
ctx.fillStyle="red";
ctx.fillRect(this.contaktCells[i].x+removeX,this.contaktCells[i].y+removeY,50,50);


};
//*/
    //ctx.fillStyle="black";
    //ctx.fillRect(this.cell.x+removeX,this.cell.y+removeY,50,50);

    //ctx.fillStyle="red";
    //ctx.fillRect(this.hotCell.x+removeX,this.hotCell.y+removeY,50,50);
  } else if (this.type === 2) {
    //mechnick

    ////////////////////////////////	SOUND

    if (sounds_fight.length < 35) {
      if (this.tyuk) {
        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        // pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "fight", volume);

        this.tyuk = false;
      }

      if (this.hp <= 0 && !this.dead_sound && this.distroyTimer === 500) {
        this.dead_sound = true;

        let dis = get_distanse_on_lineyka(
          this.cell,
          50,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fight(this.cell.unit, "dead", volume);
      }
    }
    ///////////////////////////////////////

    // 75

    if (!this.iStand) {
      this.moveTimer = 100;
    } else {
      this.moveTimer--;
      ///*
      if (!this.gold) {
        this.animY = 0;
      } else {
        this.animY = 0;
      }
      //*/
    }

    //console.log(this.gold);

    //this.imageToDraw=peon;

    if (this.animTimer > 0) {
      this.animTimer--;
    }

    if (this.iStand && this.moveTimer <= 0 && !this.iFight) {
      if ((!this.animTimer || !this.moveVektor) && this.hp > 0) {
        this.animTimer = Math.floor(Math.random() * 150) + 30;

        //this.animX=Math.floor(Math.random()*5)*51;
        this.randomMoveVektor = Math.floor(Math.random() * 8);

        if (this.randomMoveVektor === 0) {
          this.moveVektor = "right";
        } else if (this.randomMoveVektor === 1) {
          this.moveVektor = "up_Right";
        } else if (this.randomMoveVektor === 2) {
          this.moveVektor = "right_Down";
        } else if (this.randomMoveVektor === 3) {
          this.moveVektor = "down";
        } else if (this.randomMoveVektor === 4) {
          this.moveVektor = "down_Left";
        } else if (this.randomMoveVektor === 5) {
          this.moveVektor = "left_Up";
        } else if (this.randomMoveVektor === 6) {
          this.moveVektor = "up";
        } else if (this.randomMoveVektor === 7) {
          this.moveVektor = "left";
        }
      }
    }

    //if(!this.moveVektor){console.log("pizda");};

    if (this.moveVektor === "right") {
      // this.imageToDraw=peon;

      this.animX = 200;

      //if(this.gold){this.animX=100;};
    } else if (this.moveVektor === "right_Down") {
      // this.imageToDraw=peon;

      this.animX = 300;

      //if(this.gold){this.animX=140;};
    } else if (this.moveVektor === "down") {
      // this.imageToDraw=peon;

      this.animX = 400;

      //if(this.gold){this.animX=180;};
    } else if (this.moveVektor === "down_Left") {
      // this.imageToDraw=peon2;

      this.animX = 500;

      //if(this.gold){this.animX=75;};
    } else if (this.moveVektor === "left") {
      // this.imageToDraw=peon2;

      this.animX = 600;

      //if(this.gold){this.animX=115;};
    } else if (this.moveVektor === "left_Up") {
      // this.imageToDraw=peon2;

      this.animX = 700;

      // if(this.gold){this.animX=150;};
    } else if (this.moveVektor === "up") {
      // this.imageToDraw=peon;

      this.animX = 0;

      //if(this.gold){this.animX=30;};
    } else if (this.moveVektor === "up_Right") {
      // this.imageToDraw=peon;

      this.animX = 100;

      // if(this.gold){this.animX=65;};
    }
    //////////////////////////////////////////

    if (!this.iFight && this.moveVektor && !this.iStand) {
      if (this.animTimer === 0) {
        this.animTimer = 200;
      }

      if (this.animTimer % 3 === 0) {
        this.animY += 100;
      }

      if (this.animY >= 500 || this.iDraw === 0) {
        this.animY = 100;
      }
    } else if (this.iFight) {
      //console.log("ok");

      this.animY = this.iDoTakt * 100 + 400;

      if (this.animY === 400) {
        this.animY = 0;
      }
    }

    //console.log(this.drawQuatro);

    //if(this.fatherFraction.control==="comp"){

    //console.log(this.animY);

    //};

    //if(this.fatherFraction.control==="player"&&this.way.length){console.log(this.iStand);};
    //if(this.iStand&&this.myJoube!=="i build"){
    //	if(!this.gold){
    //	this.animY=0;
    //	}
    //	else{this.animY=530;};

    //	};

    //if(!this.iStand&&this.gold&&!this.iDraw){this.animY=575;};	//&&&!!!!!!!????????????

    if (this.hp <= 0) {
      if (this.distroyTimer < 492) {
        this.animY = 1100;
      } else if (this.distroyTimer < 496) {
        this.animY = 1000;
      } else if (this.distroyTimer < 500) {
        this.animY = 900;
      }

      if (this.distroyTimer > 0) {
        ctx.globalAlpha = this.distroyTimer / 100;
      } else {
        ctx.globalAlpha = 0;
      }
    }

    ctx.drawImage(
      this.imageToDraw,
      this.animX,
      this.animY,
      100,
      99,
      this.x + removeX - 30,
      this.y + removeY - 35,
      110,
      110
    );

    ctx.globalAlpha = 1;

    this.iStand = true;

    this.iDraw = 2;

    if (this.drawQuatro) {
      let bar = (this.hpfull / 80) * this.hp;

      ctx.strokeStyle = "green";
      ctx.strokeRect(this.x + removeX, this.y + removeY, 50, 50);

      if (bar > 70) {
        ctx.fillStyle = "green";
      } else if (bar > 40) {
        ctx.fillStyle = "yellow";
      } else if (bar > 0) {
        ctx.fillStyle = "red";
      }

      ctx.fillRect(
        this.x + removeX,
        this.y + removeY - 8,
        (this.hp * 50) / this.hpfull,
        5
      );
    }

    this.drawQuatro = false;

    /*
if(this.target){
	

ctx.fillStyle="red";
ctx.fillRect(this.target.x+removeX,this.target.y+removeY,50,50);


};
//*/
    //ctx.fillStyle="red";
    //ctx.fillRect(this.hotCell.x+removeX,this.hotCell.y+removeY,50,50);
  }

  if (this.hp > 0) {
    if (this.rage) {
      ctx.fillStyle = "red";
      ctx.fillRect(this.x + removeX + 17, this.y + removeY - 20, 15, 15);

      ctx.lineWidth = 3;
      ctx.strokeStyle = "white";
      ctx.strokeRect(this.x + removeX + 17, this.y + removeY - 20, 15, 15);
    }

    for (let i = 0; i < this.hp_up.length; i++) {
      ctx.drawImage(
        bul_bul,
        this.hp_up[i].animX,
        0,
        100,
        100,
        this.x + removeX - 25,
        this.y + removeY - 25,
        100,
        100
      );
    }

    if (this.nar) {
      ctx.drawImage(
        nar,
        0,
        0,
        100,
        100,
        this.x + removeX,
        this.y + removeY,
        50,
        50
      );
    }
  }

  /*
if(
this.fatherFraction.revers
&&
this.fatherFraction.revers.on_evacuation
)
{
	
	let ok;


//if(this.fatherFraction.revers.transports){	
//for(let i=0;i<this.fatherFraction.revers.transports.length;i++){
	
	if(this.fatherFraction.revers.on_evacuation.indexOf(this.cell.unit)!==-1){ok=true; };
	
//};	
//};	
	
	
if(ok){	
ctx.fillStyle="red";
ctx.fillRect(this.x+removeX,this.y+removeY,50,50);	
};	
};
//*/

  /*
for(let i=0;i<this.way.length;i++){
	
ctx.fillStyle="red";
ctx.fillRect(this.way[i].x+removeX,this.way[i].y+removeY,50,50);	
	
};



//*/
  /*
			ctx.textBaseline="top";
ctx.textAlign="left";
ctx.font="15px Areal";	
ctx.fillStyle="black";
	

ctx.fillText(this.fatherFraction.fraction,this.x+removeX,this.y+removeY);
ctx.fillStyle="red";
ctx.fillText(this.fatherFraction.control,this.x+removeX,this.y+removeY+15);
ctx.fillStyle="black";
ctx.fillText("type "+this.type,this.x+removeX,this.y+removeY+30);
	
	ctx.fillText(this.persolalNumber,this.x+removeX+40,this.y+removeY+15);
*/
};

Obj.prototype.drawSpecial = function () {
  this.myDraw = false;

  if (this.type === 1) {
    ctx.drawImage(
      tree_grunt,
      this.animX,
      this.animY,
      200,
      200,
      this.x + removeX - 25 + this.ranX,
      this.y + removeY - 25 + this.ranY,
      100,
      100
    );
  }
};

LandObj.prototype.drawTrups = function () {
  if (this.type === "wood") {
    ctx.drawImage(
      this.imageToDrawTrup,
      this.animX,
      this.animY,
      200,
      200,
      this.x + removeX + this.ranX + this.ranGabX / 2,
      this.y + removeY - 60 + this.ranY + this.ranGabY / 2,
      40 + this.ranGabX,
      80 + this.ranGabY
    );
  }
};

//Obj.prototype.drawSpecial=drawSpecial;
//LandObj.prototype.drawTrups=drawTrups;
Obj.prototype.draw_water = function () {
  this.myDraw = false;

  if (this.water) {
    //console.log("ok");pausa=1
    //console.log(this.gabarit); pausa=1;

    this.animTimer++;

    if (this.animTimer === 1000) {
      this.animTimer = 0;
    }

    this.animY = 0;
    let pribKoof = 3;
    let koof = 0.3;

    let dop_gab = 1;

    if (this.priboy_line) {
      this.animY = 100;
      pribKoof = 1;
      koof = 0.5;

      dop_gab = 1.5;
    }

    //ctx.globalAlpha=this.glblAlpha_2;
    //ctx.fillStyle="blue";
    //ctx.fillRect(this.x+10+removeX,this.y+10+removeY,30,30);

    if (this.vector) {
      this.gabarit += koof / pribKoof;
    } else {
      this.gabarit -= koof / 3;
    }

    //ocean

    let gabarit = this.gabarit * dop_gab;

    ctx.globalAlpha = this.glblAlpha_2;
    ctx.drawImage(
      this.imageToDraw,
      this.animX,
      this.animY,
      100,
      100,
      this.x - (gabarit - 50) / 2 + removeX,
      this.y - (gabarit - 50) / 2 + removeY,
      gabarit,
      gabarit
    );
    ctx.glblAlpha = 1;

    ctx.globalAlpha = this.glblAlpha;
    ctx.drawImage(
      this.imageToDraw,
      this.animX_2,
      this.animY_2,
      100,
      100,
      this.x - (gabarit - 50) / 2 + removeX,
      this.y - (gabarit - 50) / 2 + removeY,
      gabarit,
      gabarit
    );
    ctx.globalAlpha = 1;

    this.glblAlpha -= 0.01; //05;

    if (this.glblAlpha <= 0.03) {
      this.glblAlpha = 1;

      this.animX_2 = this.animX;
      this.animY_2 = this.animY;

      this.animX = Math.floor(Math.random() * 8) * 100;
      this.animY = 0; //Math.floor(Math.random()*2)*100;

      //pausa=1;
    }

    this.glblAlpha_2 = 1 - this.glblAlpha;

    //console.log(this.gabX)	;pausa=1

    if (this.gabarit >= 85) {
      this.vector = 0;
    }

    if (this.gabarit <= 75) {
      this.vector = 1;
    }
    //console.log("water");

    if (this.oil) {
      this.oil.draw();
    }

    //return;
  } else if (this.water_line) {
    //pesok

    ctx.drawImage(
      this.imageToDraw,
      this.animX,
      this.animY,
      100,
      100,
      this.x - 35 + removeX,
      this.y - 35 + removeY,
      120,
      120
    );

    //ctx.drawImage(,0,0,100,100,(this.x+removeX)-25,(this.y+removeY)-25,100,100);

    //	return;
  }

  //ctx.strokeStyle="red";
  //ctx.strokeRect(this.x+removeX,this.y+removeY,50,50);
};

Obj.prototype.draw2 = function () {
  this.myDraw = false;

  if (this.type === 0 || this.under_wood) {
    //sumexpe
    if (!this.water_line) {
      ctx.drawImage(
        this.imageToDraw,
        this.animX,
        0,
        100,
        100,
        this.x + removeX - 35,
        this.y + removeY - 35,
        120,
        120
      );
    } else if (this.water_line) {
      ctx.drawImage(
        this.imageToDraw,
        this.animX_wl,
        this.animY_w1,
        100,
        100,
        this.x + removeX - 25,
        this.y + removeY - 25,
        100,
        100
      );
    } else {
      ctx.drawImage(
        this.imageToDraw,
        0,
        0,
        100,
        100,
        this.x + removeX,
        this.y + removeY,
        50,
        50
      );
    }
    //ctx.strokeStyle="red";
    //ctx.strokeRect(this.x+removeX,this.y+removeY,50,50);
    //console.log(this.animX);
  } else if (this.type === 1) {
    ctx.drawImage(
      this.imageToDraw,
      0,
      0,
      100,
      100,
      this.x + removeX - 25,
      this.y + removeY - 25,
      100,
      100
    );
    //ctx.drawImage(tree_grunt,0,0,800,800,this.x+removeX-12,this.y+removeY-12,75,75);

    //sumexpe

    //ctx.drawImage(this.imageToDraw,0,0,100,100,this.x+removeX,this.y+removeY,50,50);

    //onDrawSpecial.push(gameFielg[this.vertikal][this.horizont]);
  }

  this.draw_water();

  /*
if(this.dragoon){
	
		ctx.fillStyle="green";
ctx.fillRect(this.x+removeX,this.y+removeY,50,50);	
	
};
*/

  /*
for(let i=0;i<this.iContaktWith.length;i++){
	
				ctx.textBaseline="top";
ctx.textAlign="left";
ctx.font="15px Areal";	
ctx.fillStyle="black";
	
	if(this.iContaktWith[i].father.unitStatus==="life"){ctx.fillStyle="red";};
	
	

ctx.fillText(this.iContaktWith[i].father.persolalNumber,this.x+removeX,this.y+removeY+i*15);
	
};
*/

  /*	
if(this.father){
	
	if(this.father.vertikal===this.vertikal-1&&this.father.horizont===this.horizont){
		
		ctx.drawImage(ve,0,0,100,100,this.x+removeX,this.y+removeY,50,50);
		
	}
	else if(this.father.vertikal===this.vertikal-1&&this.father.horizont===this.horizont+1){
		
		ctx.drawImage(ve,100,0,100,100,this.x+removeX,this.y+removeY,50,50);
		
	}
	else if(this.father.vertikal===this.vertikal&&this.father.horizont===this.horizont+1){
		
		ctx.drawImage(ve,200,0,100,100,this.x+removeX,this.y+removeY,50,50);
		
	}
	else if(this.father.vertikal===this.vertikal+1&&this.father.horizont===this.horizont+1){
		
		ctx.drawImage(ve,300,0,100,100,this.x+removeX,this.y+removeY,50,50);
		
	}
	else if(this.father.vertikal===this.vertikal+1&&this.father.horizont===this.horizont){
		
		ctx.drawImage(ve,400,0,100,100,this.x+removeX,this.y+removeY,50,50);
		
	}
	else if(this.father.vertikal===this.vertikal+1&&this.father.horizont===this.horizont-1){
		
		ctx.drawImage(ve,500,0,100,100,this.x+removeX,this.y+removeY,50,50);
		
	}
	else if(this.father.vertikal===this.vertikal&&this.father.horizont===this.horizont-1){
		
		ctx.drawImage(ve,600,0,100,100,this.x+removeX,this.y+removeY,50,50);
		
	}
	else if(this.father.vertikal===this.vertikal-1&&this.father.horizont===this.horizont-1){
		
		ctx.drawImage(ve,700,0,100,100,this.x+removeX,this.y+removeY,50,50);
		
	}
	
	
};	


//*/

  /*	
if(this.continent){	

		ctx.textBaseline="top";
ctx.textAlign="left";
ctx.font="20px Areal";	
ctx.fillStyle="red";
	

//ctx.fillText(this.f,this.x+removeX,this.y+removeY);

ctx.fillText(this.continent,this.x+removeX,this.y+removeY+35);

//ctx.fillText(this.h,this.x+removeX+30,this.y+removeY+35);	
	
};	
*/

  /*	
	if(this.h>=0||isNaN(this.h)){
		
		
		ctx.textBaseline="top";
ctx.textAlign="left";
ctx.font="15px Areal";	
ctx.fillStyle="red";
	

ctx.fillText(this.f,this.x+removeX,this.y+removeY);

ctx.fillText(this.g,this.x+removeX,this.y+removeY+35);

ctx.fillText(this.h,this.x+removeX+30,this.y+removeY+35);		
		
		
	};
//*/
};

//console.log(cenX);

const removeControl = function () {
  //removeX

  let mass = [];

  //centerDrawPoint.horizont=centerDrawPoint.cellObj.horizont;
  //centerDrawPoint.vertikal=centerDrawPoint.cellObj.vertikal;

  let ver = Math.floor((cenY - removeY) / 50);
  let hor = Math.floor((cenX - removeX) / 50);

  centerDrawPoint.cellObj = gameFielg[ver][hor];

  ///////////////////////////////////////////

  if (gameFielg[0][0].x + removeX < 0) {
    if (obj.x <= 0) {
      removeX += 25;
    }
  }

  if (gameFielg[0][gameFielgMas - 1].x + 50 + removeX > 50 * 14) {
    if (obj.x + 10 >= width) {
      removeX -= 25;
    }
  }

  //if(gameFielg[0][0].x+removeX>0){removeX-=(gameFielg[0][0].x); console.log(removeX);};

  if (
    gameFielg[0][0].y + removeY <
    0 //||gameFielg[0][139].x+50>50*14
  ) {
    if (obj.y <= 0) {
      removeY += 25;
    }
  }

  if (
    gameFielg[gameFielgMas - 1][gameFielgMas - 1].y + 50 + removeY >
    50 * 14 //||gameFielg[0][139].x+50>50*14
  ) {
    if (obj.y + 10 >= height) {
      removeY -= 25;
    }
  }

  //console.log(removeY);

  if (removeX > 0) {
    removeX = 0;
  } else if (Math.abs(removeX - 700) > gameFielg.length * 50) {
    removeX = -(gameFielg.length * 50 - 700);
  }

  if (removeY > 0) {
    removeY = 0;
  } else if (Math.abs(removeY - 700) > gameFielg.length * 50) {
    removeY = -(gameFielg.length * 50 - 700);
  }
};

canvas3.onmousemove = function () {
  x = event.offsetX;
  y = event.offsetY;

  // console.log(x)
};

//console.log(crateZoonMouse.x);

const getActiveZone = function () {
  //drawQuatro oil

  ///*
  if (crateZoonMouse.active && !iLoockTo && !player_pro_building) {
    if (obj.x <= 700) {
      crateZoonMouse.distanseX = obj.x - removeX - crateZoonMouse.x;
    } else {
      crateZoonMouse.distanseX = 700 - removeX - crateZoonMouse.x;
    }

    crateZoonMouse.distanseY = obj.y - removeY - crateZoonMouse.y;

    //if(crateZoonMouse.distanseX||crateZoonMouse.distanseY){
    player.selectUnits = [];
    player.selectDragons = [];
    player.selectBuildings = [];
    player.selectIsSweem = [];
    //};

    if (crateZoonMouse.distanseX >= 0) {
      crateZoonMouse.conorX = crateZoonMouse.x;
    } else {
      crateZoonMouse.conorX = crateZoonMouse.x + crateZoonMouse.distanseX;
    }

    if (crateZoonMouse.distanseY >= 0) {
      crateZoonMouse.conorY = crateZoonMouse.y;
    } else {
      crateZoonMouse.conorY = crateZoonMouse.y + crateZoonMouse.distanseY;
    }

    //console.log(crateZoonMouse.conorY);

    //let x=crateZoonMouse.conorX+removeX;
    //let y=crateZoonMouse.conorY+removeY;

    let disX = Math.abs(crateZoonMouse.distanseX);
    let disY = Math.abs(crateZoonMouse.distanseY);

    let vertikal = Math.floor(crateZoonMouse.conorY / 50);
    let horizont = Math.floor(crateZoonMouse.conorX / 50);

    let koofX = Math.floor(disX / 50) + 2;
    let koofY = Math.floor(disY / 50) + 2;

    ////////////////////////////////////////////////////////////////////////////////

    if (disX + disY === 0) {
      if (pausa_click) {
        //console.log("click");
        let ver = vertikal;
        let hor = horizont;

        let unit;

        if (gameFielg[ver][hor].dragoon) {
          unit = gameFielg[ver][hor].dragoon;
        } else if (
          gameFielg[ver][hor].unit &&
          gameFielg[ver][hor].unit.unitStatus === "life"
        ) {
          unit = gameFielg[ver][hor].unit;
        }

        if (
          unit &&
          unit.fatherFraction.control === "player" &&
          !click_to_iden
        ) {
          click_to_iden = { unit: unit, timer: 8 };
        } else if (
          unit &&
          click_to_iden &&
          click_to_iden.unit.persolalNumber === unit.persolalNumber
        ) {
          click_to_iden.active = true;
        }
        //else{click_to_iden=false;};
      }

      if (click_to_iden) {
        return;
      }
    } else {
      click_to_iden = false;
    }

    ///////////////////////////////////////////////////////////////////////////////////

    let vossal = false;

    for (let i = vertikal; i < vertikal + koofY; i++) {
      for (let k = horizont; k < horizont + koofX; k++) {
        if (
          gameFielg[i] &&
          gameFielg[i][k] &&
          !(
            gameFielg[i][k].x > crateZoonMouse.conorX + disX ||
            gameFielg[i][k].x + 50 < crateZoonMouse.conorX ||
            gameFielg[i][k].y > crateZoonMouse.conorY + disY ||
            gameFielg[i][k].y + 50 < crateZoonMouse.conorY
          )
        ) {
          if (
            gameFielg[i][k].vossalObj &&
            !player.selectUnits.length &&
            !vossal &&
            (gameFielg[i][k].vossalObj.neitral ||
              gameFielg[i][k].vossalObj.fatherFraction.persolalNumber ===
                player.persolalNumber)
          ) {
            //console.log("vossalObj");

            vossal = true;

            if (!player.selectBuildings.length) {
              player.selectBuildings.push(gameFielg[i][k].vossalObj);
            }

            //console.log(player.selectUnits);
          }

          if (
            !player.selectBuildings.length &&
            gameFielg[i][k].oil &&
            gameFielg[i][k].unit &&
            gameFielg[i][k].unit.type === "oil_platform" &&
            !player.selectUnits.length &&
            gameFielg[i][k].unit.fatherFraction.control === "player"
          ) {
            player.selectBuildings.push(gameFielg[i][k].unit);
          }

          if (
            !player.selectBuildings.length &&
            gameFielg[i][k].oil &&
            !player.selectUnits.length
          ) {
            player.selectBuildings.push(gameFielg[i][k].oil);
          }

          if (
            gameFielg[i][k].dragoon &&
            gameFielg[i][k].dragoon.fatherFraction.control === "player" &&
            player.selectDragons.indexOf(gameFielg[i][k].dragoon) === -1 &&
            player.selectUnits.length + player.selectDragons.length < 9
          ) {
            player.selectDragons.push(gameFielg[i][k].dragoon);
          }

          if (gameFielg[i][k].unit && gameFielg[i][k].unit.fly) {
            console.log(gameFielg[i][k].unit);
          }

          if (
            gameFielg[i][k].unit &&
            !gameFielg[i][k].unit.fly &&
            gameFielg[i][k].unit.fatherFraction &&
            gameFielg[i][k].unit.fatherFraction.control === "player" &&
            gameFielg[i][k].unit.unitStatus === "life"
          ) {
            if (player.selectUnits.length) {
              player.selectBuildings = [];
            }

            if (
              player.selectUnits.length +
                player.selectDragons.length +
                player.selectIsSweem.length <
              9
            ) {
              if (
                player.selectUnits.indexOf(gameFielg[i][k].unit) === -1 &&
                !gameFielg[i][k].unit.sweeme
              ) {
                player.selectUnits.push(gameFielg[i][k].unit);
              } else if (
                player.selectIsSweem.indexOf(gameFielg[i][k].unit) === -1 &&
                gameFielg[i][k].unit.sweeme
              ) {
                player.selectIsSweem.push(gameFielg[i][k].unit);
              }
            } else {
              break;
            }
          }
        } ////////////////////////////////////////////////
      }
    }

    //console.log(player.selectUnits.length);
  } else {
    crateZoonMouse = {
      x: undefined,
      y: undefined,

      conorX: undefined,
      conorY: undefined,

      distanseX: undefined,
      distanseY: undefined,

      active: false,
    };
  }

  if (
    player.selectUnits.length ||
    player.selectDragons.length ||
    player.selectIsSweem.length
  ) {
    player.selectBuildings = [];
  }

  //console.log(player.selectBuildings.length);
  //console.log(player.selectIsSweem.length) drawQuatro
  //*/
};

const drawMouseZone = function () {
  ///*

  let x = crateZoonMouse.conorX + removeX;
  let y = crateZoonMouse.conorY + removeY;

  let disX = Math.abs(crateZoonMouse.distanseX);
  let disY = Math.abs(crateZoonMouse.distanseY);

  ctx.beginPath();
  ctx.lineWidth = 1;
  ctx.strokeStyle = "red";

  ctx.moveTo(x, y);
  ctx.lineTo(x + disX, y);

  ctx.moveTo(x + disX, y);
  ctx.lineTo(x + disX, y + disY);

  ctx.moveTo(x + disX, y + disY);
  ctx.lineTo(x, y + disY);

  ctx.moveTo(x, y + disY);
  ctx.lineTo(x, y);

  ctx.stroke();
  //*/

  //ctx.fillStyle="blue";
  //ctx.fillRect(crateZoonMouse.x+removeX,crateZoonMouse.y+removeY,40,40);
};

//let hz=[[],[],[],[],[],[],[],[],[],[]];

const get_good_sweeme_cell = function (vertikal, horizont, mass) {
  cells_on_check = [];

  let go_vertikal = vertikal;
  let go_horizont = horizont;

  //if(horizont<5){go_horizont=5;};

  let cells = [[], [], [], [], [], [], [], [], [], []];

  let go = 0;

  //cells_on_check.push(gameFielg[vertikal][horizont]);

  //cells.push(gameFielg[i][k]);

  //hz[0].push(gameFielg[vertikal][horizont]);
  cells[0].push(gameFielg[vertikal][horizont]);

  for (let j = 0; j < 7; j++) {
    ///*

    if (go) {
      for (let i = go_vertikal - go; i <= go_vertikal + go; i++) {
        //console.log( i );

        let k = go_horizont - go;

        for (let f = 0; f < 2; f++) {
          //console.log( (go_horizont+go) - (go_horizont-go));

          if (
            gameFielg[i] &&
            gameFielg[i][k] &&
            gameFielg[i][k].water &&
            gameFielg[i][k].sea === gameFielg[vertikal][horizont].sea &&
            !gameFielg[i][k].vossalObj &&
            (!gameFielg[i][k].unit || mass.indexOf(gameFielg[i][k].unit) !== -1)
          ) {
            //cells_on_check.push(gameFielg[i][k]);
            //hz[j].push(gameFielg[i][k]);
            cells[j].push(gameFielg[i][k]);
          }

          k = go_horizont + go;
        }
      }
    }

    //*/

    ///*

    let i = go_vertikal - go;

    for (let f = 0; f <= 1; f++) {
      //console.log("go : "+go);

      for (let k = go_horizont - (go - 1); k <= go_horizont + (go - 1); k++) {
        if (
          gameFielg[i] &&
          gameFielg[i][k] &&
          gameFielg[i][k].water &&
          gameFielg[i][k].sea === gameFielg[vertikal][horizont].sea &&
          !gameFielg[i][k].vossalObj &&
          (!gameFielg[i][k].unit || mass.indexOf(gameFielg[i][k].unit) !== -1)
        ) {
          //cells_on_check.push(gameFielg[i][k]);
          //hz[j].push(gameFielg[i][k]);
          cells[j].push(gameFielg[i][k]);
        }
      }

      i = go_vertikal + go;
    }

    //*/

    go++;
  }

  /////////////////////////////////////////////////
  let good = [];
  let used = [];

  for (let j = 0; j < mass.length; j++) {
    let ok = false;

    for (let i = 0; i < cells.length; i++) {
      if (ok) {
        break;
      }

      for (let k = 0; k < cells[i].length; k++) {
        if (ok) {
          break;
        }

        let okSweeme = 0;
        let del = [];

        for (let v = cells[i][k].vertikal - 1; v <= cells[i][k].vertikal; v++) {
          if (ok) {
            break;
          }
          for (
            let h = cells[i][k].horizont;
            h <= cells[i][k].horizont + 1;
            h++
          ) {
            if (ok) {
              break;
            }

            if (
              gameFielg[v] &&
              gameFielg[v][h] &&
              used.indexOf(gameFielg[v][h]) === -1 &&
              gameFielg[v][h].water &&
              !gameFielg[v][h].vossalObj &&
              (!gameFielg[v][h].unit ||
                (gameFielg[v][h].unit &&
                  gameFielg[v][h].unit.persolalNumber ===
                    mass[j].persolalNumber) ||
                mass.indexOf(gameFielg[v][h].unit) !== -1)
            ) {
              okSweeme++;
              del.push(gameFielg[v][h]);
            } else {
              break;
            }
          }
        }

        if (okSweeme === 4) {
          ok = true;
          //console.log(i);
          //cells_on_check.push(cells[i][k]);
          good.push(cells[i][k]);
          cells[i][k].good = true;

          for (let m = 0; m < del.length; m++) {
            used.push(del[m]);
          }
        }

        if (ok) {
          break;
        }
      }
    }
  }

  //for(let i=0)

  return good;
};

const getSweemeGroopPosition = function () {
  let mass = []; //player.selectIsSweem; hold_position

  for (let i = 0; i < player.selectIsSweem.length; i++) {
    player.selectIsSweem.terpenie = 0;

    mass.push(player.selectIsSweem[i]);

    //player.selectIsSweem[i].drawQuatro=true;
  }

  let vertikal = Math.floor((obj.y - removeY) / 50);
  let horizont = Math.floor((obj.x - removeX) / 50);

  /*
oil_tanker
for(let i=0;i<mass.length;i++){
	
mass[i].clickSave=new ClickSave(0,gameFielg[vertikal][horizont]);

if(!mass[i].active){	
mass[i].fatherFraction.activeUnits.push(mass[i]); mass[i].active=true;

//mass[i].spe=good_2[i];	
//mass[i].hold_sweeme=1;
mass[i].way=[];
mass[i].hold_position="g";
mass[i].goGroop_sweeme=true;

	
};
};




return;

*/

  let sound;

  let good = get_good_sweeme_cell(vertikal, horizont, mass);

  for (let i = 0; i < mass.length; i++) {
    if (
      mass[i].type === "distroer" ||
      mass[i].type === "linkor" ||
      mass[i].type === "turtle"
    ) {
      let unit;

      if (
        mass[i].iCanGetFly &&
        gameFielg[vertikal][horizont].dragoon &&
        gameFielg[vertikal][horizont].dragoon.fatherFraction.union !==
          mass[i].fatherFraction.union &&
        gameFielg[vertikal][horizont].dragoon.hp > 0
      ) {
        unit = gameFielg[vertikal][horizont].dragoon;
      } else if (
        gameFielg[vertikal][horizont].unit &&
        !gameFielg[vertikal][horizont].unit.neitral &&
        gameFielg[vertikal][horizont].unit.fatherFraction.union !==
          mass[i].fatherFraction.union &&
        gameFielg[vertikal][horizont].unit.hp > 0
      ) {
        unit = gameFielg[vertikal][horizont].unit;
      } else if (
        gameFielg[vertikal][horizont].vossalObj &&
        !gameFielg[vertikal][horizont].vossalObj.neitral &&
        gameFielg[vertikal][horizont].vossalObj.fatherFraction.union !==
          mass[i].fatherFraction.union &&
        gameFielg[vertikal][horizont].vossalObj.hp > 0
      ) {
        unit = gameFielg[vertikal][horizont].vossalObj;
      }

      ////////////////////////////////////////////////////// SOUND
      //if(shablon[i][k].type===1){

      ///*
      if (!sound) {
        if (!mass[i].voice) {
          mass[i].voice = true;

          select_sound(mass[i], "go_sound");
          sound = true;
        }
      }
      //*/

      //};
      //////////////////////////////////////////////////////////

      if (unit) {
        mass[i].clickSave = new ClickSave(unit, 0);

        if (player.activeUnits.indexOf(mass[i]) === -1) {
          player.activeUnits.push(mass[i]);
        }

        //console.log("/////////////////////");
        mass.splice(i, 1);
        i--;
      }
    }
  }

  if (good.length) {
    let good_2 = [];

    for (let i = good[0].vertikal - 10; i <= good[0].vertikal + 10; i++) {
      for (let k = good[0].horizont - 10; k <= good[0].horizont + 10; k++) {
        if (gameFielg[i] && gameFielg[i][k] && gameFielg[i][k].good) {
          good_2.push(gameFielg[i][k]);
          gameFielg[i][k].good = false;
        }
      }
    }

    //console.log(good_2);
    //console.log("!!!!!!!!!!!!");

    for (let i = 0; i < good_2.length; i++) {
      if (mass[i]) {
        if (
          mass[i].type !== "transport" &&
          mass[i].type !== "distroer" &&
          mass[i].type !== "linkor" &&
          mass[i].type !== "turtle" &&
          gameFielg[vertikal][horizont].vossalObj
        ) {
          ////////////////////////////////////////////////////// SOUND
          //if(shablon[i][k].type===1){

          ///*
          if (!sound) {
            if (!mass[i].voice) {
              mass[i].voice = true;

              select_sound(mass[i], "go_sound");
              sound = true;
            }
          }
          //*/

          //};
          //////////////////////////////////////////////////////////

          mass[i].clickSave = new ClickSave(
            gameFielg[vertikal][horizont].vossalObj,
            0
          );

          if (player.activeUnits.indexOf(mass[i]) === -1) {
            player.activeUnits.push(mass[i]);
          }

          //console.log("go");
        } else if (
          mass[i].type !== "transport" &&
          mass[i].type !== "distroer" &&
          mass[i].type !== "linkor" &&
          mass[i].type !== "turtle" &&
          gameFielg[vertikal][horizont].unit &&
          gameFielg[vertikal][horizont].unit.persolalNumber !==
            mass[i].persolalNumber
        ) {
          mass[i].clickSave = new ClickSave(
            gameFielg[vertikal][horizont].unit,
            0
          );

          if (player.activeUnits.indexOf(mass[i]) === -1) {
            player.activeUnits.push(mass[i]);
          }

          //console.log("go");
        } else if (
          !(
            mass[i].landing &&
            gameFielg[vertikal][horizont].unit &&
            gameFielg[vertikal][horizont].unit.persolalNumber ===
              mass[i].persolalNumber
          )
        ) {
          ////////////////////////////////////////////////////// SOUND
          //if(shablon[i][k].type===1){

          ///*
          if (!sound) {
            if (!mass[i].voice) {
              mass[i].voice = true;

              select_sound(mass[i], "go_sound");
              sound = true;
            }
          }
          //*/

          //};
          //////////////////////////////////////////////////////////

          mass[i].clickSave = new ClickSave(0, good_2[i]);
          mass[i].spe = good_2[i];
          //mass[i].hold_sweeme=1;
          mass[i].way = [];
          mass[i].hold_position = globalTimer;
          mass[i].goGroop_sweeme = true;
          //console.log(mass[i].persolalNumber);

          ///*
          if (player.activeUnits.indexOf(mass[i]) === -1) {
            player.activeUnits.push(mass[i]);
          }
          //*/
          //console.log(mass.length);
        }
      }
    }
  } else {
    if (!gameFielg[vertikal][horizont].water) {
      for (let i = 0; i < mass.length; i++) {
        //if(
        //!mass[i].landing
        //&&gameFielg[vertikal][horizont].unit
        //&&gameFielg[vertikal][horizont].unit.persolalNumber===mass[i].persolalNumber

        //){

        ////////////////////////////////////////////////////// SOUND
        //if(shablon[i][k].type===1){

        ///*
        if (!sound) {
          if (!mass[i].voice) {
            mass[i].voice = true;

            select_sound(mass[i], "go_sound");
            sound = true;
          }
        }
        //*/

        //};
        //////////////////////////////////////////////////////////

        //console.log("ok")

        mass[i].clickSave = new ClickSave(0, gameFielg[vertikal][horizont]);

        if (player.activeUnits.indexOf(mass[i]) === -1) {
          player.activeUnits.push(mass[i]);
        }

        //};
      }
    }
  }

  if (mass[0].type === "oil_tanker" && !mass[0].voice) {
    ////////////////////////////////////////////////////// SOUND
    //if(shablon[i][k].type===1){

    ///*

    mass[0].voice = true;

    select_sound(mass[0], "go_sound");

    //*/

    //};
    //////////////////////////////////////////////////////////
  }
};

const getDragonsGroopPosition = function () {
  let mass = player.selectDragons;

  let vertikal = Math.floor((obj.y - removeY) / 50);
  let horizont = Math.floor((obj.x - removeX) / 50);

  let target = false;

  if (gameFielg[vertikal][horizont].vossalObj) {
    target = gameFielg[vertikal][horizont].vossalObj;
  }

  if (gameFielg[vertikal][horizont].unit) {
    target = gameFielg[vertikal][horizont].unit;
  }

  if (
    gameFielg[vertikal][horizont].dragoon
    //&&gameFielg[vertikal][horizont].dragoon.fatherFraction.union!==player.union
  ) {
    target = gameFielg[vertikal][horizont].dragoon;
  }

  //console.log(target);

  if (
    !target ||
    target.neitral ||
    target.fatherFraction.union === player.union
  ) {
    let position = [];

    if (mass.length === 1) {
      if (vertikal < mass[0].vertikal && gameFielg[vertikal + 1]) {
        vertikal += 1;
      }
      if (horizont > mass[0].horizont && gameFielg[vertikal][horizont - 1]) {
        horizont -= 1;
      }

      position.push(gameFielg[vertikal][horizont]);
      //mass[0].finish=gameFielg[vertikal][horizont];

      //getWay(mass[0],1000,1500);

      //console.log(mass[i])

      if (player.activeUnits.indexOf(mass[0]) === -1) {
        player.activeUnits.push(mass[0]);

        //console.log(mass[i]);
      }
    } else {
      let minV = null;
      let maxV = null;

      let minH = null;
      let maxH = null;

      for (let i = 0; i < mass.length; i++) {
        if (minV === null || mass[i].vertikal < minV) {
          minV = mass[i].vertikal;
        }
        if (maxV === null || mass[i].vertikal > maxV) {
          maxV = mass[i].vertikal;
        }

        if (minH === null || mass[i].horizont < minH) {
          minH = mass[i].horizont;
        }
        if (maxH === null || mass[i].horizont > maxH) {
          maxH = mass[i].horizont;
        }
      }

      let difV = maxV - minV;
      let difH = maxH - minH;

      let positionType;

      if (difH > difV) {
        positionType = "hor";
      } else {
        positionType = "ver";
      }

      //console.log(positionType);
      //console.log("difH : "+difH)
      //console.log(horizont);

      //positionType="ver";
      //if(vertikal===0){vertikal=1;};

      if (positionType === "hor") {
        if (vertikal === 0) {
          vertikal = 1;
        }
        if (horizont > gameFielg[0].length - 1 - mass.length + 1) {
          horizont = gameFielg[0].length - 1 - mass.length + 1;
        }
        if (horizont < mass.length) {
          horizont = mass.length;
        }

        for (let i = mass.length; i > 0; i--) {
          position.push(gameFielg[vertikal][horizont - i + position.length]);
        }
      } else if (positionType === "ver") {
        if (vertikal > gameFielg.length - 1 - mass.length) {
          vertikal = gameFielg.length - 1 - mass.length;
        }
        if (vertikal < mass.length - 1) {
          vertikal = mass.length - 1;
        }

        if (horizont > gameFielg[0][0].length - 1 - 1) {
          horizont = gameFielg[0][0].length - 1 - 1;
        }
        //if(horizont<mass.length){horizont=mass.length;};

        for (let i = mass.length - 1; i >= 0; i--) {
          position.push(
            gameFielg[vertikal - i + position.length + 1][horizont]
          );
        }
      }
    }

    let sound;

    for (let i = 0; i < mass.length; i++) {
      if (!mass[i].voice && !sound) {
        sound = true;

        mass[i].voice = true;

        select_sound(mass[i], "go_sound");
      }

      mass[i].clickSave = new ClickSave(0, position[i]); //!!!!!!!!!!!!!!!!!!!
      mass[i].way = [];

      if (player.activeUnits.indexOf(mass[i]) === -1) {
        player.activeUnits.push(mass[i]);

        //console.log(mass[i]);
      }
    }
  } else {
    let sound;

    for (let i = 0; i < mass.length; i++) {
      mass[i].clickSave = new ClickSave(target, 0); //!!!!!!!!!!!!!!!!!!!
      mass[i].way = [];

      if (!mass[i].voice && !sound) {
        sound = true;

        mass[i].voice = true;

        select_sound(mass[i], "go_sound");
      }

      if (player.activeUnits.indexOf(mass[i]) === -1) {
        player.activeUnits.push(mass[i]);

        //console.log(mass[i]);
      }
    }
  }
};

const getMyGroupPosition = function () {
  ///*

  //hold_position drawQuatro
  //console.log(obj.cellObj.vertikal)
  let sound = false;

  if (
    //player.selectUnits.length>1&&
    !obj.cell.unit &&
    !obj.cell.vossalObj &&
    !obj.cell.dragoon
  ) {
    groupe = false;
    //console.log(groupe);

    let vertMin;
    let vertMax;

    let horMin;
    let horMax;

    for (let i = 0; i < player.selectUnits.length; i++) {
      if (!i) {
        vertMin = player.selectUnits[i].vertikal;
        vertMax = player.selectUnits[i].vertikal;

        horMin = player.selectUnits[i].horizont;
        horMax = player.selectUnits[i].horizont;
      } else {
        if (player.selectUnits[i].vertikal < vertMin) {
          vertMin = player.selectUnits[i].vertikal;
        }
        if (player.selectUnits[i].vertikal > vertMax) {
          vertMax = player.selectUnits[i].vertikal;
        }

        if (player.selectUnits[i].horizont < horMin) {
          horMin = player.selectUnits[i].horizont;
        }
        if (player.selectUnits[i].horizont > horMax) {
          horMax = player.selectUnits[i].horizont;
        }
      }
    }

    let midVert = Math.floor(vertMin + (vertMax - vertMin) / 2);
    let midHor = Math.floor(horMin + (horMax - horMin) / 2);

    if (midVert === 0) {
      midVert++;
    }
    if (midHor === 0) {
      midHor++;
    }

    let basickVektorPosition;

    if (vertMax - vertMin > horMax - horMin) {
      basickVektorPosition = "vertikal";
    } else if (vertMax - vertMin === horMax - horMin) {
      basickVektorPosition = "qatro";
    } else {
      basickVektorPosition = "horizont";
    }

    //console.log(midVert+" vert "+midHor+" hor");
    //console.log(basickVektorPosition);
    let groupPosition;

    if (gameFielg[midVert + 1] && gameFielg[midVert + 1][midHor - 1]) {
      groupPosition = [
        [
          gameFielg[midVert - 1][midHor - 1],
          gameFielg[midVert - 1][midHor],
          gameFielg[midVert - 1][midHor + 1],
        ],
        [
          gameFielg[midVert][midHor - 1],
          gameFielg[midVert][midHor],
          gameFielg[midVert][midHor + 1],
        ],
        [
          gameFielg[midVert + 1][midHor - 1],
          gameFielg[midVert + 1][midHor],
          gameFielg[midVert + 1][midHor + 1],
        ],
      ];
    } else {
      groupPosition = [
        [
          gameFielg[midVert - 1][midHor - 1],
          gameFielg[midVert - 1][midHor],
          gameFielg[midVert - 1][midHor + 1],
        ],
        [
          gameFielg[midVert][midHor - 1],
          gameFielg[midVert][midHor],
          gameFielg[midVert][midHor + 1],
        ],
        [
          gameFielg[midVert][midHor],
          gameFielg[midVert][midHor],
          gameFielg[midVert][midHor],
        ],
      ];
    }

    if (!groupe) {
      //console.log("ok");

      shablon = [
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
      ];

      for (let i = 0; i < player.selectUnits.length; i++) {
        let min = [];

        for (let k = 0; k < groupPosition.length; k++) {
          for (let j = 0; j < groupPosition[k].length; j++) {
            if (groupPosition[k] && groupPosition[k][j]) {
              let a =
                groupPosition[k][j].vertikal - player.selectUnits[i].vertikal;
              let b =
                groupPosition[k][j].horizont - player.selectUnits[i].horizont;

              let c = Math.sqrt(a * a + b * b);

              if (!min.length && !shablon[k][j]) {
                min = [k, j, c];
              } else {
                if (c < min[2] && !shablon[k][j]) {
                  min = [k, j, c];
                }
              }

              if (
                k === groupPosition.length - 1 &&
                j === groupPosition[k].length - 1
              ) {
                shablon[min[0]][min[1]] = player.selectUnits[i];
              }
            } else {
              if (player.selectUnits.length && player.selectUnits[i]) {
                shablon[min[0]][min[1]] = player.selectUnits[i];
              }
            }
            //
          }
        }
      }
    }

    let groupCentrCell = obj.cell;

    //if(groupCentrCell.vertikal===0){groupCentrCell=gameFielg[obj.cell.vertikal+1][obj.cell.horizont];};
    //if(groupCentrCell.horizont===0){groupCentrCell=gameFielg[obj.cell.vertikal][obj.cell.horizont+1];};

    let groupPositionOrg = [];

    if (
      groupCentrCell.vertikal !== 0 &&
      groupCentrCell.horizont !== 0 &&
      groupCentrCell.vertikal !== gameFielg.length - 1 &&
      groupCentrCell.horizont !== gameFielg[0].length - 1
    ) {
      groupPositionOrg = [
        [
          gameFielg[groupCentrCell.vertikal - 1][groupCentrCell.horizont - 1],
          gameFielg[groupCentrCell.vertikal - 1][groupCentrCell.horizont],
          gameFielg[groupCentrCell.vertikal - 1][groupCentrCell.horizont + 1],
        ],
        [
          gameFielg[groupCentrCell.vertikal][groupCentrCell.horizont - 1],
          groupCentrCell,
          gameFielg[groupCentrCell.vertikal][groupCentrCell.horizont + 1],
        ],
        [
          gameFielg[groupCentrCell.vertikal + 1][groupCentrCell.horizont - 1],
          gameFielg[groupCentrCell.vertikal + 1][groupCentrCell.horizont],
          gameFielg[groupCentrCell.vertikal + 1][groupCentrCell.horizont + 1],
        ],
      ];
    } else {
      groupPositionOrg = [
        [
          gameFielg[groupCentrCell.vertikal][groupCentrCell.horizont],
          gameFielg[groupCentrCell.vertikal][groupCentrCell.horizont],
          gameFielg[groupCentrCell.vertikal][groupCentrCell.horizont],
        ],
        [
          gameFielg[groupCentrCell.vertikal][groupCentrCell.horizont],
          groupCentrCell,
          gameFielg[groupCentrCell.vertikal][groupCentrCell.horizont],
        ],
        [
          gameFielg[groupCentrCell.vertikal][groupCentrCell.horizont],
          gameFielg[groupCentrCell.vertikal][groupCentrCell.horizont],
          gameFielg[groupCentrCell.vertikal][groupCentrCell.horizont],
        ],
      ];
    }

    for (let i = 0; i < shablon.length; i++) {
      for (let k = 0; k < shablon[i].length; k++) {
        if (shablon[i][k]) {
          //shablon[i][k].clickFinish=groupPositionOrg[i][k];
          //////////////////////////////////

          if (
            shablon[i][k].iFight ||
            shablon[i][k].target ||
            shablon[i][k].handTarget ||
            shablon[i][k].iDoTakt !== 0
          ) {
            if (
              shablon[i][k].type !== 1 ||
              (shablon[i][k].type === 1 &&
                shablon[i][k].cell &&
                shablon[i][k].waitTime === 30)
            ) {
              shablon[i][k].clickSave = new ClickSave(0, obj.cell); //!!!!!!!!!!!!!!!!!!!
              shablon[i][k].way = [];
              //shablon[i][k].hold_position=false;
              //console.log("here 1")
              //menu_unit_for_update.clickSave=new ClickSave(obj,0);

              //console.log("here 1");// esly zanyat otrvat clik bez handTarget
              ////////////////////////////////////////////////////// SOUND

              if (
                !sound &&
                shablon[i][k] &&
                shablon[i][k].cell &&
                shablon[i][k].hp > 0
              ) {
                if (
                  !shablon[i][k].voice &&
                  !obj.cell.water &&
                  obj.cell.continent === shablon[i][k].cell.continent
                ) {
                  shablon[i][k].voice = true;

                  select_sound(shablon[i][k], "go_sound");

                  sound = true;
                }
              }

              //////////////////////////////////////////////////////////
            }
          } else {
            if (
              shablon[i][k].cell &&
              shablon[i][k].cell.continent === obj.cell.continent
            ) {
              //console.log("ok");

              shablon[i][k].way = [];

              if (player.selectUnits.length === 1) {
                if (
                  shablon[i][k].type !== 1 ||
                  (shablon[i][k].type === 1 &&
                    shablon[i][k].cell &&
                    shablon[i][k].waitTime === 30)
                ) {
                  shablon[i][k].finish = obj.cell;
                  shablon[i][k].handCell = obj.cell;
                  shablon[i][k].clickSave = false;
                  //shablon[i][k].hold_position=false;
                  shablon[i][k].stopGetTarget = 50;

                  //console.log("here 2")

                  if (
                    shablon[i][k].fatherFraction.activeUnits.indexOf(
                      shablon[i][k]
                    ) === -1
                  ) {
                    shablon[i][k].fatherFraction.activeUnits.push(
                      shablon[i][k]
                    );
                  }

                  //console.log("here 2");//esly odin bez handTarget
                  /*	
////////////////////////////////////////////////////// SOUND
if(!sound&&shablon[i][k]&&shablon[i][k].cell&&shablon[i][k].hp>0){

	
if(!shablon[i][k].voice){
	
	shablon[i][k].voice=true;
	
select_sound(shablon[i][k],"go_sound");	
	
	sound=true;
	
};	
	
	
};	
//////////////////////////////////////////////////////////	
*/
                }
              }

              //*
              //console.log("here 3");
              ////////////////////////////////////////////////////// SOUND
              //if(shablon[i][k].type===1){

              ///*
              if (!sound && shablon[i][k]) {
                if (!shablon[i][k].voice) {
                  shablon[i][k].voice = true;

                  select_sound(shablon[i][k], "go_sound");
                  sound = true;
                }
              }
              //*/

              //};
              //////////////////////////////////////////////////////////

              shablon[i][k].finish = groupPositionOrg[i][k];

              shablon[i][k].way = [];

              //shablon[i][k].stopGetTarget=50;
              ///*
              shablon[i][k].groupCentrCell = obj.cell;

              shablon[i][k].active = false;

              //shablon[i][k].iFight=false;
              //shablon[i][k].iDoTakt=0;
              //shablon[i][k].target=0;
              //shablon[i][k].handTarget=0;

              shablon[i][k].goGroop = 150;
              //*/
              shablon[i][k].stopGetTarget = 50;

              //shablon[i][k].hold_position=globalTimer;////!!!!!!!!!!!!!!!!!!!!   VAZHNO    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

              //shablon[i][k].extraFin=shablon[i][k].finish;
              //console.log(globalTimer);
            }
          }

          shablon[i][k].myReset = 0; ////

          //shablon[i][k].handCell=true;
          // console.log("ok");
          //if(shablon[i][k].fatherFraction.activeUnits.indexOf(shablon[i][k])===-1){
          //shablon[i][k].fatherFraction.activeUnits.push(shablon[i][k]);
          //};
          // console.log(groupPosition[i][k]);
          shablon[i][k].way = [];
        }
      }
    }
  } else {
    //console.log("ok");

    for (let i = 0; i < player.selectUnits.length; i++) {
      if (obj.cell.dragoon) {
        if (player.selectUnits[i].iCanGetFly) {
          ///////////////////////////////////////////////////////// SOUND

          if (!sound) {
            if (
              obj.cell.dragoon.union !==
                player.selectUnits[i].fatherFraction.union &&
              checkAliens(player.selectUnits[i], obj.cell.dragoon) &&
              !player.selectUnits[i].voice
            ) {
              player.selectUnits[i].voice = true;

              select_sound(player.selectUnits[i], "target");

              sound = true;
            }
          }

          ////////////////////////////////////////////////////////////

          player.selectUnits[i].hold_position = false;

          player.selectUnits[i].clickSave = new ClickSave(
            obj.cell.dragoon,
            0,
            undefined,
            10
          );

          if (!player.selectUnits[i].active) {
            player.selectUnits[i].fatherFraction.activeUnits.push(
              player.selectUnits[i]
            );
            player.selectUnits[i].active = true;
          }
        }
      }

      //if(player.selectUnits[i].persolalNumber===1437){console.log(player.selectUnits[i].handTarget);};

      if (
        (obj.cell.unit || obj.cell.vossalObj) &&
        //&&(!player.selectUnits[i].handTarget||(player.selectUnits[i].handTarget.persolalNumber!==obj.cell.unit.persolalNumber))
        //&&(!player.selectUnits[i].clickHandTarget||(player.selectUnits[i].clickHandTarget.persolalNumber!==obj.cell.unit.persolalNumber))
        obj.cell.unit.persolalNumber !== player.selectUnits[i].persolalNumber
      ) {
        let target;

        if (obj.cell.unit) {
          target = obj.cell.unit;
        } else {
          target = obj.cell.vossalObj;
        }

        ////////////////////////////////////////////////////// SOUND

        if (
          !sound &&
          player.selectUnits[i].cell &&
          player.selectUnits[i].hp > 0
        ) {
          let unit = player.selectUnits[i];

          if (
            unit.cell &&
            //&&
            //!player.selectUnits[i].voice
            target.cell &&
            ((unit.seeing === 1 &&
              ((target.cell.continent &&
                target.cell.continent === unit.cell.continent) ||
                (target.landing &&
                  target.fatherFraction.persolalNumber ===
                    unit.fatherFraction.persolalNumber))) ||
              (unit.seeing > 1 &&
                ((target.cell.continent &&
                  target.cell.continent === unit.cell.continent) ||
                  (target.landing &&
                    target.fatherFraction.persolalNumber ===
                      unit.fatherFraction.persolalNumber) ||
                  (target.fatherFraction.union !== unit.fatherFraction.union &&
                    checkAliens(unit, target)))))
          ) {
            let snd;

            if (
              (!unit.warrior &&
                (target.neitral ||
                  target.fatherFraction.union ===
                    player.selectUnits[i].fatherFraction.union)) ||
              target.neitral ||
              target.fatherFraction.union === unit.fatherFraction.union
            ) {
              snd = "go_sound";
            } else if (unit.warrior) {
              snd = "target";
            }

            if (snd && !unit.voice) {
              //console.log(snd);
              unit.voice = true;

              select_sound(unit, snd);

              sound = true;
            }
          }
        }

        //////////////////////////////////////////////////////////

        if (
          player.selectUnits[i].warrior ||
          target.neitral ||
          target.fatherFraction.union ===
            player.selectUnits[i].fatherFraction.union
        ) {
          player.selectUnits[i].clickSave = new ClickSave(
            target,
            0,
            undefined,
            10
          ); //!!!!!!!!!!!!!!!!!!!
          player.selectUnits[i].hold_position = false;

          // console.log("here 3")
          // console.log("ok");
        }

        if (!player.selectUnits[i].active) {
          player.selectUnits[i].fatherFraction.activeUnits.push(
            player.selectUnits[i]
          );
          player.selectUnits[i].active = true;
        }

        //player.selectUnits[i].way=[];

        //console.log("ok");
      }

      player.selectUnits[i].way = [];
    }
  }
};

window.onmouseup = function () {
  var x = event.offsetX;
  var y = event.offsetY;

  if (long_punkt) {
    long_punkt.long_click = false;
    long_punkt = false;
  }

  click_up = true;
  radar.move = false;

  crateZoonMouse.active = false;
  //console.log(crateZoonMouse.active);
};

window.onmousedown = function () {
  //in_unit_menu

  let vertikal = Math.floor((obj.y - removeY) / 50);
  let horizont = Math.floor((obj.x - removeX) / 50);

  /*
if(gameFielg.length&&gameFielg[vertikal][horizont].unit&&gameFielg[vertikal][horizont].unit.type===1){
	console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!");
	console.log(gameFielg[vertikal][horizont].unit)
	console.log("target :"+gameFielg[vertikal][horizont].unit.target);
	console.log("handTarget");console.log(gameFielg[vertikal][horizont].unit.handTarget);
	//console.log("animys");console.log(gameFielg[vertikal][horizont].unit.animys);
	//pausa=1;
	//gameFielg[vertikal][horizont].unit.metka=1;
	//console.log("ok");
	gameFielg[vertikal][horizont].unit.nar=500
};
//*/
  menu_long_click = true;
  pausa_click = true;

  if (vertikal) {
    if (unit_dop_menu.length) {
      menu_click = true;

      /*	
if(player&&player.menu_unit&&player.menu_unit.list===1){	
	player.menu_unit.click=true;
	
	//console.log("ok");drawQuatro
	
};
*/
    }

    if (pausa || !start_game) {
      return;
    }

    if (player_pro_building && obj.x < 700) {
      player_pro_building_click = true;
    }

    obj.cell = gameFielg[vertikal][horizont];

    if (
      obj.x > radar.x &&
      obj.x < radar.x + radar.gabarit &&
      obj.y > radar.y &&
      obj.y < radar.y + radar.gabarit
    ) {
      radar.move = true;

      let r_x = obj.x - radar.x;
      let r_y = obj.y - radar.y;

      let gab = gameFielg[0][0].drawGabaritRadar;
      //drawGabaritRadar

      let reX = r_x / gab;
      let reY = r_y / gab;

      removeX =
        -(Math.floor(reX) * 50 - 350) + ((Math.floor(reX) * 50 - 350) % 25);
      removeY =
        -(Math.floor(reY) * 50 - 350) + ((Math.floor(reY) * 50 - 350) % 25);

      if (removeX > 0) {
        removeX = 0;
      } else if (Math.abs(removeX - 700) > gameFielg.length * 50) {
        removeX = -(gameFielg.length * 50 - 700);
      }

      if (removeY > 0) {
        removeY = 0;
      } else if (Math.abs(removeY - 700) > gameFielg.length * 50) {
        removeY = -(gameFielg.length * 50 - 700);
      }
    }

    //console.log(obj.x)

    var x = event.offsetX;
    var y = event.offsetY;

    /////////////////////////////

    /////////////////////////////////////

    crateZoonMouse.x = obj.x - removeX;
    crateZoonMouse.y = obj.y - removeY;

    if (obj.x < 700) {
      crateZoonMouse.active = true;
    }

    //console.log(crateZoonMouse.active);
    //console.log(crateZoonMouse.x);

    key = event.which;

    //console.log(key);

    if (
      iLoockTo &&
      (player.selectUnits.length ||
        player.selectDragons.length ||
        player.selectIsSweem.length) &&
      obj.x < 700
    ) {
      // console.log("huynya");

      if (player.selectUnits.length) {
        getMyGroupPosition();
        groupe = true;
      }

      if (player.selectDragons.length) {
        getDragonsGroopPosition();
      }

      if (player.selectIsSweem.length) {
        getSweemeGroopPosition();

        //console.log("start here");
      }

      /*	
for(let i=0;i<player.selectUnits.length;i++){

if(!(obj.cell.vertikal===player.selectUnits[i].vertikal&&
obj.cell.horizont===player.selectUnits[i].horizont
)&&obj.x<700){	
	player.selectUnits[i].way=[];
	player.selectUnits[i].finish=obj.cell;
	player.selectUnits[i].active=false;
};
	//console.log(player.selectUnits[i].finish);
	
};
	
*/
    } else {
      if (obj.x < 700 && !iLoockTo && !player_pro_building) {
        player.selectUnits = [];
        player.selectDragons = [];
        groupe = false;
      }
      //console.log(player.selectDragons);
      //player.selectUnits=[];
    }
    //console.log(player.selectUnits);

    //go=1;
    //console.log(player.selectUnits);
  }
};

//selectUnits

Obj.prototype.draw = function () {
  let koofX = width / document.documentElement.clientWidth;
  let koofY = height / document.documentElement.clientHeight;

  this.x = x * koofX;
  this.y = y * koofY;

  //ctx3.fillStyle="red";
  //ctx3.fillRect(this.x,this.y,10,10);

  //console.log(player)

  if (player) {
    if (player.nation === "orc") {
      ctx3.drawImage(player.cursorOk, 0, 0, 26, 32, this.x, this.y, 50, 50);
    } else {
      ctx3.drawImage(player.cursorOk, 0, 0, 26, 32, this.x - 5, this.y, 50, 50);
    }
  } else {
    ctx3.drawImage(human_cursor_ok, 0, 0, 26, 32, this.x - 5, this.y, 50, 50);
  }

  //ctx3.drawImage(human_cursor_ok,0,0,28,32,menu_kursor[0]-3,menu_kursor[1],40,40);

  //console.log("x "+x+" y "+y+obj.x+" obj.x "+" obj.y "+obj.y);
};

Obj.prototype.drawRadar = function () {
  if (!this.drawGabaritRadar) {
    this.drawGabaritRadar = 130 / gameFielgMap.length;

    this.radarX = radar.x + this.horizont * this.drawGabaritRadar;
    this.radarY = radar.y + this.vertikal * this.drawGabaritRadar;
  }

  let unit = false;

  let imageToDraw = false;

  if (this.unit) {
    unit = this.unit;
  } else if (this.vossalObj) {
    unit = this.vossalObj;
  }

  if (this.dragoon) {
    unit = this.dragoon;
  }

  if (!unit) {
    if (this.water) {
      ctx2.fillStyle = "#18AFFF";

      //imageToDraw=ocean;
    } else {
      ctx2.fillStyle = "#7DB5A6";
      imageToDraw = sumexpe;
    }
  } else {
    if (unit.unitName === "wood") {
      ctx2.fillStyle = "#003f00";
      imageToDraw = unit.imageToDraw;
    } else if (unit.unitName === "shahta") {
      ctx2.fillStyle = "#D6BB3D";
    } else if (unit.type === "stena") {
      ctx2.fillStyle = "white";
    } else if (unit.type === "gora") {
      ctx2.fillStyle = "grey";
    } else if (!unit.neitral) {
      if (unit.fatherFraction.fraction === "blackOrcs") {
        ctx2.fillStyle = "#0F0F0F";
        //imageToDraw=unit.imageToDraw
      } else if (unit.fatherFraction.fraction === "redOrcs") {
        ctx2.fillStyle = "#DF434C";
        //imageToDraw=unit.imageToDraw
      } else if (unit.fatherFraction.fraction === "lazurOrcs") {
        ctx2.fillStyle = "#00FFFF";
        //imageToDraw=unit.imageToDraw
      } else if (unit.fatherFraction.fraction === "h_blue") {
        ctx2.fillStyle = "blue";
        //imageToDraw=unit.imageToDraw
      }
    }
  }

  if (this.oil) {
    ctx2.fillStyle = "#4B0082";

    ctx2.fillRect(
      this.radarX,
      this.radarY,
      this.drawGabaritRadar,
      this.drawGabaritRadar
    );
  } else if (unit) {
    ctx2.fillRect(
      this.radarX,
      this.radarY,
      this.drawGabaritRadar,
      this.drawGabaritRadar
    );
  } else {
    ctx2.drawImage(
      this.imageToDraw,
      40,
      40,
      10,
      10,
      this.radarX,
      this.radarY,
      this.drawGabaritRadar * 1.1,
      this.drawGabaritRadar * 1.1
    );

    //ctx2.fillRect(this.radarX,this.radarY,this.drawGabaritRadar,this.drawGabaritRadar);
  }

  /*
if(this.imageToDraw){imageToDraw=this.imageToDraw;};


if(!imageToDraw){	
    ctx2.fillRect(this.radarX,this.radarY,this.drawGabaritRadar,this.drawGabaritRadar);	
}else{
		

ctx2.drawImage(this.imageToDraw,this.animX,0,100,100,this.radarX,this.radarY,this.drawGabaritRadar,this.drawGabaritRadar);	
	

	
}
*/
};

Radar.prototype.draw = function () {
  if (!this.initialization) {
    //ctx2.strokeStyle="blue";
    //ctx2.strokeRect(this.x,this.y,this.gabarit,this.gabarit);

    //console.log("ok");

    for (let i = 0; i < gameFielg.length; i++) {
      for (let k = 0; k < gameFielg[i].length; k++) {
        //if(!i){console.log(gameFielg[i][k].radarY)};

        gameFielg[i][k].drawRadar();
      }
    }
  } else {
    this.drawGabaritRadar = gameFielg[0][0].drawGabaritRadar;

    for (let k = 0; k < gameFielg[this.tarration].length; k++) {
      //if(!i){console.log(gameFielg[i][k].radarY)};

      gameFielg[this.tarration][k].drawRadar();
    }

    this.tarration++;

    if (this.tarration === gameFielg.length) {
      this.tarration = 0;
    }

    let rX = -removeX / 15;
    let rY = -removeY / 15;

    let koof = 50 / 15;

    let gab = (700 * 130) / (gameFielg.length * 50);

    let r_x = radar.x + rX * (this.drawGabaritRadar / koof);
    let r_y = radar.y + rY * (this.drawGabaritRadar / koof);

    //console.log(rX)

    ctx3.strokeStyle = "violet";
    ctx3.strokeRect(r_x, r_y, gab, gab);

    //console.log(x)

    if (radar.move) {
      let r_x = obj.x - radar.x;
      let r_y = obj.y - radar.y;

      let gab = gameFielg[0][0].drawGabaritRadar;
      //drawGabaritRadar

      let reX = r_x / gab;
      let reY = r_y / gab;

      removeX =
        -(Math.floor(reX) * 50 - 350) + ((Math.floor(reX) * 50 - 350) % 15);
      removeY =
        -(Math.floor(reY) * 50 - 350) + ((Math.floor(reY) * 50 - 350) % 15);

      if (removeX > 0) {
        removeX = 0;
      } else if (Math.abs(removeX - 700) > gameFielg.length * 50) {
        removeX = -(gameFielg.length * 50 - 700);
      }

      if (removeY > 0) {
        removeY = 0;
      } else if (Math.abs(removeY - 700) > gameFielg.length * 50) {
        removeY = -(gameFielg.length * 50 - 700);
      }
    }
  }

  this.initialization = true;
};

const menu_litera = function (arg) {
  if (arg === "a") {
    return 636;
  } else if (arg === "b") {
    return 648;
  } else if (arg === "c") {
    return 660;
  } else if (arg === "d") {
    return 672;
  } else if (arg === "e") {
    return 684;
  } else if (arg === "f") {
    return 696;
  } else if (arg === "g") {
    return 708;
  } else if (arg === "h") {
    return 720;
  } else if (arg === "i") {
    return 732;
  } else if (arg === "j") {
    return 744;
  } else if (arg === "k") {
    return 756;
  } else if (arg === "l") {
    return 768;
  } else if (arg === "m") {
    return 780;
  } else if (arg === "n") {
    return 792;
  } else if (arg === "o") {
    return 804;
  } else if (arg === "p") {
    return 816;
  } else if (arg === "q") {
    return 828;
  } else if (arg === "r") {
    return 840;
  } else if (arg === "s") {
    return 852;
  } else if (arg === "t") {
    return 864;
  } else if (arg === "u") {
    return 876;
  } else if (arg === "v") {
    return 888;
  } else if (arg === "w") {
    return 900;
  } else if (arg === "x") {
    return 912;
  } else if (arg === "y") {
    return 924;
  } else if (arg === "z") {
    return 936;
  } else if (arg === '"') {
    return 948;
  } else if (arg === "'") {
    return 960;
  } else if (arg === "!") {
    return 0;
  } else if (arg === "#") {
    return 12;
  } else if (arg === "$") {
    return 24;
  } else if (arg === "%") {
    return 36;
  } else if (arg === "&") {
    return 48;
  } else if (arg === "(") {
    return 60;
  } else if (arg === ")") {
    return 72;
  } else if (arg === ",") {
    return 84;
  } else if (arg === "-") {
    return 96;
  } else if (arg === ";") {
    return 108;
  } else if (arg === "@") {
    return 120;
  } else if (arg === "+") {
    return 132;
  } else if (arg === "=") {
    return 144;
  } else if (arg === "0") {
    return 156;
  } else if (arg === "1") {
    return 168;
  } else if (arg === "2") {
    return 180;
  } else if (arg === "3") {
    return 192;
  } else if (arg === "4") {
    return 204;
  } else if (arg === "5") {
    return 216;
  } else if (arg === "6") {
    return 228;
  } else if (arg === "7") {
    return 240;
  } else if (arg === "8") {
    return 252;
  } else if (arg === "9") {
    return 264;
  } else if (arg === "A") {
    return 276;
  } else if (arg === "B") {
    return 288;
  } else if (arg === "C") {
    return 300;
  } else if (arg === "D") {
    return 312;
  } else if (arg === "E") {
    return 324;
  } else if (arg === "F") {
    return 336;
  } else if (arg === "G") {
    return 348;
  } else if (arg === "H") {
    return 360;
  } else if (arg === "I") {
    return 372;
  } else if (arg === "J") {
    return 384;
  } else if (arg === "K") {
    return 396;
  } else if (arg === "L") {
    return 408;
  } else if (arg === "M") {
    return 420;
  } else if (arg === "N") {
    return 432;
  } else if (arg === "O") {
    return 444;
  } else if (arg === "P") {
    return 456;
  } else if (arg === ".") {
    return 468;
  } else if (arg === ":") {
    return 480;
  } else if (arg === "Q") {
    return 492;
  } else if (arg === "R") {
    return 504;
  } else if (arg === "S") {
    return 516;
  } else if (arg === "/") {
    return 528;
  } else if (arg === "T") {
    return 540;
  } else if (arg === "U") {
    return 552;
  } else if (arg === "V") {
    return 564;
  } else if (arg === "?") {
    return 576;
  } else if (arg === "W") {
    return 588;
  } else if (arg === "X") {
    return 600;
  } else if (arg === "Y") {
    return 612;
  } else if (arg === "Z") {
    return 624;
  }
};

//menu_unit_for_update

const create_unit_dop_menu = function (arg) {
  unit_dop_menu = [
    { x: 740, y: 500, gabarit: 25, active: false, can: false },
    { x: 770, y: 500, gabarit: 25, active: false, can: false },
    { x: 800, y: 500, gabarit: 25, active: false, can: false },
    { x: 830, y: 500, gabarit: 25, active: false, can: false },
    { x: 860, y: 500, gabarit: 25, active: false, can: false },

    { x: 740, y: 530, gabarit: 25, active: false, can: false },
    { x: 770, y: 530, gabarit: 25, active: false, can: false },
    { x: 800, y: 530, gabarit: 25, active: false, can: false },
    { x: 830, y: 530, gabarit: 25, active: false, can: false },
    { x: 860, y: 530, gabarit: 25, active: false, can: false },

    { x: 740, y: 560, gabarit: 25, active: false, can: false },
    { x: 770, y: 560, gabarit: 25, active: false, can: false },
    { x: 800, y: 560, gabarit: 25, active: false, can: false },
    { x: 830, y: 560, gabarit: 25, active: false, can: false },
    { x: 860, y: 560, gabarit: 25, active: false, can: false },

    { x: 740, y: 590, gabarit: 25, active: false, can: false },
    { x: 770, y: 590, gabarit: 25, active: false, can: false },
    { x: 800, y: 590, gabarit: 25, active: false, can: false },
    { x: 830, y: 590, gabarit: 25, active: false, can: false },
    { x: 860, y: 590, gabarit: 25, active: false, can: false },

    { x: 740, y: 620, gabarit: 25, active: false, can: false },
    { x: 770, y: 620, gabarit: 25, active: false, can: false },
    { x: 800, y: 620, gabarit: 25, active: false, can: false },
    { x: 830, y: 620, gabarit: 25, active: false, can: false },
    { x: 860, y: 620, gabarit: 25, active: false, can: false },
  ];
};

//in_unit_menu hold_position groop_mem_unit

const player_groop_prog = function (units) {
  in_unit_menu = true;

  groop_mem_unit = true;
  //unit_dop_menu=[];

  //unit_dop_menu=[]; i_0

  let y = 230;

  let x = 0;

  for (let i = 0; i < units.length; i++) {
    let obj = units[i];

    if (i === 3 || i === 6) {
      y += 60;
      x -= 150;
    }

    obj.groop_menu_animX = 730 + i * 50 + x;
    obj.groop_menu_animY = y;
  }

  let us = [];

  for (let i = 0; i < units.length; i++) {
    let unit = units[i];

    if (
      !pausa &&
      obj.x >= unit.groop_menu_animX &&
      obj.x <= unit.groop_menu_animX + 40 &&
      obj.y >= unit.groop_menu_animY &&
      obj.y <= unit.groop_menu_animY + 40
    ) {
      unit.groop_menu_active = true;

      if (menu_click) {
        //console.log("ok");

        if (groop_mem && groop_mem.unit) {
          if (groop_mem.unit.persolalNumber === unit.persolalNumber) {
            let u = groop_mem.unit;

            groop_mem = { timer: 2, units: [] };

            for (let j = 0; j < all_units.length; j++) {
              if (u.type === all_units[j].type) {
                groop_mem.units.push(all_units[j]);
              }
            }

            player.selectUnits = [];
            player.selectDragons = [];
            player.selectBuildings = [];
            player.selectIsSweem = [];
            allUnits = [];
          }
        } else {
          groop_mem = { unit: unit, timer: 10 };
        }

        menu_click = false;
        break;
      }
    }
  }

  //console.log(us); pausa=1

  if (us.length) {
    player.selectDragons = [];
    player.selectIsSweem = [];
    player.selectUnits = [];

    for (let j = 0; j < 9; j++) {
      if (!us.length) {
        break;
      }

      let min = [];

      for (let i = 0; i < us.length; i++) {
        let dis = get_distanse_on_lineyka(
          us[i].cell,
          us[i].gabarit,
          uu.cell,
          us[i].gabarit
        );

        if (!min.length || min[0] > dis) {
          min = [dis, us[i]];
        }
      }

      if (min.length) {
        us.splice(us.indexOf(min[1]), 1);

        if (min[1].fly) {
          player.selectDragons.push(min[1]);
        } else if (min[1].sweeme) {
          player.selectIsSweem.push(min[1]);
        } else {
          player.selectUnits.push(min[1]);
        }
      }
    }
  }

  player_groop_draw(units);
};

//create_unit_dop_menu i_0 player_groop_prog

const player_groop_draw = function (units) {
  //menu_litera

  if (unit_dop_menu.length) {
    let active_cell = unit_dop_menu_control();

    ///*

    let ok;

    for (let i = 0; i < unit_dop_menu.length; i++) {
      let obj = unit_dop_menu[i];

      if (obj.can) {
        ok = true;
        break;
      }
    }

    if (ok) {
      ctx3.globalAlpha = 0.5;

      ctx3.fillStyle = "black";
      ctx3.fillRect(725, 485, 150, 150);

      ctx3.globalAlpha = 1;

      //*/

      for (let i = 0; i < unit_dop_menu.length; i++) {
        let obj = unit_dop_menu[i];

        if (!obj.active && obj.can) {
          ctx3.drawImage(
            unit_m,
            0,
            obj.face_animY,
            100,
            100,
            obj.x - obj.gabarit / 2,
            obj.y - obj.gabarit / 2,
            obj.gabarit,
            obj.gabarit
          );

          if (!obj.resurs) {
            ctx3.globalAlpha = 0.5;
            ctx3.fillStyle = "blue";
            ctx3.fillRect(
              obj.x - obj.gabarit / 2,
              obj.y - obj.gabarit / 2,
              obj.gabarit,
              obj.gabarit
            );
            ctx3.globalAlpha = 1;
          }
        }
      }
    }

    if (active_cell) {
      ctx3.drawImage(
        unit_m,
        0,
        active_cell.face_animY,
        100,
        100,
        active_cell.x - active_cell.gabarit / 2,
        active_cell.y - active_cell.gabarit / 2,
        active_cell.gabarit,
        active_cell.gabarit
      );

      if (!active_cell.resurs) {
        ctx3.globalAlpha = 0.5;
        ctx3.fillStyle = "blue";
        ctx3.fillRect(
          active_cell.x - active_cell.gabarit / 2,
          active_cell.y - active_cell.gabarit / 2,
          active_cell.gabarit,
          active_cell.gabarit
        );
        ctx3.globalAlpha = 1;
      } else {
        ctx3.strokeStyle = "red";
        ctx3.strokeRect(
          active_cell.x - active_cell.gabarit / 2,
          active_cell.y - active_cell.gabarit / 2,
          active_cell.gabarit,
          active_cell.gabarit
        );
      }

      //console.log(active_cell);// return

      let i_0 = active_cell.menu_name;

      if (i_0 && i_0.length) {
        ///////  ?????????????????????

        for (let i = 0; i < i_0.length; i++) {
          let obj = i_0[i];

          let imageToDraw = unit_menu_little_liters;

          //imageToDraw=unit_menu_hi_liters;

          let x = 800 - (i_0.length * 10) / 2;

          ctx3.drawImage(
            imageToDraw,
            menu_litera(obj),
            0,
            12,
            12,
            x + i * 10,
            440,
            15,
            15
          );
        }

        i_0 = active_cell.menu_name_2;

        for (let i = 0; i < i_0.length; i++) {
          let obj = i_0[i];

          let imageToDraw = unit_menu_little_liters;

          //imageToDraw=unit_menu_hi_liters;

          let x = 800 - (i_0.length * 10) / 2;

          ctx3.drawImage(
            imageToDraw,
            menu_litera(obj),
            0,
            12,
            12,
            x + i * 10,
            460,
            15,
            15
          );
        }
      } ////////////// ?????????????????????????
    }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  //hp_graf

  for (let i = 0; i < units.length; i++) {
    let obj = units[i];

    ctx3.drawImage(
      unit_m,
      0,
      obj.face_animY,
      100,
      100,
      obj.groop_menu_animX,
      obj.groop_menu_animY,
      40,
      40
    );

    let inst = hp_graf(40, obj.hp, obj.hpfull);

    ctx3.fillStyle = inst.color;
    ctx3.fillRect(
      obj.groop_menu_animX,
      obj.groop_menu_animY + 41,
      inst.gabarit,
      4
    );

    ctx3.strokeStyle = "green";
    ctx3.strokeRect(obj.groop_menu_animX, obj.groop_menu_animY + 41, 40, 4);

    if (obj.mana) {
      let inst = hp_graf(40, obj.mana, 100);

      ctx3.fillStyle = "blue";
      ctx3.fillRect(
        obj.groop_menu_animX,
        obj.groop_menu_animY - 6,
        inst.gabarit,
        4
      );

      ctx3.strokeStyle = "blue";
      ctx3.strokeRect(obj.groop_menu_animX, obj.groop_menu_animY - 6, 40, 4);
    }

    if (obj.groop_menu_active) {
      ctx3.strokeStyle = "red";
      ctx3.strokeRect(obj.groop_menu_animX, obj.groop_menu_animY, 40, 40);
    }

    obj.groop_menu_active = false;
  }
};

//menu_unit_for_update dop_ok menu_unit_for_update in_unit_menu player_groop_prog

const unit_dop_menu_control = function () {
  //oil stop

  if (pausa) {
    return;
  }

  dop_ok = false;

  let active_cell;

  //console.log("here")// 24 myJoubeTimer	stop

  if ((player.menu_unit && player.menu_unit.list === 2) || groop_mem_unit) {
    for (let i = 0; i < unit_dop_menu.length; i++) {
      let cell = unit_dop_menu[i];

      if (
        cell.can &&
        (obj.x < cell.x - cell.gabarit / 2 ||
          obj.x > cell.x + cell.gabarit / 2 ||
          obj.y < cell.y - cell.gabarit / 2 ||
          obj.y > cell.y + cell.gabarit / 2)
      ) {
        cell.active = false;
      } else if (!active_cell && cell.can) {
        cell.active = true;
        active_cell = cell;
      }
    }
  }

  for (let i = 0; i < unit_dop_menu.length; i++) {
    let cell = unit_dop_menu[i];

    if (!cell.can) {
      cell.active = false;
    }

    if (!cell.active) {
      if (cell.gabarit > 25) {
        cell.gabarit -= 1;
      }
    } else {
      if (cell.gold || cell.mana) {
        dop_ok = cell;
      }

      if (cell.gabarit < 35 && cell.resurs) {
        cell.gabarit += 1;
      }

      player.menu_unit.cell_name = cell.menu_name;
      player.menu_unit.cell_name_2 = cell.menu_name_2;

      if (menu_click && cell.resurs) {
        //CLICK

        select_sound_fly(undefined, "click", 1);

        if (!groop_mem_unit) {
          //console.log(cell.name);
          //console.log(cell.gold);
          //myJoube_face_animY=cell.face_animY;

          menu_unit_for_update.myJoube_face_animY = cell.face_animY;
        }
        //////////////////////////

        //menu_unit_for_update - zdanie iz kotorogo ishodit upgrade;
        if (player.selectBuildings.length) {
          dop_ok = false;
        }

        //////////////////////////

        /*	
	towerOnUpgrade.upgradeTimer=500;	
towerOnUpgrade.upgrade=towerOnUpgrade.iBee;	

this.unterTowers.splice(this.unterTowers.indexOf(towerOnUpgrade),1);
	
if(this.activeBuildings.indexOf(towerOnUpgrade)===-1){this.activeBuildings.push(towerOnUpgrade);};	
	
this.gold-=500;
this.wood-=200;
*/

        if (cell.doo && menu_unit_for_update.unitStatus !== "life") {
          if (cell.name !== "guard" && cell.name !== "cannon") {
            menu_unit_for_update.myJoube = cell.doo[0];
            menu_unit_for_update.myJoubeTimer = cell.doo[1];

            if (
              menu_unit_for_update.fatherFraction.activeBuildings.indexOf(
                menu_unit_for_update
              ) === -1
            ) {
              menu_unit_for_update.fatherFraction.activeBuildings.push(
                menu_unit_for_update
              );
            }

            menu_unit_for_update.fatherFraction.gold -= cell.gold;
            menu_unit_for_update.fatherFraction.wood -= cell.wood;
            menu_unit_for_update.fatherFraction.oil -= cell.oil;
          } else {
            // TOWER

            menu_unit_for_update.upgrade = cell.doo[0];
            menu_unit_for_update.myJoube = "towerOnUpgrade";
            menu_unit_for_update.upgradeTimer = cell.doo[1];
            //menu_unit_for_update.myJoubeTimer=cell.doo[1];
            menu_unit_for_update.iBee = cell.doo[0];

            if (
              menu_unit_for_update.fatherFraction.activeBuildings.indexOf(
                menu_unit_for_update
              ) === -1
            ) {
              menu_unit_for_update.fatherFraction.activeBuildings.push(
                menu_unit_for_update
              );
            }

            menu_unit_for_update.fatherFraction.gold -= cell.gold;
            menu_unit_for_update.fatherFraction.wood -= cell.wood;
            menu_unit_for_update.fatherFraction.oil -= cell.oil;
          }
        }

        if (cell.name === "hold_stop groop") {
          let voice;

          for (let i = 0; i < all_units.length; i++) {
            all_units[i].hold_position = false;

            if (!all_units[i].voice && !voice) {
              voice = true;
              all_units[i].voice = true;

              select_sound(all_units[i], "go_sound");
            }
          }
        } else if (cell.name === "hold groop") {
          let voice;

          for (let i = 0; i < all_units.length; i++) {
            all_units[i].hold_position = 1;
            all_units[i].handTarget = 0;

            if (!all_units[i].voice && !voice) {
              voice = true;
              all_units[i].voice = true;

              select_sound(all_units[i], "go_sound");
            }
          }
        } else if (cell.name === "passagers out") {
          menu_unit_for_update.passagers_out = true;

          if (!menu_unit_for_update.active) {
            menu_unit_for_update.fatherFraction.activeUnits.push(
              menu_unit_for_update
            );
            menu_unit_for_update.active = true;
          }
        } else if (cell.name === "get oil") {
          menu_unit_for_update.clickSave = new ClickSave(
            menu_unit_for_update.fatherFraction.oil_Refs[0],
            0
          );

          if (!menu_unit_for_update.active) {
            menu_unit_for_update.fatherFraction.activeUnits.push(
              menu_unit_for_update
            );
            menu_unit_for_update.active = true;
          }
        } else if (
          cell.name === "tor" ||
          cell.name === "z" ||
          cell.name === "nar" ||
          cell.name === "cure" ||
          cell.name === "rage"
        ) {
          //	menu_unit_for_update.goGroop=150;
          //*/
          //shablon[i][k].stopGetTarget=50;

          menu_unit_for_update.magick = cell.name;

          y_n_magick = menu_unit_for_update;
        } else if (cell.name === "hold_stop") {
          //	menu_unit_for_update.goGroop=150;
          //*/
          //shablon[i][k].stopGetTarget=50;

          menu_unit_for_update.hold_position = false; //globalTimer;

          if (!menu_unit_for_update.voice) {
            menu_unit_for_update.voice = true;

            select_sound(menu_unit_for_update, "go_sound");
          }
        } else if (cell.name === "hold") {
          //	menu_unit_for_update.goGroop=150;
          //*/
          //shablon[i][k].stopGetTarget=50;

          menu_unit_for_update.hold_position = 1; //globalTimer;
          menu_unit_for_update.handTarget = 0;

          if (!menu_unit_for_update.voice) {
            menu_unit_for_update.voice = true;

            select_sound(menu_unit_for_update, "go_sound");
          }
        } else if (cell.name === "dopAttack") {
          menu_unit_for_update.fatherFraction.myJoube_fou = cell.name;
          menu_unit_for_update.fatherFraction.myJoubeTimer_fou = myJoube_time(
            menu_unit_for_update.fatherFraction.myJoube_fou
          );

          menu_unit_for_update.myJoubeTimer =
            menu_unit_for_update.fatherFraction.myJoubeTimer_fou;
          menu_unit_for_update.fatherFraction.myJoube_face_animY_fou =
            cell.face_animY; ///  !!!!!!!!!!!!!

          menu_unit_for_update.fatherFraction.gold -= cell.gold;
          menu_unit_for_update.fatherFraction.wood -= cell.wood;
          menu_unit_for_update.fatherFraction.oil -= cell.oil;
        } else if (
          cell.name === "dopNoFlyAttack_level" ||
          cell.name === "dopNoFlyPanzer_level" ||
          cell.name === "dopBallista"
        ) {
          menu_unit_for_update.fatherFraction.myJoube_kuz = cell.name;
          menu_unit_for_update.fatherFraction.myJoubeTimer_kuz = myJoube_time(
            menu_unit_for_update.fatherFraction.myJoube_kuz
          );

          menu_unit_for_update.myJoubeTimer =
            menu_unit_for_update.fatherFraction.myJoubeTimer_kuz;
          menu_unit_for_update.fatherFraction.myJoube_face_animY_kuz =
            cell.face_animY; ///  !!!!!!!!!!!!!

          menu_unit_for_update.fatherFraction.gold -= cell.gold;
          menu_unit_for_update.fatherFraction.wood -= cell.wood;
          menu_unit_for_update.fatherFraction.oil -= cell.oil;
        } else if (cell.name === "levelUpgrade") {
          menu_unit_for_update.myJoube = "levelUpgrade";
          menu_unit_for_update.myJoubeTimer = myJoube_time("levelUpgrade");

          if (
            menu_unit_for_update.fatherFraction.activeBuildings.indexOf(
              menu_unit_for_update
            ) === -1
          ) {
            menu_unit_for_update.fatherFraction.activeBuildings.push(
              menu_unit_for_update
            );
          }

          //menu_unit_for_update.fatherFraction.gold-=400;

          menu_unit_for_update.fatherFraction.gold -= cell.gold;
          menu_unit_for_update.fatherFraction.wood -= cell.wood;
          menu_unit_for_update.fatherFraction.oil -= cell.oil;
        } else if (cell.name === "dopFlySee_level") {
          menu_unit_for_update.fatherFraction.myJoube_leso = "dopFlySee_level";
          menu_unit_for_update.fatherFraction.myJoubeTimer_leso = myJoube_time(
            menu_unit_for_update.fatherFraction.myJoube_leso
          );

          menu_unit_for_update.myJoubeTimer =
            menu_unit_for_update.fatherFraction.myJoubeTimer_leso;
          menu_unit_for_update.fatherFraction.myJoube_face_animY_leso =
            cell.face_animY; ///  !!!!!!!!!!!!!

          menu_unit_for_update.fatherFraction.gold -= cell.gold;
          menu_unit_for_update.fatherFraction.wood -= cell.wood;
          menu_unit_for_update.fatherFraction.oil -= cell.oil;
        } else if (cell.name === "dopFlyAttack_level") {
          menu_unit_for_update.fatherFraction.myJoube_leso =
            "dopFlyAttack_level";
          menu_unit_for_update.fatherFraction.myJoubeTimer_leso = myJoube_time(
            menu_unit_for_update.fatherFraction.myJoube_leso
          );

          menu_unit_for_update.myJoubeTimer =
            menu_unit_for_update.fatherFraction.myJoubeTimer_leso;
          menu_unit_for_update.fatherFraction.myJoube_face_animY_leso =
            cell.face_animY; ///  !!!!!!!!!!!!!

          menu_unit_for_update.fatherFraction.gold -= cell.gold;
          menu_unit_for_update.fatherFraction.wood -= cell.wood;
          menu_unit_for_update.fatherFraction.oil -= cell.oil;
        } else if (cell.name === "batrak") {
          menu_unit_for_update.myJoube = "batrak";
          menu_unit_for_update.myJoubeTimer = myJoube_time("batrak");

          if (
            menu_unit_for_update.fatherFraction.activeBuildings.indexOf(
              menu_unit_for_update
            ) === -1
          ) {
            menu_unit_for_update.fatherFraction.activeBuildings.push(
              menu_unit_for_update
            );
          }

          menu_unit_for_update.fatherFraction.gold -= 400;
        } else if (cell.name === "wood") {
          if (!menu_unit_for_update.voice) {
            menu_unit_for_update.voice = true;

            select_sound(menu_unit_for_update, "go_sound");
          }

          let target = allContinents[menu_unit_for_update.cell.continent].woods;

          if (!target) {
            target = menu_unit_for_update.fatherFraction.townHolls;
          }

          if (!target) {
            target = menu_unit_for_update.fatherFraction.lesopilkas;
          }

          let obj = getMinDistanse(menu_unit_for_update, target);

          //console.log(obj);

          menu_unit_for_update.clickSave = new ClickSave(obj, 0);

          if (!menu_unit_for_update.active) {
            menu_unit_for_update.fatherFraction.activeUnits.push(
              menu_unit_for_update
            );
            menu_unit_for_update.active = true;
          }

          //return;
        } else if (cell.name === "gold") {
          if (!menu_unit_for_update.voice) {
            menu_unit_for_update.voice = true;

            select_sound(menu_unit_for_update, "go_sound");
          }

          let target =
            allContinents[menu_unit_for_update.cell.continent].shahts;

          if (!target) {
            target = menu_unit_for_update.fatherFraction.townHolls;
          }

          let obj = getMinDistanse(menu_unit_for_update, target);

          //console.log(obj);

          menu_unit_for_update.clickSave = new ClickSave(obj, 0);

          if (!menu_unit_for_update.active) {
            menu_unit_for_update.fatherFraction.activeUnits.push(
              menu_unit_for_update
            );
            menu_unit_for_update.active = true;
          }

          //return;
        } else if (cell.name === "out") {
          if (
            menu_unit_for_update.type === 1 ||
            menu_unit_for_update.type === "oil_tanker"
          ) {
            player_pro_building = false;

            unit_dop_menu[24].can = false;
            //unit_dop_menu[24].face_animY=900;
            unit_dop_menu[24].resurs = false;
            unit_dop_menu[24].name = false;
          } else if (
            menu_unit_for_update.type === "mag" ||
            menu_unit_for_update.type === "rizar"
          ) {
            menu_unit_for_update.magick = false;
            y_n_magick = false;
          }

          //return;
        } else {
          unit_dop_menu[24].can = true;
          unit_dop_menu[24].face_animY = 900;
          unit_dop_menu[24].resurs = true;
          unit_dop_menu[24].name = "out";
          unit_dop_menu[24].menu_name = "Stop build";

          let vertikal = Math.floor(obj.y / 50);
          let horizont = Math.floor(obj.x / 50);

          let type = cell.name;

          if (cell.name === "townHoll") {
            type = 2;
          } else if (cell.name === "farm") {
            type = 3;
          } else if (cell.name === "lesopilka") {
            type = 4;
          } else if (cell.name === "barack") {
            type = 5;
          }

          player_pro_building = new LandObj(
            type,
            horizont,
            vertikal,
            0,
            menu_unit_for_update.fatherFraction
          );

          console.log(player_pro_building.unitName);
        }
      }
    }
  }

  return active_cell;
};

//menu_unit_for_update ctx player_groop_prog

const unit_menu_draw = function () {
  //stop peon menu_litera stop

  ctx.lineWidth = 1;
  ctx2.lineWidth = 1;
  ctx3.lineWidth = 1;

  all_units = player.selectBuildings.concat(player.selectUnits);

  all_units = all_units.concat(player.selectDragons);

  all_units = all_units.concat(player.selectIsSweem);

  let unit;

  if (all_units.length === 1) {
    unit = all_units[0];
  } else {
    if (!all_units_start) {
      for (let i = 0; i < all_units.length; i++) {
        if (!all_units[i].voice) {
          all_units[i].voice = true;

          select_sound(all_units[i], "select_sound");

          break;
        }
      }
    }

    //for(let i=0;i<all_units.length;i++){

    //let unit=all_units[i];

    player_groop_prog(all_units);
    //console.log("here")
    //};

    all_units_start = true;

    return;
  }

  //if(unit.myJoubeTimer){dop_ok=false;}; compile

  /*
let unit=player.selectUnits[0];
	
if(player.selectBuildings.length){
	unit=player.selectBuildings[0];
};
*/

  if (unit) {
    if (!player.menu_unit) {
      let click = { unit: unit, timer: 100 };

      click_click.push(click);

      if (click_click.length >= 3) {
        let ok = 0;

        for (let i = 0; i < click_click.length; i++) {
          let c = click_click[i];

          if (c.unit.persolalNumber === unit.persolalNumber) {
            ok++;
          } else {
            break;
          }
        }

        if (ok === click_click.length) {
          if (!unit.voice) {
            select_sound(unit, "click_click");
            unit.voice = true;
          }
        }
      }

      if (!unit.voice) {
        unit.voice = true;

        select_sound(unit, "select_sound");
      }

      if (unit.unitStatus === "life") {
        //console.log("ok");

        player.menu_unit = unit;
        player.menu_unit.list = 1;
        //console.log("start_menu_peon");
      } else {
        player.menu_unit = unit;
        player.menu_unit.list = 2;

        //console.log(unit.list)
      }
    }

    //console.log(unit.list);

    //player.menu_unit=unit;

    if (unit.dop_menu && unit.iComplite && !unit.myJoubeTimer) {
      menu_unit_for_update = unit;

      let active_cell = unit_dop_menu_control();

      in_unit_menu = unit;

      ///*

      let ok;

      for (let i = 0; i < unit_dop_menu.length; i++) {
        let obj = unit_dop_menu[i];

        if (obj.can) {
          ok = true;
          break;
        }
      }

      if (ok && unit.list === 2) {
        ctx3.globalAlpha = 0.5;

        ctx3.fillStyle = "black";
        ctx3.fillRect(725, 485, 150, 150);

        ctx3.globalAlpha = 1;

        //*/

        for (let i = 0; i < unit_dop_menu.length; i++) {
          let obj = unit_dop_menu[i];

          if (!obj.active && obj.can) {
            ctx3.drawImage(
              unit_m,
              0,
              obj.face_animY,
              100,
              100,
              obj.x - obj.gabarit / 2,
              obj.y - obj.gabarit / 2,
              obj.gabarit,
              obj.gabarit
            );

            if (!obj.resurs) {
              ctx3.globalAlpha = 0.5;
              ctx3.fillStyle = "blue";
              ctx3.fillRect(
                obj.x - obj.gabarit / 2,
                obj.y - obj.gabarit / 2,
                obj.gabarit,
                obj.gabarit
              );
              ctx3.globalAlpha = 1;
            }
          }
        }
      }

      if (active_cell) {
        ctx3.drawImage(
          unit_m,
          0,
          active_cell.face_animY,
          100,
          100,
          active_cell.x - active_cell.gabarit / 2,
          active_cell.y - active_cell.gabarit / 2,
          active_cell.gabarit,
          active_cell.gabarit
        );

        if (!active_cell.resurs) {
          ctx3.globalAlpha = 0.5;
          ctx3.fillStyle = "blue";
          ctx3.fillRect(
            active_cell.x - active_cell.gabarit / 2,
            active_cell.y - active_cell.gabarit / 2,
            active_cell.gabarit,
            active_cell.gabarit
          );
          ctx3.globalAlpha = 1;
        } else {
          ctx3.strokeStyle = "red";
          ctx3.strokeRect(
            active_cell.x - active_cell.gabarit / 2,
            active_cell.y - active_cell.gabarit / 2,
            active_cell.gabarit,
            active_cell.gabarit
          );
        }
      }
    }

    let face_animY = unit.face_animY;

    ctx3.drawImage(unit_m, 0, face_animY, 100, 100, 750, 250, 100, 100);

    for (let i = 0; i < unit.menu_name.length; i++) {
      let imageToDraw = unit_menu_little_liters;

      let kor = 0;

      //if(!i){imageToDraw=unit_menu_hi_liters; kor=-2;};

      let x = 800 - (unit.menu_name.length * 10) / 2;

      ctx.drawImage(
        imageToDraw,
        menu_litera(unit.menu_name[i]),
        0,
        12,
        12,
        x + i * 10,
        222 + kor,
        13,
        25
      );
    }

    let i_1;
    let i_2;
    let i_3;
    let i_4;
    let i_5;
    let i_6;
    let i_7;
    let i_8;

    let center = false;

    if (unit.unitStatus === "building") {
      if (!unit.iComplite) {
        //ctx.lineWidth=2;

        if (mig_vector2) {
          mig2 += 0.02;
        } else {
          mig2 -= 0.02;
        }

        if (mig2 >= 0.9) {
          mig_vector2 = 0;
        }
        if (mig2 <= 0.4) {
          mig_vector2 = 1;
        }

        ctx3.globalAlpha = mig2;
        ctx3.drawImage(unit_m, 0, 1900, 100, 100, 785, 405, 30, 30);
        ctx3.globalAlpha = 1;

        center = true;

        i_1 =
          "Complite:" +
          Math.floor(String(unit.buildready)) +
          "/" +
          String(unit.hpfull);

        let l = (unit.buildready * 100) / unit.hpfull;

        let ll = (180 * l) / 100;

        ctx.fillStyle = "green";
        ctx.fillRect(710, 385, ll, 10);

        ctx.strokeStyle = "red";
        ctx.strokeRect(710, 385, 180, 10);
      } else {
        center = true;

        i_1 = "Hp:" + Math.floor(String(unit.hp)) + "/" + String(unit.hpfull);

        if (!unit.neitral) {
          i_4 = "Level:" + String(unit.level);

          let l = (unit.hp * 100) / unit.hpfull;

          let ll = (180 * l) / 100;

          ctx.fillStyle = "green";
          ctx.fillRect(710, 385, ll, 10);

          ctx.strokeStyle = "red";
          ctx.strokeRect(710, 385, 180, 10);

          let myJoube_face_animY;

          /////////////////////////////////////////

          myJoube_face_animY = player.menu_unit.myJoube_face_animY;

          if (unit.unitName === "lesopilka") {
            unit.myJoubeTimer = unit.fatherFraction.myJoubeTimer_leso;
            unit.myJoube = unit.fatherFraction.myJoube_leso;

            myJoube_face_animY = player.myJoube_face_animY_leso;
          } else if (unit.unitName === "kuznya") {
            unit.myJoubeTimer = unit.fatherFraction.myJoubeTimer_kuz;
            unit.myJoube = unit.fatherFraction.myJoube_kuz;

            myJoube_face_animY = player.myJoube_face_animY_kuz;
          } else if (unit.unitName === "foundry") {
            unit.myJoubeTimer = unit.fatherFraction.myJoubeTimer_fou;
            unit.myJoube = unit.fatherFraction.myJoube_fou;

            myJoube_face_animY = player.myJoube_face_animY_fou;
          }

          ////////////////////////////////////////////////

          if (unit.myJoubeTimer) {
            //150

            //console.log(unit.myJoube)

            let time = myJoube_time(unit.myJoube);

            let pr = time - unit.myJoubeTimer;

            //console.log(unit.fatherFraction.myJoubeTimer_leso);

            //let l=(unit.myJoubeTimer*100)/myJoube_time(unit.myJoube);
            let l = (pr * 100) / time;

            let ll = (150 * l) / 100;

            //myJoube_face_animY

            i_8 = "Complite";

            ctx3.drawImage(
              unit_m,
              0,
              myJoube_face_animY,
              100,
              100,
              708,
              458,
              30,
              30
            );

            //pausa=1

            center = true;

            ctx.fillStyle = "blue";
            ctx.fillRect(740, 462, ll, 20);

            ctx.strokeStyle = "red";
            ctx.strokeRect(740, 462, 150, 20);
          }
        }
      }

      if (unit.unitName === "tower" && unit.iBee && !unit.upgradeTimer) {
        i_4 = "Damage:" + String(unit.attack);
        i_5 = "Range:" + String(unit.seeing);
        center = true;
      }

      if (unit.unitName === "oil") {
        i_1 = "Oil:" + String(unit.oil);
      }

      if (unit.unitName === "oil_platform") {
        i_6 = "Oil:" + String(unit.cell.oil.oil);
      }

      if (unit.unitName === "shahta") {
        i_1 = "Gold:" + String(unit.gold);
      }
      //console.log("gold : "+String(unit.gold))
    } else {
      //list_1_y

      i_1 = "Level:" + String(unit.level);
      i_2 = "Hp:" + Math.floor(String(unit.hp)) + "/" + String(unit.hpfull); //"level:"+String(unit.level);

      //if(!unit.basePanzer||!unit.panzer||!unit.fatherFraction.dopNoFlyPanzer){
      i_3 = "Armor:" + Math.floor(String(unit.panzer));

      i_4 = "Damage:" + String(unit.baseAttack);
      //}
      //else{
      //	i_3="armor:"+String(unit.basePanzer)+"+"+String(unit.panzer-unit.basePanzer);
      //};

      //dopFlySee

      i_5 = "Range:" + String(unit.seeing);
      i_6 = "Sight:" + String(unit.dash);
      i_7 = "Speed:" + String(unit.speed);
      i_8 = "Spell:" + Math.floor(String(unit.mana));

      if (
        unit.type === "turtle" ||
        unit.type === "linkor" ||
        unit.type === "distroer"
      ) {
        if (unit.fatherFraction.dopAttack > 1) {
          i_4 =
            "Damage:" +
            String(unit.baseAttack) +
            "+" +
            Math.round(
              String(
                unit.baseAttack * unit.fatherFraction.dopAttack -
                  unit.baseAttack
              )
            );
        }
      } else if (unit.type === 3) {
        if (unit.fatherFraction.dopFlyAttack > 1) {
          i_4 =
            "Damage:" +
            String(unit.baseAttack) +
            "+" +
            Math.round(
              String(
                unit.baseAttack * unit.fatherFraction.dopFlyAttack -
                  unit.baseAttack
              )
            );
        }

        if (unit.fatherFraction.dopFlySee > 0) {
          i_5 =
            "Range:" +
            String(unit.baseSeeing) +
            "+" +
            String(unit.fatherFraction.dopFlySee);
        }
      } else if (unit.type === 2 || unit.type === "rizar") {
        if (unit.fatherFraction.dopNoFlyPanzer > 1) {
          i_3 =
            "Armor:" +
            String(unit.basePanzer) +
            "+" +
            Math.round(
              String(
                unit.basePanzer * unit.fatherFraction.dopNoFlyPanzer -
                  unit.basePanzer
              )
            );
        }

        if (unit.fatherFraction.dopNoFlyAttack > 1) {
          i_4 =
            "Damage:" +
            String(unit.baseAttack) +
            "+" +
            Math.round(
              String(
                unit.baseAttack * unit.fatherFraction.dopNoFlyAttack -
                  unit.baseAttack
              )
            );
        }
      } else if (unit.type === "ballista") {
        if (unit.fatherFraction.dopBallista > 1) {
          i_4 =
            "Damage:" +
            String(unit.baseAttack) +
            "+" +
            Math.round(
              String(
                unit.baseAttack * unit.fatherFraction.dopBallista -
                  unit.baseAttack
              )
            );
        }
      } else if (!unit.warrior) {
        i_4 = "Damage:" + String(0);
      }

      //	unit.attack=unit.baseAttack*this.dopNoFlyAttack;
      //unit.panzer=unit.basePanzer*this.dopNoFlyPanzer;
    }

    //console.log(player.menu_unit.cell_name);

    if (player.menu_unit.cell_name) {
      let i_0 = player.menu_unit.cell_name;

      for (let i = 0; i < i_0.length; i++) {
        let obj = i_0[i];

        let imageToDraw = unit_menu_little_liters;

        //imageToDraw=unit_menu_hi_liters;

        let x = 800 - (i_0.length * 10) / 2;

        ctx3.drawImage(
          imageToDraw,
          menu_litera(obj),
          0,
          12,
          12,
          x + i * 10,
          440,
          13,
          13
        );
      }

      if (player.menu_unit.cell_name_2) {
        let i_0 = player.menu_unit.cell_name_2;

        for (let i = 0; i < i_0.length; i++) {
          let obj = i_0[i];

          let imageToDraw = unit_menu_little_liters;

          //imageToDraw=unit_menu_hi_liters;

          let x = 800 - (i_0.length * 10) / 2;

          ctx3.drawImage(
            imageToDraw,
            menu_litera(obj),
            0,
            12,
            12,
            x + i * 10,
            460,
            13,
            13
          );
        }
      }
    }

    player.menu_unit.cell_name = false;

    if (unit.list === 2 && unit.unitStatus === "life") {
      center = true;

      //////////////////////////////////////////////////////////////////

      if (unit.passagers && unit.passagers.length) {
        let k_1 = "Passagers : ";

        for (let i = 0; i < k_1.length; i++) {
          let obj = k_1[i];

          let imageToDraw = unit_menu_little_liters;

          let kor = 0;

          //if(!i){imageToDraw=unit_menu_hi_liters; kor=-2;};

          let x = 800 - (k_1.length * 10) / 2;

          ctx3.drawImage(
            imageToDraw,
            menu_litera(obj),
            0,
            12,
            12,
            x + i * 10,
            640,
            13,
            13
          );
        }

        for (let i = 0; i < unit.passagers.length; i++) {
          let obj = unit.passagers[i];

          let x = 800 - (unit.passagers.length * 20) / 2;

          ctx3.drawImage(
            unit_m,
            0,
            obj.face_animY,
            100,
            100,
            x + i * 20,
            663,
            20,
            25
          );
        }
      }
    }

    if (i_1) {
      for (let i = 0; i < i_1.length; i++) {
        let obj = i_1[i];

        let imageToDraw = unit_menu_little_liters;

        let kor = 0;

        //if(!i){imageToDraw=unit_menu_hi_liters; kor=-2;};

        let x = 740; //800-((i_1.length*10))/2;

        if (center) {
          x = 800 - (i_1.length * 10) / 2;
        }

        ctx3.drawImage(
          imageToDraw,
          menu_litera(obj),
          0,
          12,
          12,
          x + i * 10,
          360 + kor,
          13,
          13
        );
      }
    }

    if (i_2) {
      ctx3.globalAlpha = 0.5;
      ctx3.strokeStyle = "yellow";
      ctx3.strokeRect(720, 379, 159, 5);

      let l = hp_graf(159, player.menu_unit.hp, player.menu_unit.hpfull);

      ctx3.fillStyle = l.color;
      ctx3.fillRect(720, 379, l.gabarit, 5);
      ctx3.globalAlpha = 1;

      for (let i = 0; i < i_2.length; i++) {
        let obj = i_2[i];

        let imageToDraw = unit_menu_little_liters;

        let kor = 0;

        //if(!i){imageToDraw=unit_menu_hi_liters; kor=-2;};

        let x = 770; //800-((i_2.length*10))/2;

        if (center) {
          x = 800 - (i_2.length * 10) / 2;
        }

        ctx3.drawImage(
          imageToDraw,
          menu_litera(obj),
          0,
          12,
          12,
          x + i * 10,
          375 + kor,
          13,
          13
        );
      }
    }

    if (
      (unit.list === 1 && unit.unitStatus === "life") ||
      (unit.list === 2 && unit.unitStatus !== "life")
    ) {
      if (i_3) {
        for (let i = 0; i < i_3.length; i++) {
          let obj = i_3[i];

          let imageToDraw = unit_menu_little_liters;

          let kor = 0;

          //if(!i){imageToDraw=unit_menu_hi_liters; kor=-2;};

          let x = 740; //800-((i_3.length*10))/2;

          if (center) {
            x = 800 - (i_3.length * 10) / 2;
          }

          ctx3.drawImage(
            imageToDraw,
            menu_litera(obj),
            0,
            12,
            12,
            x + i * 10,
            390 + kor,
            13,
            13
          );
        }
      }

      if (i_4) {
        for (let i = 0; i < i_4.length; i++) {
          let obj = i_4[i];

          let imageToDraw = unit_menu_little_liters;

          let kor = 0;

          //if(!i){imageToDraw=unit_menu_hi_liters; kor=-2;};

          let x = 730; //800-((i_4.length*10))/2;

          //console.log(center)

          if (center) {
            x = 800 - (i_4.length * 10) / 2;
          }

          ctx3.drawImage(
            imageToDraw,
            menu_litera(obj),
            0,
            12,
            12,
            x + i * 10,
            405 + kor,
            13,
            13
          );
        }
      }

      if (i_5) {
        for (let i = 0; i < i_5.length; i++) {
          let obj = i_5[i];

          let imageToDraw = unit_menu_little_liters;

          let kor = 0;

          //if(!i){imageToDraw=unit_menu_hi_liters; kor=-2;};

          let x = 740; //800-((i_5.length*10))/2

          if (center) {
            x = 800 - (i_5.length * 10) / 2;
          }

          ctx3.drawImage(
            imageToDraw,
            menu_litera(obj),
            0,
            12,
            12,
            x + i * 10,
            420 + kor,
            13,
            13
          );
        }
      }

      if (i_6) {
        for (let i = 0; i < i_6.length; i++) {
          let obj = i_6[i];

          let imageToDraw = unit_menu_little_liters;

          let kor = 0;

          //if(!i){imageToDraw=unit_menu_hi_liters; kor=-2;};

          let x = 740; //800-((i_6.length*10))/2;

          if (center) {
            x = 800 - (i_6.length * 10) / 2;
          }

          ctx3.drawImage(
            imageToDraw,
            menu_litera(obj),
            0,
            12,
            12,
            x + i * 10,
            435 + kor,
            13,
            13
          );
        }
      }

      if (i_7) {
        for (let i = 0; i < i_7.length; i++) {
          let obj = i_7[i];

          let imageToDraw = unit_menu_little_liters;

          let kor = 0;

          //if(!i){imageToDraw=unit_menu_hi_liters; kor=-2;};

          let x = 740; //800-((i_7.length*10))/2;

          if (center) {
            x = 800 - (i_7.length * 10) / 2;
          }

          ctx3.drawImage(
            imageToDraw,
            menu_litera(obj),
            0,
            12,
            12,
            x + i * 10,
            450 + kor,
            13,
            13
          );
        }
      }

      if (i_8) {
        if (player.menu_unit.mana) {
          ctx3.globalAlpha = 0.5;
          ctx3.strokeStyle = "blue";
          ctx3.strokeRect(720, 468, 159, 5);

          let l = hp_graf(159, player.menu_unit.mana, 100);

          ctx3.fillStyle = "blue";
          ctx3.fillRect(720, 468, l.gabarit, 5);
          ctx3.globalAlpha = 1;
        }

        for (let i = 0; i < i_8.length; i++) {
          let obj = i_8[i];

          let imageToDraw = unit_menu_little_liters;

          let kor = 0;

          //if(!i){imageToDraw=unit_menu_hi_liters; kor=-2;};

          let x = 740; //800-((i_8.length*10))/2;

          if (center) {
            x = 800 - (i_8.length * 10) / 2;
          }

          ctx3.drawImage(
            imageToDraw,
            menu_litera(obj),
            0,
            12,
            12,
            x + i * 10,
            465 + kor,
            13,
            13
          );
        }
      }
    }

    if (unit.list === 1 && unit.unitStatus === "life" && unit.list_1_y) {
      let x = 770;
      let y = 550;
      let gabarit = 60;

      ctx3.drawImage(
        unit_m,
        0,
        unit.list_1_y,
        100,
        100,
        x,
        y,
        gabarit,
        gabarit
      );

      if (obj.x > 700 && !pausa) {
        if (
          obj.x <= x + gabarit &&
          obj.x >= x &&
          obj.y <= y + gabarit &&
          obj.y >= y
        ) {
          ctx3.strokeStyle = "red";
          ctx3.strokeRect(x, y, gabarit, gabarit);

          if (menu_click) {
            menu_click = false;
            unit.list = 2;
          }
        }
      }

      //list_1_stop_y

      if (
        unit.list === 1 &&
        unit.unitName === "peon" &&
        unit.way.length &&
        !unit.iGetTarget
      ) {
        let x = 770;
        let y = 615;
        let gabarit = 60;

        ctx3.drawImage(
          unit_m,
          0,
          unit.list_1_stop_y,
          100,
          100,
          x,
          y,
          gabarit,
          gabarit
        );

        if (obj.x > 700) {
          if (
            !pausa &&
            obj.x <= x + gabarit &&
            obj.x >= x &&
            obj.y <= y + gabarit &&
            obj.y >= y
          ) {
            ctx3.strokeStyle = "red";
            ctx3.strokeRect(x, y, gabarit, gabarit);

            if (menu_click) {
              menu_click = false;

              unit.way = [];
              unit.clickSave = false;
              unit.target = 0;
            }
          }
        }
      }
    }

    if (dop_ok && !unit.myJoubeTimer) {
      //console.log("ok");

      if (unit.type === "mag" || unit.type === "rizar") {
        ////////////////////////////////////////////////////////////////////	mana
        //ctx3.drawImage(unit_m,0,1300,100,100,760,640,20,10);

        let lit = "Spell:" + Math.floor(String(unit.mana)) + "/" + String(100);

        for (let i = 0; i < lit.length; i++) {
          ctx3.drawImage(
            unit_menu_little_liters,
            menu_litera(lit[i]),
            0,
            12,
            12,
            750 + i * 10,
            640,
            13,
            13
          );
        }

        if (unit.mana < 100) {
          ctx3.drawImage(unit_m, 0, 1800, 100, 100, 730, 640, 20, 10);
        } else {
          ctx3.drawImage(unit_m, 0, 1700, 100, 100, 730, 640, 20, 10);
        }

        ///////////////////////////////////////////////////////////////////////

        return;
      }

      ////////////////////////////////////////////////////////////////////	golg
      ctx3.drawImage(unit_m, 0, 1300, 100, 100, 760, 640, 20, 10);

      lit = ": " + String(dop_ok.gold);

      for (let i = 0; i < lit.length; i++) {
        ctx3.drawImage(
          unit_menu_little_liters,
          menu_litera(lit[i]),
          0,
          12,
          12,
          790 + i * 10,
          640,
          13,
          13
        );
      }

      if (unit.fatherFraction.gold < dop_ok.gold) {
        ctx3.drawImage(unit_m, 0, 1800, 100, 100, 730, 640, 20, 10);
      } else {
        ctx3.drawImage(unit_m, 0, 1700, 100, 100, 730, 640, 20, 10);
      }

      ///////////////////////////////////////////////////////////////////////

      //////////////////////////////////////// wood

      ctx3.drawImage(unit_m, 0, 1400, 100, 100, 760, 653, 20, 10);

      lit = ": " + String(dop_ok.wood);

      for (let i = 0; i < lit.length; i++) {
        ctx3.drawImage(
          unit_menu_little_liters,
          menu_litera(lit[i]),
          0,
          12,
          12,
          790 + i * 10,
          653,
          13,
          13
        );
      }

      if (unit.fatherFraction.wood < dop_ok.wood) {
        ctx3.drawImage(unit_m, 0, 1800, 100, 100, 730, 653, 20, 10);
      } else {
        ctx3.drawImage(unit_m, 0, 1700, 100, 100, 730, 653, 20, 10);
      }

      ////////////////////////////////////////////////////////////

      ////////////////////////////////////////////////////////////  oil

      ctx3.drawImage(unit_m, 0, 1500, 100, 100, 760, 666, 20, 10);

      lit = ": " + String(dop_ok.oil);

      for (let i = 0; i < lit.length; i++) {
        ctx3.drawImage(
          unit_menu_little_liters,
          menu_litera(lit[i]),
          0,
          12,
          12,
          790 + i * 10,
          666,
          13,
          13
        );
      }

      if (unit.fatherFraction.oil < dop_ok.oil) {
        ctx3.drawImage(unit_m, 0, 1800, 100, 100, 730, 666, 20, 10);
      } else {
        ctx3.drawImage(unit_m, 0, 1700, 100, 100, 730, 666, 20, 10);
      }

      //////////////////////////////////////////////////////////////

      ////////////////////////////////////////////////////////////  food

      if (dop_ok.foot) {
        ctx3.drawImage(unit_m, 0, 1600, 100, 100, 760, 679, 20, 10);

        lit = ": " + String(dop_ok.foot);

        for (let i = 0; i < lit.length; i++) {
          ctx3.drawImage(
            unit_menu_little_liters,
            menu_litera(lit[i]),
            0,
            12,
            12,
            790 + i * 10,
            679,
            13,
            13
          );
        }

        if (
          unit.fatherFraction.maxUnits <= unit.fatherFraction.peoples.length
        ) {
          ctx3.drawImage(unit_m, 0, 1800, 100, 100, 730, 679, 20, 10);
        } else {
          ctx3.drawImage(unit_m, 0, 1700, 100, 100, 730, 679, 20, 10);
        }
      }

      //////////////////////////////////////////////////////////////

      if (dop_ok.farm) {
        ctx3.drawImage(unit_m, 0, 1300, 100, 100, 760, 679, 20, 10);
      }
    }
  } else {
  }
};

//unit_menu_draw

const unit_menu = function () {
  //create_unit_dop_menu unit_menu_draw

  if (player) {
    ctx3.globalAlpha = 0.8;
    ctx3.drawImage(pan, 0, 0, 500, 100, 45, 0, 600, 25);
    ctx3.globalAlpha = 1;

    let dop = 30;

    ctx3.drawImage(unit_m, 0, 1300, 100, 100, 70 + dop, 3, 20, 20);

    lit = ":" + String(player.gold);

    for (let i = 0; i < lit.length; i++) {
      ctx3.drawImage(
        unit_menu_little_liters,
        menu_litera(lit[i]),
        0,
        12,
        12,
        92 + dop + i * 10,
        6,
        15,
        15
      );
    }

    ctx3.drawImage(unit_m, 0, 1400, 100, 100, 210 + dop, 3, 20, 20);

    lit = ":" + String(player.wood);

    for (let i = 0; i < lit.length; i++) {
      ctx3.drawImage(
        unit_menu_little_liters,
        menu_litera(lit[i]),
        0,
        12,
        12,
        232 + dop + i * 10,
        6,
        15,
        15
      );
    }

    ctx3.drawImage(unit_m, 0, 1500, 100, 100, 350 + dop, 3, 20, 20);

    lit = ":" + String(player.oil);

    for (let i = 0; i < lit.length; i++) {
      ctx3.drawImage(
        unit_menu_little_liters,
        menu_litera(lit[i]),
        0,
        12,
        12,
        372 + dop + i * 10,
        6,
        15,
        15
      );
    }

    ctx3.drawImage(unit_m, 0, 1600, 100, 100, 490 + dop, 3, 20, 20);

    lit = ":" + String(player.peoples.length) + "/" + String(player.maxUnits);

    for (let i = 0; i < lit.length; i++) {
      ctx3.drawImage(
        unit_menu_little_liters,
        menu_litera(lit[i]),
        0,
        12,
        12,
        512 + dop + i * 10,
        6,
        15,
        15
      );
    }
  }

  if (
    (player && player.selectUnits.length && player.selectUnits[0].drawQuatro) ||
    (player &&
      player.selectBuildings.length &&
      player.selectBuildings[0].drawQuatro) ||
    (player &&
      player.selectDragons.length &&
      player.selectDragons[0].drawQuatro) ||
    (player &&
      player.selectIsSweem.length &&
      player.selectIsSweem[0].drawQuatro)
  ) {
    unit_menu_draw();
  } else {
    player.menu_unit = false;
    all_units_start = false;
  }
};

const infoGamePanel = function () {
  //if(obj.x>=700){document.body.style.cursor = 'crosshair';}else{document.body.style.cursor = 'none';};

  if (!drawPanel) {
    ctx.drawImage(panel, 0, 0, 200, 700, 700, 0, 200, 700);

    ctx.globalAlpha = 0.55;
    ctx.fillStyle = "black";
    ctx.fillRect(700, 0, 200, 700);
    ctx.globalAlpha = 1;

    ctx.drawImage(ramka, 0, 0, 800, 800, 715, 35, 170, 170);

    //drawPanel=true;
  }

  radar.draw();

  if (!crateZoonMouse.active && player) {
    for (let i = 0; i < player.selectUnits.length; i++) {
      player.selectUnits[i].drawQuatro = true;

      //player.selectUnits[i].infoAndControl(i);
    }

    for (let i = 0; i < player.selectBuildings.length; i++) {
      player.selectBuildings[i].drawQuatro = true;

      //player.selectUnits[i].infoAndControl(i);
    }

    for (let i = 0; i < player.selectIsSweem.length; i++) {
      player.selectIsSweem[i].drawQuatro = true;

      //player.selectUnits[i].infoAndControl(i);
    }

    for (let i = 0; i < player.selectDragons.length; i++) {
      player.selectDragons[i].drawQuatro = true;

      //player.selectUnits[i].infoAndControl(i);
    }
  } else if (crateZoonMouse.active && player) {
    for (let i = 0; i < player.selectIsSweem.length; i++) {
      player.selectIsSweem[i].drawQuatro = false;

      //player.selectUnits[i].infoAndControl(i);
    }

    for (let i = 0; i < player.selectDragons.length; i++) {
      player.selectDragons[i].drawQuatro = false;

      //player.selectUnits[i].infoAndControl(i);
    }

    for (let i = 0; i < player.selectBuildings.length; i++) {
      player.selectBuildings[i].drawQuatro = false;

      //player.selectUnits[i].infoAndControl(i);
    }
  }

  unit_menu();
};

$("body").keydown(function (event) {
  let kc = event.keyCode;

  if (kc === 32) {
    iLoockTo = 1;
  }

  if (kc === 13) {
    pausa = 0;
  }

  if (kc === 17) {
    mem_active = true;
  }

  mem_prog(kc);
  //console.log(kc)
});

$("body").keyup(function (event) {
  let kcUp = event.keyCode;

  if (kcUp === 32) {
    iLoockTo = 0;
  }

  if (kcUp === 17) {
    mem_active = false;
  }
});

//let un=fractions[0].peoples[0];

//let ddd=[];
//all_units

//760,11,80,20 start_game restart_map restart_map_prog
setInterval(function () {
  //console.log(start_game) groop_mem
  music_prog();

  if (exit_timer) {
    exit();
  }

  //console.log(title.active);

  ////////////////////////////////////////////////
  //onDrawTrups
  //console.log(axesFly.length);
  //getDragonsGroopPosition axesFly getActiveZone
  /////////////////////////////////
  if (timer_do_start) {
    timer_do_start--;
  }

  ///*

  ctx3.clearRect(0, 0, width, height);

  if (global_start) {
    if (title.active) {
      title.prog_draw();
    }

    if (!start_game) {
      //ctx3.clearRect(0,0,width,height);
      //ctx3.fillStyle="blue";
      //ctx3.fillRect(0,0,width,height);
    } else if (start_game) {
      //if(timer_do_start===99){console.log(allContinents);};

      game_music_control();

      //if(timer_do_start===100){

      if (!pausa) {
        mem_prog_load();
        click_to_iden_prog();

        in_pausa_menu_obj_in = [];

        //ctx3.clearRect(0,0,width,height);

        in_unit_menu = false;

        //ctx.fillStyle="blue";
        //ctx.fillRect(0,0,gameFielg.length*50,gameFielg.length*50);

        //console.log(father.finish);unit_menu_draw

        globalTimer++;

        if (globalTimer === 250) {
          globalTimer = 0;
        }

        //console.log(floorGlobalTimer);

        removeControl();

        if (player) {
          if (!globalTimer) {
            player.check_and();
          }

          getActiveZone();

          //console.log(player.selectIsSweem.length)

          for (let i = 0; i < player.selectBuildings.length; i++) {
            let obj = player.selectBuildings[i];

            if (!obj || !obj.cell || obj.hp <= 0) {
              player.selectBuildings.splice(i, 1);
            }
          }

          for (let i = 0; i < player.selectUnits.length; i++) {
            let obj = player.selectUnits[i];

            if (!obj || !obj.cell || obj.hp <= 0) {
              player.selectUnits.splice(i, 1);
            }
          }

          for (let i = 0; i < player.selectDragons.length; i++) {
            let obj = player.selectDragons[i];

            if (!obj || !obj.cell || obj.hp <= 0) {
              player.selectDragons.splice(i, 1);
            }
          }

          for (let i = 0; i < player.selectIsSweem.length; i++) {
            let obj = player.selectIsSweem[i];

            if (!obj || !obj.cell || obj.hp <= 0) {
              player.selectIsSweem.splice(i, 1);
            }
          }

          player.checkAlarms_player();
        }

        fly = [];

        fractionsControl();

        for (let i = 0; i < dragoonDamages.length; i++) {
          dragoonDamages[i].prog(dragoonDamages[i]);

          if (dragoonDamages[i].readyToOut) {
            dragoonDamages.splice(dragoonDamages.indexOf(dragoonDamages[i]), 1);
            i--;
          }
        }

        //console.log(dragoonDamages.length) onDrawTrups

        /*
for(let i=0;i<axesFly.length;i++){
	
axesFly[i].prog();	
	
};
*/

        if (activeFreeLandObjects.length) {
          activeFreeLandObjectsToProg();
        }

        onDraw = [];

        onDrawSpecial.length = 0;
        onDrawTrups.length = 0;

        centerDrawPoint.progCenterDrawPoint();

        for (let i = 0; i < od_grunt.length; i++) {
          for (let k = 0; k < od_grunt[i].length; k++) {
            od_grunt[i][k].draw2();
          }
        }

        /////////////////////////////////////////////////////// water_sleds !!!!!!!!!!!!!!!

        //console.log(water_sleds.length)

        for (let i = 0; i < water_sleds.length; i++) {
          if (water_sleds[i].readyToOut) {
            water_sleds.splice(i, 1);
            i--;
          } else {
            water_sleds[i].prog(water_sleds[i]);
          }
        }

        for (let i = 0; i < water_sleds_onDraw.length; i++) {
          water_sleds_onDraw[i].draw();
        }

        water_sleds_onDraw = [];
        //////////////////////////////////////////////////////////

        //console.log(waters.length)

        for (let i = 0; i < onDrawSpecial.length; i++) {
          onDrawSpecial[i].drawSpecial();
        }

        for (let i = 0; i < onDrawTrups.length; i++) {
          if (onDrawTrups[i].unitStatus === "building") {
            onDrawTrups[i].drawTrups();
          } else {
            onDrawTrups[i].drawUnit();

            //console.log("ok");
          }
        }

        for (let i = 0; i < od.length; i++) {
          for (let k = 0; k < od[i].length; k++) {
            if (od[i][k].drawUnit) {
              od[i][k].drawUnit();
            } else if (od[i][k].draw) {
              od[i][k].draw();
            } else if (od[i][k].drawDragDam) {
              od[i][k].drawDragDam();
            }
          }
        }

        //key=0;

        for (let i = 0; i < axesFly.length; i++) {
          axesFly[i].prog(axesFly[i]);

          //if(axesFly[i].type!=="tor"){
          axesFly[i].draw(axesFly[i]);
          //};

          if (axesFly[i].takt === 0 || axesFly[i].readyToOut) {
            axesFly.splice(i, 1);
            i--;
          }
        }

        //console.log(fly)

        for (let i = 0; i < fly.length; i++) {
          fly[i].drawFly();

          //if(axesFly[i].takt===0||axesFly[i].readyToOut){axesFly.splice(axesFly.indexOf(axesFly[i]),1);i--;};
        }

        if (player_pro_building) {
          player_pro_building.player_pro_draw();
        }

        cells_player_building_pro = [];

        infoGamePanel();

        drawMouseZone();

        ////////////////////////////////////// in pausa menu

        in_pausa_menu();

        ////////////////////////////////////////////

        obj.draw();

        player_select_control();

        if (player_pro_building) {
          player_pro_building.player_pro_building_position();
        }

        player_pro_building_click = false;
        ////////////////////// menu

        //console.log(unit_dop_menu.length);

        if (!in_unit_menu) {
          unit_dop_menu = [];
          player_pro_building = false;
        } else if (in_unit_menu && !unit_dop_menu.length) {
          create_unit_dop_menu(in_unit_menu);
          //console.log("ok");
          //sound.play();
        }

        menu_click = false;

        if (in_unit_menu) {
          if (in_unit_menu.type === 1) {
            if (obj.x < 700) {
              let vertikal = Math.floor((obj.y - removeY) / 50);
              let horizont = Math.floor((obj.x - removeX) / 50);

              if (
                gameFielg[vertikal][horizont].vossalObj &&
                !gameFielg[vertikal][horizont].vossalObj.neitral &&
                gameFielg[vertikal][horizont].vossalObj.fatherFraction
                  .fraction === in_unit_menu.fatherFraction.fraction &&
                (gameFielg[vertikal][horizont].vossalObj.buildready <
                  gameFielg[vertikal][horizont].vossalObj.hpfull ||
                  gameFielg[vertikal][horizont].vossalObj.hp <
                    gameFielg[vertikal][horizont].vossalObj.hpfull)
              ) {
                ctx3.drawImage(
                  unit_m,
                  0,
                  1900,
                  100,
                  100,
                  obj.x,
                  obj.y - 50,
                  30,
                  30
                );
              }
            }
          }

          if (in_unit_menu.magick) {
            y_n_magick = in_unit_menu;
          }
        }

        if (
          y_n_magick &&
          (!player.selectUnits.length ||
            player.selectUnits[0].mana < 100 ||
            player.selectUnits[0].persolalNumber !== y_n_magick.persolalNumber)
        ) {
          //y_n_magick.magick=false;
          y_n_magick = false;
        }

        if (y_n_magick) {
          let ok;

          let vertikal = Math.floor((obj.y - removeY) / 50);
          let horizont = Math.floor((obj.x - removeX) / 50);

          let unit;

          for (let i = vertikal - 1; i <= vertikal + 1; i++) {
            for (let k = horizont - 1; k <= horizont + 1; k++) {
              let u;

              if (gameFielg[i] && gameFielg[i][k]) {
                if (gameFielg[i][k].unit) {
                  u = gameFielg[i][k].unit;
                } else if (gameFielg[i][k].vossalObj) {
                  u = gameFielg[i][k].vossalObj;
                } else if (gameFielg[i][k].dragoon) {
                  u = gameFielg[i][k].dragoon;
                }

                if (u && player.selectUnits[0].magick_ok(u)) {
                  if (gameFielg[i][k].unit) {
                    unit = gameFielg[i][k].unit;
                  }
                  if (gameFielg[i][k].vossalObj) {
                    unit = gameFielg[i][k].vossalObj;
                  }
                  if (gameFielg[i][k].dragoon) {
                    unit = gameFielg[i][k].dragoon;
                  }

                  break;
                }
              }
            }
            if (unit) {
              break;
            }
          }

          let y;

          if (player.selectUnits[0].magick === "tor") {
            y = 10700;
          } else if (player.selectUnits[0].magick === "z") {
            y = 10900;
          } else if (player.selectUnits[0].magick === "nar") {
            y = 10800;
          } else if (player.selectUnits[0].magick === "rage") {
            y = 11000;
          } else if (player.selectUnits[0].magick === "cure") {
            y = 10600;
          }

          if (obj.x < 700) {
            ctx3.drawImage(unit_m, 0, y, 100, 100, obj.x, obj.y - 50, 30, 30);

            if (
              !unit

              //||

              //!ok//!player.selectUnits[0].magick_ok(unit)
            ) {
              ctx3.drawImage(
                unit_m,
                0,
                1800,
                100,
                100,
                obj.x,
                obj.y - 50,
                30,
                30
              );
            } else if (obj.x < 700) {
              ctx3.drawImage(
                unit_m,
                0,
                1700,
                100,
                100,
                obj.x,
                obj.y - 50,
                30,
                30
              );
            }
          }

          if (pausa_click && unit) {
            //console.log(unit)

            player.selectUnits[0].clickSave = new ClickSave(unit, false);
          }
        }

        if (groop_mem) {
          //console.log(groop_mem.timer);

          groop_mem.timer--;

          if (!groop_mem.unit && !groop_mem.timer) {
            if (groop_mem.units[0].fly) {
              for (let i = 0; i < groop_mem.units.length; i++) {
                if (
                  groop_mem.units[i] &&
                  groop_mem.units[i].cell &&
                  groop_mem.units[i].hp > 0
                )
                  player.selectDragons.push(groop_mem.units[i]);
              }
            } else if (groop_mem.units[0].sweeme) {
              for (let i = 0; i < groop_mem.units.length; i++) {
                if (
                  groop_mem.units[i] &&
                  groop_mem.units[i].cell &&
                  groop_mem.units[i].hp > 0
                )
                  player.selectIsSweem.push(groop_mem.units[i]);
              }
            } else {
              for (let i = 0; i < groop_mem.units.length; i++) {
                if (
                  groop_mem.units[i] &&
                  groop_mem.units[i].cell &&
                  groop_mem.units[i].hp > 0
                )
                  player.selectUnits.push(groop_mem.units[i]);
              }
            }

            groop_mem = false;
          } else {
            if (groop_mem.timer === 1) {
              player.selectUnits = [];
              player.selectDragons = [];
              player.selectIsSweem = [];
              all_units = [];
            }

            if (!groop_mem.timer) {
              let m = groop_mem.unit;

              if (m.sweeme) {
                player.selectIsSweem.push(m);
              } else if (m.fly) {
                player.selectDragons.push(m);
              } else {
                player.selectUnits.push(m);
              }

              groop_mem = false;
            }
          }
        }

        ///////////////////////////////// SOUND

        for (let i = 0; i < click_click.length; i++) {
          let click = click_click[i];

          if (click.timer) {
            click.timer--;
          } else {
            click_click.splice(i, 1);
            i--;
          }
        }

        for (let i = 0; i < sounds.length; i++) {
          let sound = sounds[i];

          sound.prog();

          if (sound.readyToOut) {
            sounds.splice(i, 1);
            i--;
          }
        }

        //console.log(sounds_fight.length);

        //if(sounds_fight.length>=20){console.log(sounds_fight); pausa=1;};

        for (let i = 0; i < sounds_fight.length; i++) {
          let sound = sounds_fight[i];

          sound.prog_fight();

          if (sound.readyToOut) {
            sounds_fight.splice(i, 1);
            i--;
          }
        }

        for (let i = 0; i < sounds_fly.length; i++) {
          let sound = sounds_fly[i];

          sound.prog_fight();

          if (sound.readyToOut) {
            sounds_fly.splice(i, 1);
            i--;
          }
        }

        draw_alarms();

        for (let i = 0; i < oils.length; i++) {
          let o = oils[i];

          if (!o.oil) {
            for (let k = 0; k < o.cells.length; k++) {
              o.cells[k].oil = false;
            }

            oils.splice(i, 1);
            i--;
          }
        }
      } else {
        //pausa

        //ctx3.clearRect(0,0,width,height);

        infoGamePanel();

        in_pausa_menu();

        menu_click = false;

        ////////////////////////////
        pausa_menu();
        //////////////////////////////////

        obj.draw();

        ////////////////////////////////////////////  SOUND

        for (let i = 0; i < sounds.length; i++) {
          let sound = sounds[i];

          sound.prog();

          if (sound.readyToOut) {
            sounds.splice(i, 1);
            i--;
          }
        }

        //console.log(sounds_fight.length);

        //if(sounds_fight.length>=20){console.log(sounds_fight); pausa=1;};

        //////////////////////////////////////////////////
      }

      //};

      ///////////////////////////////////////////////////////////////////////// dlya createShablona
      /*
for(let i=0;i<ddd.length;i++){

let obj=ddd[i];
ctx.globalAlpha=0.3;	
ctx.fillStyle="red";
ctx.fillRect(obj.x+removeX,obj.y+removeY,50,50)	
ctx.globalAlpha=1;	
};

if(fractions.length){
for(let i=0;i<cccc.length;i++){

let obj=cccc[i];
	
ctx.fillStyle="green";
ctx.fillRect(obj.x+removeX,obj.y+removeY,50,50)
};	
};

cccc=[];
//*/
      ////////////////////////////////////////////////////////////////
    }
  } // GLOBAL START
  else {
    //ctx3.clearRect(0,0,width,height);
    //console.log(height)

    do_start_draw();

    if (title.active) {
      title.prog_draw();
    }

    //1920,1800
    //ctx3.fillStyle="blue";
    //ctx3.fillRect(0,0,width,height);
  }

  menu_kursor_draw();

  if (global_zanaves.active) {
    global_zanaves_prog_draw();
  }

  ///////////////////////////////sound menu

  click_key_prog();

  for (let i = 0; i < sounds_fight.length; i++) {
    let sound = sounds_fight[i];

    sound.prog_fight();

    if (sound.readyToOut) {
      sounds_fight.splice(i, 1);
      i--;
    }
  }

  for (let i = 0; i < sounds_fly.length; i++) {
    let sound = sounds_fly[i];

    sound.prog_fight();

    if (sound.readyToOut) {
      sounds_fly.splice(i, 1);
      i--;
    }
  }

  for (let i = 0; i < sounds_menu.length; i++) {
    let sound = sounds_menu[i];

    sound.prog_sounds_menu();

    if (sound.readyToOut) {
      sounds_menu.splice(i, 1);
      i--;
    }
  }

  restart_map_prog();

  pausa_click = false;
  click_up = false;
}, temp);

const player_select_control = function () {
  if (player) {
    if (
      player.selectUnits.length === 1 &&
      (!player.selectUnits[0].cell || player.selectUnits[0].hp <= 0)
    ) {
      player.selectUnits = [];

      if (!player.selectIsSweem.length) {
        player_pro_building = false;
      }
    }

    if (
      player.selectBuildings.length === 1 &&
      (!player.selectBuildings[0].cell || player.selectBuildings[0].hp <= 0)
    ) {
      player.selectBuildings = [];
      //player_pro_building=false;
    }

    if (
      player.selectDragons.length === 1 &&
      (!player.selectDragons[0].cell || player.selectDragons[0].hp <= 0)
    ) {
      player.selectDragons = [];
      //player_pro_building=false;
    }

    if (
      player.selectIsSweem.length === 1 &&
      (!player.selectIsSweem[0].cell || player.selectIsSweem[0].hp <= 0)
    ) {
      player.selectIsSweem = [];

      if (!player.selectUnits.length) {
        player_pro_building = false;
      }
    }
  }
};

LandObj.prototype.player_pro_draw = function () {
  //console.log(this.type);

  ctx.globalAlpha = 0.5;

  this.buildready = this.hpfull;

  if (this.type === 2) {
    ctx.drawImage(
      this.imageToDraw,
      0,
      0,
      100,
      100,
      this.x + removeX - 60,
      this.y + removeY - 125,
      this.pro_x,
      this.pro_y
    );
  } else {
    //ctx.drawImage(this.imageToDraw,0,0,100,100,this.x+removeX,this.y+removeY-50,this.pro_x,this.pro_y);
    this.draw();
  }

  ctx.globalAlpha = 1;

  if (mig_vector) {
    mig += 0.02;
  } else {
    mig -= 0.02;
  }

  if (mig >= 0.6) {
    mig_vector = 0;
  }
  if (mig <= 0.2) {
    mig_vector = 1;
  }

  ctx.globalAlpha = mig;

  for (let i = 0; i < cells_player_building_pro.length; i++) {
    if (cells_player_building_pro[i]) {
      let x = cells_player_building_pro[i].x;
      let y = cells_player_building_pro[i].y;

      ctx.fillStyle = "red";
      ctx.fillRect(x + removeX, y + removeY, 50, 50);
    }
  }

  ctx.globalAlpha = 1;
};

LandObj.prototype.player_pro_building_position = function () {
  let vertikal = Math.floor((obj.y - removeY) / 50);
  let horizont = Math.floor((obj.x - removeX) / 50);

  this.horizont = horizont;
  this.vertikal = vertikal;

  this.x = this.horizont * 50;
  this.y = this.vertikal * 50;

  let sound = false;

  if (this.type === "oil_platform") {
    let ok;

    if (
      gameFielg[this.vertikal] &&
      gameFielg[this.vertikal][this.horizont] &&
      gameFielg[this.vertikal - 1] &&
      gameFielg[this.vertikal - 1][this.horizont] &&
      gameFielg[this.vertikal - 1][this.horizont + 1] &&
      gameFielg[this.vertikal][this.horizont + 1] &&
      gameFielg[this.vertikal][this.horizont].oil &&
      gameFielg[this.vertikal - 1][this.horizont].oil &&
      gameFielg[this.vertikal - 1][this.horizont + 1].oil &&
      gameFielg[this.vertikal][this.horizont + 1].oil
    ) {
      ok = true;
    } else if (
      gameFielg[this.vertikal] &&
      gameFielg[this.vertikal][this.horizont] &&
      gameFielg[this.vertikal - 1] &&
      gameFielg[this.vertikal - 1][this.horizont] &&
      gameFielg[this.vertikal - 1][this.horizont + 1] &&
      gameFielg[this.vertikal][this.horizont + 1]
    ) {
      cells_player_building_pro.push(gameFielg[this.vertikal][this.horizont]);

      cells_player_building_pro.push(
        gameFielg[this.vertikal - 1][this.horizont]
      );

      cells_player_building_pro.push(
        gameFielg[this.vertikal - 1][this.horizont + 1]
      );

      cells_player_building_pro.push(
        gameFielg[this.vertikal][this.horizont + 1]
      );
    }

    if (ok && player_pro_building_click) {
      //sound=true;

      let obj = new LandObj(
        "oil_platform",
        this.horizont,
        this.vertikal,
        0,
        this.fatherFraction
      );

      //console.log(gameFielg[this.vertikal][this.horizont])

      obj.cells = gameFielg[this.vertikal][this.horizont].oil.cells;
      obj.cell = gameFielg[this.vertikal][this.horizont];

      for (let i = 0; i < obj.cells.length; i++) {
        obj.cells[i].unit = obj;
      }

      this.fatherFraction.buildings.push(obj);
      this.fatherFraction.oil_platforms.push(obj);
      this.fatherFraction.activeBuildings.push(obj);

      player_pro_building = false;
      player.selectIsSweem = [];

      this.fatherFraction.gold -= 1000;
      this.fatherFraction.wood -= 300;
    }
  } else if (
    this.type === "port" ||
    this.type === "oil_Ref" ||
    this.type === "foundry"
  ) {
    let ok = true;

    let cont_cells = [];
    let sea_cells = [];

    let cells = [];

    for (let i = this.vertikal - 1; i <= this.vertikal + 1; i++) {
      for (let k = this.horizont - 1; k <= this.horizont + 1; k++) {
        if (gameFielg[i] && gameFielg[i][k]) {
          cells.push(gameFielg[i][k]);

          if (gameFielg[i][k].continent) {
            cont_cells.push(gameFielg[i][k]);
          } else if (gameFielg[i][k].sea) {
            sea_cells.push(gameFielg[i][k]);
          }

          if (!gameFielg[this.vertikal][this.horizont].sea) {
            cells_player_building_pro.push(gameFielg[i][k]);
          }
        }
      }
    }

    if (!cells_player_building_pro.length) {
      for (let i = 0; i < cont_cells.length; i++) {
        let c = cont_cells[i];

        if (!c.free || c.continent !== in_unit_menu.cell.continent) {
          cells_player_building_pro.push(c);
        }
      }

      for (let i = 0; i < sea_cells.length; i++) {
        let c = sea_cells[i];

        if (c.unit || c.vossalObj) {
          cells_player_building_pro.push(c);
        }
      }

      if (!cont_cells.length) {
        cells_player_building_pro = cells;
      }
    }

    if (!cells_player_building_pro.length && player_pro_building_click) {
      sound = true;

      ///*
      player_pro_building_click = false;

      //console.log(this.unitName)
      in_unit_menu.createBuilding(
        this.unitName,
        in_unit_menu,
        gameFielg[this.vertikal][this.horizont]
      );

      if (!in_unit_menu.active) {
        in_unit_menu.fatherFraction.activeUnits.push(in_unit_menu);
        in_unit_menu.active = true;
      }

      in_unit_menu.list = 1;
      player_pro_building = false;
      player.selectUnits = [];
      //*/

      //console.log("ok");
    }

    //if(ok&&gameFielg[this.vertikal][this.horizont].sea){console.log("ok")};
  } else if (this.type === 2) {
    let ok = 0;

    for (let i = this.vertikal - 1; i <= this.vertikal + 1; i++) {
      for (let k = this.horizont - 1; k <= this.horizont + 1; k++) {
        if (
          gameFielg[i] &&
          gameFielg[i][k] &&
          gameFielg[i][k].free &&
          !gameFielg[i][k].stopTownHoll.length &&
          !gameFielg[i][k].stopBuild &&
          gameFielg[i][k].continent === in_unit_menu.cell.continent
        ) {
          ok++;
        } else if (gameFielg[i] && gameFielg[i][k]) {
          //ctx.fillStyle="red"	;
          //ctx.fillRect(gameFielg[i][k].x+removeX,gameFielg[i][k].y+removeY,50,50);

          let obj = { x: gameFielg[i][k].x, y: gameFielg[i][k].y };

          cells_player_building_pro.push(obj);
        }
      }
    }

    //console.log(ok);

    if (ok === 9 && player_pro_building_click) {
      player_pro_building_click = false;

      sound = true;

      //console.log(this.unitName)
      in_unit_menu.createBuilding(
        this.unitName,
        in_unit_menu,
        gameFielg[this.vertikal][this.horizont]
      );

      if (!in_unit_menu.active) {
        in_unit_menu.fatherFraction.activeUnits.push(in_unit_menu);
        in_unit_menu.active = true;
      }

      player_pro_building = false;
      player.selectUnits = [];
    }
  } else if (this.gabarit === 150) {
    let ok = 0;

    for (let i = this.vertikal - 1; i <= this.vertikal + 1; i++) {
      for (let k = this.horizont - 1; k <= this.horizont + 1; k++) {
        if (
          gameFielg[i] &&
          gameFielg[i][k] &&
          gameFielg[i][k].free &&
          // &&
          //!gameFielg[i][k].stopTownHoll.length
          !gameFielg[i][k].stopBuild &&
          gameFielg[i][k].continent === in_unit_menu.cell.continent
        ) {
          ok++;
        } else if (gameFielg[i] && gameFielg[i][k]) {
          //ctx.fillStyle="red"	;
          //ctx.fillRect(gameFielg[i][k].x+removeX,gameFielg[i][k].y+removeY,50,50);

          let obj = { x: gameFielg[i][k].x, y: gameFielg[i][k].y };

          cells_player_building_pro.push(obj);
        }
      }
    }

    //console.log(ok);

    if (ok === 9 && player_pro_building_click) {
      player_pro_building_click = false;

      sound = true;

      //console.log(this.unitName)
      in_unit_menu.createBuilding(
        this.unitName,
        in_unit_menu,
        gameFielg[this.vertikal][this.horizont]
      );

      if (!in_unit_menu.active) {
        in_unit_menu.fatherFraction.activeUnits.push(in_unit_menu);
        in_unit_menu.active = true;
      }

      player_pro_building = false;
      player.selectUnits = [];
    }
  } else if (this.gabarit === 100) {
    let ok = 0;

    for (let i = this.vertikal - 1; i <= this.vertikal; i++) {
      for (let k = this.horizont; k <= this.horizont + 1; k++) {
        if (
          gameFielg[i] &&
          gameFielg[i][k] &&
          gameFielg[i][k].free &&
          // &&
          //!gameFielg[i][k].stopTownHoll.length
          !gameFielg[i][k].stopBuild &&
          gameFielg[i][k].continent === in_unit_menu.cell.continent
        ) {
          ok++;
        } else if (gameFielg[i] && gameFielg[i][k]) {
          //ctx.fillStyle="red"	;
          //ctx.fillRect(gameFielg[i][k].x+removeX,gameFielg[i][k].y+removeY,50,50);

          let obj = { x: gameFielg[i][k].x, y: gameFielg[i][k].y };

          cells_player_building_pro.push(obj);
        }
      }
    }

    //console.log(ok);

    if (ok === 4 && player_pro_building_click) {
      player_pro_building_click = false;

      //console.log(this.unitName)
      sound = true;

      in_unit_menu.createBuilding(
        this.unitName,
        in_unit_menu,
        gameFielg[this.vertikal][this.horizont]
      );

      if (!in_unit_menu.active) {
        in_unit_menu.fatherFraction.activeUnits.push(in_unit_menu);
        in_unit_menu.active = true;
      }

      player_pro_building = false;
      player.selectUnits = [];
    }
  }

  if (sound) {
    if (!in_unit_menu.voice) {
      in_unit_menu.voice = true;

      select_sound(in_unit_menu, "build_sound");
    }
  }
};

const getWay = function (arg, noFree, deep, target, luchnik, special) {
  //console.log("ok");

  let takt = 0;

  if (!arg || !arg.cell) {
    return;
  }
  //console.log("scan");

  forCheck += 0.0001;

  if (forCheck > 100000000000) {
    forCheck = -forCheck;
  }

  while (true) {
    takt++;

    if (!father) {
      /*
if(!arg.finish){
	
	if(!arg.sosFin){
	console.log(arg.type);
	console.log(arg.persolalNumber);
	//pausa=1;
	};
	
	
arg.finish=arg.sosFin;};

*/
      //this.getVektors();

      father = arg.cell; //humansPeople[0];
      //console.log(arg.finish);
      //basick=gameFielg[father.vertikal][father.horizont];
      //console.log(arg);
      //console.log(father);

      gameFielg[father.vertikal][father.horizont].finish = arg.finish;

      //console.log(father); ok

      if (
        !father ||
        !father.finish ||
        father.finish.vertikal === undefined ||
        father.finish.horizont === undefined
      ) {
        //

        //console.log("pizdez");

        arg.way = [];
        arg.target = 0;
        arg.myJoube = 0;
        father = 0;
        vektors = [];
        allVektors = [];
        basick = 0;
        noFree = 0;

        return;
      }

      gameFielg[father.vertikal][father.horizont].g = 0;
      gameFielg[father.vertikal][father.horizont].getH();
      gameFielg[father.vertikal][father.horizont].f =
        gameFielg[father.vertikal][father.horizont].g +
        gameFielg[father.vertikal][father.horizont].h;

      //console.log(father.f);

      vektors.push(gameFielg[father.vertikal][father.horizont]);

      vektors[0].inUse = false;
      //vektors[0].finish.h=0;
      //vektors[0].finish.g=0;
      //vektors[0].finish.f=0;
      //vektors[0].h=0;
      //vektors[0].g=0;
      //vektors[0].f=0;
      //console.log(vektors[0]);
    }
    //console.log(takt);
    //removeInUse();
    //console.log(basick);
    basick = getBastVektors();

    //console.log(vektors);

    if (father.way.length) {
      arg.way = father.way;
      arg.wayLength = father.wayLength;

      //console.log(arg.way);
      //father.h=0;
      //father.g=0;
      //father.f=0;

      father.way = [];
      father.inUse = false;
      father.finish.inUse = false;
      father = 0;
      vektors = [];
      noFree = 0;

      //if(arg.type==="dragoon"){arg.dragoonWay=arg.way;};

      //console.log(arg.way);
      //pausa=1
      //allVektors=[];
      /*
for(let i=0;i<allVektors.length;i++){
	
	allVektors[i].h=0;
	allVektors[i].g=0;
	allVektors[i].f=0;
	allVektors[i].inUse=0;
	
};
//*/

      allVektors = [];

      basick = 0;
      //console.log(forCheck);
      //console.log(takt);

      //console.log(takt);
      return;
    }

    //console.log();
    ///*
    if (!basick) {
      //console.log("polny pizdez!!!!");

      arg.finish = 0;
      if (
        !father ||
        !father.finish ||
        father.finish.vertikal === undefined ||
        father.finish.horizont === undefined
      ) {
        //console.log("pizdez");

        arg.way = [];
        arg.target = 0;
        arg.myJoube = 0;
        father = 0;
        vektors = [];
        allVektors = [];
        basick = 0;
        noFree = 0;

        return;
      }
      father.way = [];
      father.inUse = false;
      father.finish.inUse = false;
      father = 0;
      vektors = [];
      allVektors = [];
      basick = 0;
      noFree = 0;

      arg.target = 0;
      arg.way = [];
      arg.myJoube = 0;

      return;
    } ///////////////////!!!!!!!!!!!!!!!!!!!!!
    //*/

    if (!arg.sweeme) {
      if (!special) {
        basick.getVektors(noFree, target, arg, luchnik);
      } else {
        basick.getVektors_ii(noFree, target, arg, luchnik);
      }
    } else {
      basick.getVektorsSweeme(noFree, target, arg, luchnik);
    }

    //basick.inUse=true;
    if ((!vektors.length && takt > 1) || takt === deep) {
      //go=1;

      //return;
      father.finish = getBastH();
      //father.saveFinish=father.finish;

      //father.h=0;
      //father.g=0;
      //father.f=0;

      father.finish.myWay(father.finish);

      arg.way = father.way;
      arg.wayLength = father.wayLength;

      father.way = [];
      father.inUse = false;
      father.finish.inUse = false;
      father = 0;
      vektors = [];
      father.finish = 0;
      noFree = 0;
      //allVektors=[];
      /*
for(let i=0;i<allVektors.length;i++){
	
	allVektors[i].h=0;
	allVektors[i].g=0;
	allVektors[i].f=0;
	allVektors[i].inUse=0;
	
};
//*/
      allVektors = [];
      basick = 0;
      //console.log(forCheck);

      return;

      //console.log(father.finish+" vektors "+vektors.length+" allVektors "+allVektors.length);

      //basick=father;
    } else if (!vektors.length && takt === 1) {
      //console.log("ko");
      //arg.way=[0];
      arg.finish = 0;
      //father.h=0;
      //father.g=0;
      //father.f=0;
      if (
        !father ||
        !father.finish ||
        father.finish.vertikal === undefined ||
        father.finish.horizont === undefined
      ) {
        //console.log("pizdez");

        arg.way = [];
        arg.target = 0;
        arg.myJoube = 0;
        father = 0;
        vektors = [];
        allVektors = [];
        basick = 0;
        noFree = 0;

        return;
      }
      father.way = [];
      father.inUse = false;
      father.finish.inUse = false;
      father = 0;
      vektors = [];
      allVektors = [];
      basick = 0;
      noFree = 0;

      return;
    }

    //if(!basick){console.log("no way"); return;};

    //for(let i=0;i<vektors.length;i++){

    //	if(vektors[i].inUse||vektors[i].trup||vektors[i].taboo){vektors.splice(i,1);i--;};

    //};

    //basick.getVektors();

    //if(stop===0){
    //basick=getBastVektors();
    //};
    //basick.inUse=true;

    //console.log(takt);

    //go=0;

    //console.log(arg);
    //console.log(unit.finish);
  }
};

Obj.prototype.getVektors_ii = function (arg, target, unit, luchnik) {
  if (!gameFielg[this.vertikal] || !gameFielg[this.vertikal][this.horizont]) {
    return;
  }

  /*	
if(isNaN(this.f)){

console.log(gameFielg[this.vertikal][this.horizont]);

this.f=0;
this.g=0;
this.h=0;
	
	};	
*/
  //if(luchnik){console.log(luchnik);};

  //console.log(arg)

  //if(unit.fatherFraction.control==="player"){
  //console.log("scan");
  //};

  if (
    unit.warrior &&
    (unit.target ||
      (unit.handTarget && unit.fatherFraction.control === "comp")) &&
    !unit.fly
  ) {
    for (let d = 0; d < this.iContaktWith.length; d++) {
      if (
        this.iContaktWith[d].father.warrior &&
        this.iContaktWith[d].father.hp > 0 &&
        this.iContaktWith[d].father.fatherFraction.union !==
          unit.fatherFraction.union
      ) {
        father.finish = gameFielg[this.vertikal][this.horizont];

        father.finish.myWay(father.finish);

        //console.log("ura");
        //unit.iCanGet=true;

        return;
      }
    }
  }

  if (target && !luchnik) {
    for (let d = 0; d < this.iContaktWith.length; d++) {
      if (
        this.iContaktWith[d].father.persolalNumber === target.persolalNumber
      ) {
        father.finish = gameFielg[this.vertikal][this.horizont];

        father.finish.myWay(father.finish);

        //console.log("ura");
        unit.iCanGet = true;

        return;
      }
    }

    /*	
		
		if(this.vertikal===target.contaktCells[d].vertikal&&this.horizont===target.contaktCells[d].horizont){
			
		//father.finish.myWay(gameFielg[i][k]);	
			
		father.finish=gameFielg[this.vertikal][this.horizont];

		father.finish.myWay(father.finish);
			
			
		console.log("ura");	
			
		return;	
			
			//console.log("uh")
			
		};
		
		
	*/
  }

  //left_Up left_

  let koof = 0;

  for (let i = this.vertikal - 1; i < this.vertikal - 1 + 3; i++) {
    for (let k = this.horizont - 1; k < this.horizont - 1 + 3; k++) {
      //if(isNaN(this.f)){console.log(this.father.f);};

      /*		
		
if(gameFielg[i]&&gameFielg[i][k]&&gameFielg[i][k].startFinish.length&&
(gameFielg[i][k].startFinish[0].vertikal!==father.vertikal||
gameFielg[i][k].startFinish[0].horizont!==father.horizont||
gameFielg[i][k].startFinish[1].vertikal!==father.finish.vertikal||
gameFielg[i][k].startFinish[1].horizont!==father.finish.horizont
)){


	
gameFielg[i][k].inUse=false;
gameFielg[i][k].h=0;
gameFielg[i][k].f=0;
gameFielg[i][k].g=0;	
	
};
	
*/
      if (
        gameFielg[i] &&
        gameFielg[i][k] &&
        gameFielg[i][k].forCheck !== forCheck //||
        //(gameFielg[i]&&gameFielg[i][k]&&isNaN(gameFielg[i][k].h))||
        //(gameFielg[i]&&gameFielg[i][k]&&isNaN(gameFielg[i][k].f))
      ) {
        gameFielg[i][k].inUse = false;
        gameFielg[i][k].h = 0;
        gameFielg[i][k].f = 0;
        gameFielg[i][k].g = 0;
      }
      /*
let aa;
let bb;
let cc;


if(arg&&gameFielg[i]&&gameFielg[i][k]){
	
	aa=(arg.x+50)-(gameFielg[i][k].x+50);
	bb=(arg.y+50)-(gameFielg[i][k].y+50);
	
	cc=Math.sqrt(aa*aa+bb*bb);
	
};


if(arg){
	
	console.log(cc);
	
};

*/

      /*

let dis=false;
let okey=true;

let okDrag=0;


if(!unit.fly&&arg&&gameFielg[i]&&gameFielg[i][k]&&gameFielg[i][k].unit&&gameFielg[i][k].unit.unitStatus==="life"){
	
let a=unit.x-gameFielg[i][k].x;
let b=unit.y-gameFielg[i][k].y;

dis=Math.sqrt(a*a+b*b);

if(dis<arg){okey=false;};

};
//*/

      ///////////////

      ///*
      let ok2 = false;

      let a, c, b;

      //console.log(unit.goGroop)
      //floorGlobalTimer

      if (
        gameFielg[i] &&
        gameFielg[i][k] &&
        ((gameFielg[i][k].unit && !gameFielg[i][k].unit.neitral) ||
          (gameFielg[i][k].vossalObj && !gameFielg[i][k].vossalObj.neitral))
      ) {
        ok2 = true; //console.log("pizdez");
      }

      //console.log()
      //*/

      let hart =
        gameFielg[i] &&
        gameFielg[i][k] &&
        !unit.fly &&
        (gameFielg[i][k].free ||
          //||
          //(!gameFielg[i][k].free&&gameFielg[i][k].unit&&gameFielg[i][k].unit.unitStatus==="life"&&okey)
          ok2);

      ///////////////////////
      //if(!arg){okey=false;};
      //console.log(arg);
      if (
        hart &&
        !gameFielg[i][k].inUse &&
        !gameFielg[i][k].f
        //&&
        //!(gameFielg[i][k].vertikal==this.vertikal&&gameFielg[i][k].horizont==this.horizont)
      ) {
        let a = Math.abs(father.finish.horizont - gameFielg[i][k].horizont);
        let b = Math.abs(father.finish.vertikal - gameFielg[i][k].vertikal);

        let c = a + b;

        //console.log(c)
        //if(!father.finish.horizont){console.log("koshmar " +father.finish.horizont);};/////////////!!!!!!!!!!!!!!!!

        if (koof === 0) {
          gameFielg[i][k].g = this.g + 14;
        }
        if (koof === 1) {
          gameFielg[i][k].g = this.g + 10;
        }
        if (koof === 2) {
          gameFielg[i][k].g = this.g + 14;
        }

        if (koof === 3) {
          gameFielg[i][k].g = this.g + 10;
        }
        if (koof === 5) {
          gameFielg[i][k].g = this.g + 10;
        }

        if (koof === 6) {
          gameFielg[i][k].g = this.g + 14;
        }
        if (koof === 7) {
          gameFielg[i][k].g = this.g + 10;
        }
        if (koof === 8) {
          gameFielg[i][k].g = this.g + 14;
        }

        //koof++;
        //console.log(c2);

        gameFielg[i][k].father = gameFielg[this.vertikal][this.horizont];

        //this.vektors.push(gameFielg[i][k]);

        vektors.push(gameFielg[i][k]);

        allVektors.push(gameFielg[i][k]);

        gameFielg[i][k].h = c * 10; //+c2//+v+h;

        gameFielg[i][k].f = gameFielg[i][k].g + gameFielg[i][k].h;

        //gameFielg[i][k].startFinish=[father,father.finish];

        gameFielg[i][k].forCheck = forCheck;

        /*	
	
for(let d=0;d<target.contaktCells.length;d++){
		
		if(gameFielg[i][k].vertikal===target.contaktCells[d].vertikal&&gameFielg[i][k].horizont===target.contaktCells[d].horizont){
			
		//father.finish.myWay(gameFielg[i][k]);	
			
		//father.finish=gameFielg[i][k];

		//father.finish.myWay(father.finish);
			
		//target.stop=true;	
			
			
			console.log(gameFielg[i][k])
			
			break
			
		};
		
		
	};	
		
//*/

        ///*
        if (
          gameFielg[i][k].vertikal === father.finish.vertikal &&
          gameFielg[i][k].horizont === father.finish.horizont
        ) {
          //console.log("sucssess!!!!!!!!!!!!!!!");

          father.finish.myWay(father.finish);
          //arg.way=father.way;

          //vektors=[];
          //allVektors=[];
          //father=0;

          //if(unit.type==="dragoon"){console.log(father);pausa=1;};
        }
      } else if (
        hart &&
        !gameFielg[i][k].inUse &&
        gameFielg[i][k].f &&
        !(
          gameFielg[i][k].vertikal == this.vertikal &&
          gameFielg[i][k].horizont == this.horizont
        )
      ) {
        //gameFielg[i][k].startFinish=[father,father.finish];
        gameFielg[i][k].forCheck = forCheck;

        let g;

        if (koof === 0) {
          g = this.g + 14;
        }
        if (koof === 1) {
          g = this.g + 10;
        }
        if (koof === 2) {
          g = this.g + 14;
        }

        if (koof === 3) {
          g = this.g + 10;
        }
        if (koof === 5) {
          g = this.g + 10;
        }

        if (koof === 6) {
          g = this.g + 14;
        }
        if (koof === 7) {
          g = this.g + 10;
        }
        if (koof === 8) {
          g = this.g + 14;
        }

        if (g < gameFielg[i][k].g) {
          gameFielg[i][k].g = g;

          let a = Math.abs(father.finish.horizont - gameFielg[i][k].horizont);
          let b = Math.abs(father.finish.vertikal - gameFielg[i][k].vertikal);

          let c = a + b;

          gameFielg[i][k].father = gameFielg[this.vertikal][this.horizont];

          gameFielg[i][k].h = c * 10; //+c2//+v+h;

          gameFielg[i][k].f = gameFielg[i][k].g + gameFielg[i][k].h;

          //console.log(gameFielg[i][k].f);
        }

        //koof++;
      }
      koof++;
    }
  }
};

Obj.prototype.getVektorsSweeme = function (arg, target, unit, luchnik) {
  /*	
if(isNaN(this.f)){

console.log(gameFielg[this.vertikal][this.horizont]);

this.f=0;
this.g=0;
this.h=0;
	
	};	
*/
  //if(luchnik){console.log(luchnik);};
  //if(unit.type==="transport"){console.log(unit.persolalNumber);};

  //if(this.persolalNumber===unit.spe.persolalNumber){ // hold_position

  /*
		
					father.finish=gameFielg[this.vertikal][this.horizont];

		father.finish.myWay(father.finish);
						
		console.log("ura");	
	
			
		return;
		
*/

  //};

  //if(unit.type==="distroer"){
  //console.log(unit.go);
  //};

  if (
    unit.type === "distroer" ||
    unit.type === "linkor" ||
    unit.type === "turtle"
  ) {
    //console.log("scan");

    //console.log(unit.go);

    let target;

    if (unit.target) {
      target = unit.target;
    } else if (unit.handTarget) {
      target = unit.handTarget;
    }

    if (target) {
      let dis = get_distanse_on_lineyka(
        gameFielg[this.vertikal][this.horizont],
        100,
        target.cell,
        target.gabarit
      );

      if ((dis <= unit.seeing && target.visible) || dis <= 141.5) {
        father.finish = gameFielg[this.vertikal][this.horizont];

        father.finish.myWay(father.finish);

        //console.log("ura");
        //unit.tanker_iCanGet=true;

        return;
      }
    }
  }

  if (
    unit.type === "oil_tanker" &&
    unit.handTarget &&
    unit.handTarget.gabarit === 100
  ) {
    unit.check_way = true;

    if (
      get_distanse_on_lineyka(
        gameFielg[this.vertikal][this.horizont],
        100,
        unit.handTarget.cell,
        unit.handTarget.gabarit
      ) <= 141.5
    ) {
      father.finish = gameFielg[this.vertikal][this.horizont];

      father.finish.myWay(father.finish);

      //console.log("ura");
      unit.tanker_iCanGet = true;

      return;
    }
  } else if (
    unit.type === "oil_tanker" &&
    unit.handTarget &&
    unit.handTarget.gabarit === 150
  ) {
    unit.check_way = true;

    if (
      get_distanse_on_lineyka(
        gameFielg[this.vertikal][this.horizont],
        100,
        unit.handTarget.cell,
        unit.handTarget.gabarit
      ) <= 176
    ) {
      father.finish = gameFielg[this.vertikal][this.horizont];

      father.finish.myWay(father.finish);

      //console.log(get_distanse_on_lineyka(gameFielg[this.vertikal][this.horizont],100,unit.handTarget.cell,unit.handTarget.gabarit));
      unit.tanker_iCanGet = true;

      return;
    }
  }

  let koof = 0;

  for (let i = this.vertikal - 1; i < this.vertikal - 1 + 3; i++) {
    for (let k = this.horizont - 1; k < this.horizont - 1 + 3; k++) {
      if (
        gameFielg[i] &&
        gameFielg[i][k] &&
        gameFielg[i][k].forCheck !== forCheck
      ) {
        gameFielg[i][k].inUse = false;
        gameFielg[i][k].h = 0;
        gameFielg[i][k].f = 0;
        gameFielg[i][k].g = 0;
      }

      let dis = false;
      let okey = true;

      let okSweeme = 0;

      let fin = false;

      for (let v = i - 1; v <= i; v++) {
        for (let h = k; h <= k + 1; h++) {
          if (gameFielg[v] && gameFielg[v][h]) {
            /*

if(
gameFielg[v][h].persolalNumber===unit.spe.persolalNumber
||
gameFielg[v][h].persolalNumber===gameFielg[unit.spe.vertikal-1][unit.spe.horizont].persolalNumber
||
gameFielg[v][h].persolalNumber===gameFielg[unit.spe.vertikal][unit.spe.horizont+1].persolalNumber
||
gameFielg[v][h].persolalNumber===gameFielg[unit.spe.vertikal-1][unit.spe.horizont+1].persolalNumber
){
	//fin=true;
};

*/

            let dis = get_distanse_on_lineyka(
              gameFielg[v][h],
              100,
              unit.cell,
              100
            );

            if (
              //gameFielg[v]&&gameFielg[v][h]
              //&&
              gameFielg[v][h].water &&
              !gameFielg[v][h].vossalObj &&
              (!gameFielg[v][h].unit ||
                gameFielg[v][h].unit.persolalNumber === unit.persolalNumber ||
                (gameFielg[v][h].unit.unitStatus === "life" &&
                  gameFielg[v][h].unit.way.length &&
                  dis > 141.5) ||
                ///*
                (unit.hold_position &&
                  gameFielg[v][h].unit.hold_position &&
                  gameFielg[v][h].unit.active &&
                  gameFielg[v][h].unit.fatherFraction.fraction ===
                    unit.fatherFraction.fraction &&
                  gameFielg[v][h].unit.hold_position === unit.hold_position &&
                  unit.goGroop_sweeme &&
                  unit.persolalNumber !== gameFielg[v][h].unit.persolalNumber &&
                  !unit.go) ||
                //&&
                //	gameFielg[v][h].unit.way.length
                (gameFielg[v][h].unit.fatherFraction !== unit.fatherFraction &&
                  unit.type !== "transport" &&
                  dis >= 600))

              //*/

              //||
              //gameFielg[v][h].persolalNumber===unit.spe.persolalNumber
            ) {
              okSweeme++;

              //	pausa=1
            } else {
              break;
            }
          }
        }
      }

      /*

if(okSweeme<4//&&fin
&&
(
this.persolalNumber===unit.spe.persolalNumber
||
this.persolalNumber===gameFielg[unit.spe.vertikal-1][unit.spe.horizont].persolalNumber
||
this.persolalNumber===gameFielg[unit.spe.vertikal][unit.spe.horizont+1].persolalNumber
||
this.persolalNumber===gameFielg[unit.spe.vertikal-1][unit.spe.horizont+1].persolalNumber
)
){
	
	

					father.finish=gameFielg[this.vertikal][this.horizont];

		father.finish.myWay(father.finish);
						
		//console.log(unit.persolalNumber);	
	
			
		return;	
	
	
	
};



*/

      ////////////////////////////
      //*

      if (
        unit.type !== "transport" &&
        unit.fatherFraction.control === "comp" &&
        okSweeme < 4
      ) {
        if (
          unit.handCell &&
          get_distanse_on_lineyka(
            unit.handCell,
            100,
            gameFielg[this.vertikal][this.horizont],
            100
          ) <= 350
        ) {
          father.finish = gameFielg[this.vertikal][this.horizont];

          father.finish.myWay(father.finish);

          //console.log(unit.type);
          //unit.tanker_iCanGet=true;

          return;
        }
      }

      //*/

      //////////////////////////////////////////

      if (
        okSweeme >= 4 &&
        //||
        //finish_ok
        /*
(
!unit.fly
&&
(
gameFielg[i][k].free||
(!gameFielg[i][k].free&&gameFielg[i][k].unit&&gameFielg[i][k].unit.unitStatus==="life"&&okey)
)
)

||

(
unit.fly&&okDrag===4
)

//*/

        !gameFielg[i][k].inUse &&
        !gameFielg[i][k].f
        //&&
        //!(gameFielg[i][k].vertikal==this.vertikal&&gameFielg[i][k].horizont==this.horizont)
      ) {
        let a = Math.abs(father.finish.horizont - gameFielg[i][k].horizont);
        let b = Math.abs(father.finish.vertikal - gameFielg[i][k].vertikal);

        let c = a + b;

        //console.log(c)
        //if(!father.finish.horizont){console.log("koshmar " +father.finish.horizont);};/////////////!!!!!!!!!!!!!!!!

        if (koof === 0) {
          gameFielg[i][k].g = this.g + 14;
        }
        if (koof === 1) {
          gameFielg[i][k].g = this.g + 10;
        }
        if (koof === 2) {
          gameFielg[i][k].g = this.g + 14;
        }

        if (koof === 3) {
          gameFielg[i][k].g = this.g + 10;
        }
        if (koof === 5) {
          gameFielg[i][k].g = this.g + 10;
        }

        if (koof === 6) {
          gameFielg[i][k].g = this.g + 14;
        }
        if (koof === 7) {
          gameFielg[i][k].g = this.g + 10;
        }
        if (koof === 8) {
          gameFielg[i][k].g = this.g + 14;
        }

        //koof++;
        //console.log(c2);

        gameFielg[i][k].father = gameFielg[this.vertikal][this.horizont];

        //this.vektors.push(gameFielg[i][k]);

        vektors.push(gameFielg[i][k]);

        allVektors.push(gameFielg[i][k]);

        gameFielg[i][k].h = c * 10; //+c2//+v+h;

        gameFielg[i][k].f = gameFielg[i][k].g + gameFielg[i][k].h;

        //gameFielg[i][k].startFinish=[father,father.finish];

        gameFielg[i][k].forCheck = forCheck;

        /*	
	
for(let d=0;d<target.contaktCells.length;d++){
		
		if(gameFielg[i][k].vertikal===target.contaktCells[d].vertikal&&gameFielg[i][k].horizont===target.contaktCells[d].horizont){
			
		//father.finish.myWay(gameFielg[i][k]);	
			
		//father.finish=gameFielg[i][k];

		//father.finish.myWay(father.finish);
			
		//target.stop=true;	
			
			
			console.log(gameFielg[i][k])
			
			break
			
		};
		
		
	};	
		
//*/

        ///*
        if (
          gameFielg[i][k].vertikal === father.finish.vertikal &&
          gameFielg[i][k].horizont === father.finish.horizont
        ) {
          //console.log("sucssess!!!!!!!!!!!!!!!");

          father.finish.myWay(father.finish);

          unit.iCanGet = true;

          //arg.way=father.way;

          //vektors=[];
          //allVektors=[];
          //father=0;

          //if(unit.type==="dragoon"){console.log(father);pausa=1;};
          if (
            unit.fatherFraction.control === "comp" &&
            unit.type === "transport"
          ) {
            unit.trans_can_get = true;
          }
        }
      } else if (
        //gameFielg[i]&&gameFielg[i][k]&&
        ////////////////
        okSweeme === 4 && //////////////////////
        !gameFielg[i][k].inUse &&
        gameFielg[i][k].f &&
        !(
          gameFielg[i][k].vertikal == this.vertikal &&
          gameFielg[i][k].horizont == this.horizont
        )
      ) {
        //gameFielg[i][k].startFinish=[father,father.finish];
        gameFielg[i][k].forCheck = forCheck;

        let g;

        if (koof === 0) {
          g = this.g + 14;
        }
        if (koof === 1) {
          g = this.g + 10;
        }
        if (koof === 2) {
          g = this.g + 14;
        }

        if (koof === 3) {
          g = this.g + 10;
        }
        if (koof === 5) {
          g = this.g + 10;
        }

        if (koof === 6) {
          g = this.g + 14;
        }
        if (koof === 7) {
          g = this.g + 10;
        }
        if (koof === 8) {
          g = this.g + 14;
        }

        if (g < gameFielg[i][k].g) {
          gameFielg[i][k].g = g;

          let a = Math.abs(father.finish.horizont - gameFielg[i][k].horizont);
          let b = Math.abs(father.finish.vertikal - gameFielg[i][k].vertikal);

          let c = a + b;

          gameFielg[i][k].father = gameFielg[this.vertikal][this.horizont];

          gameFielg[i][k].h = c * 10; //+c2//+v+h;

          gameFielg[i][k].f = gameFielg[i][k].g + gameFielg[i][k].h;

          //console.log(gameFielg[i][k].f);
        }

        //koof++;
      }
      koof++;
    }
  }
};

Obj.prototype.getVektors = function (arg, target, unit, luchnik) {
  if (!gameFielg[this.vertikal] || !gameFielg[this.vertikal][this.horizont]) {
    return;
  }

  /*	
if(isNaN(this.f)){

console.log(gameFielg[this.vertikal][this.horizont]);

this.f=0;
this.g=0;
this.h=0;
	
	};	
*/
  //if(luchnik){console.log(luchnik);};

  //console.log(arg)

  //if(unit.ii_index){
  //	console.log("scan");
  //	};

  //if(unit.type==="dragoon"){
  //console.log("scan");
  //};

  /*
if(unit.type==="dragoon"){
	
	if(unit.finish.dragoon){
		
		let dis=get_distanse_on_lineyka(target.cell,100,gameFielg[this.vertikal][this.horizont],100);
		
	if(dis<=300){
		
					father.finish=gameFielg[this.vertikal][this.horizont];

		father.finish.myWay(father.finish);
						
	
		//unit.iCanGet=true;	
			
		console.log("go");	
			
		return;
		
		
	};	
		
	};
	
};

*/
  //if(unit.warrior){
  //console.log("scan");
  //};

  //if(unit.type===1){

  if (!unit.target && !unit.handTarget && unit.finish.unit) {
    for (let d = 0; d < this.iContaktWith.length; d++) {
      if (
        this.iContaktWith[d].father.persolalNumber ===
        unit.finish.unit.persolalNumber
      ) {
        father.finish = gameFielg[this.vertikal][this.horizont];

        father.finish.myWay(father.finish);

        //console.log("ura");
        //unit.iCanGet=true;

        return;
      }
    }
  }

  //};

  if (unit.ii_index && this.ii_fractions_way) {
    //console.log("ura");
    let index = this.ii_fractions_way[unit.fatherFraction.persolalNumber].index;

    //console.log(this.ii_index); pausa=1;

    if (index && index <= unit.ii_index) {
      father.finish = gameFielg[this.vertikal][this.horizont];

      father.finish.myWay(father.finish);

      //unit.iCanGet=true;

      return;
    }
  }

  if (
    unit.warrior &&
    (unit.target ||
      (unit.handTarget && unit.fatherFraction.control === "comp")) &&
    !unit.fly
  ) {
    for (let d = 0; d < this.iContaktWith.length; d++) {
      if (
        this.iContaktWith[d].father.warrior &&
        this.iContaktWith[d].father.hp > 0 &&
        this.iContaktWith[d].father.fatherFraction.union !==
          unit.fatherFraction.union
      ) {
        father.finish = gameFielg[this.vertikal][this.horizont];

        father.finish.myWay(father.finish);

        //console.log("ura");
        //unit.iCanGet=true;

        return;
      }
    }
  }

  if (
    unit.fatherFraction.control === "comp" &&
    unit.handCell &&
    !unit.handCell.free &&
    !unit.ii_attack
  ) {
    if (
      get_distanse_on_lineyka(
        gameFielg[this.vertikal][this.horizont],
        50,
        unit.handCell,
        50
      ) <= 250
    ) {
      father.finish = gameFielg[this.vertikal][this.horizont];

      father.finish.myWay(father.finish);
      //unit.ii_saveCell=false;
      //console.log("ura");

      return;
    }
  }

  if (target && luchnik && luchnik === 1) {
    //pausa=1;
    /*
let a=target.damagePointX-(this.x+25);
let b=target.damagePointY-(this.y+25);	

let c=Math.sqrt(a*a+b*b);	

console.log("c : "+c);

*/

    //console.log(get_distanse_on_lineyka(gameFielg[this.vertikal][this.horizont],unit.gabarit,target.cell,target.gabarit));

    let x;
    let y;

    let cell = gameFielg[this.vertikal][this.horizont];

    if (unit.gabarit === 50) {
      x = cell.x + 25;
      y = cell.y + 25;
    } else if (unit.gabarit === 100) {
      x = cell.x + 50;
      y = cell.y;
    }

    let a = x - target.damagePointX;
    let b = y - target.damagePointY;

    let c = Math.sqrt(a * a + b * b);

    if (c <= unit.seeing) {
      father.finish = cell;

      father.finish.myWay(father.finish);

      //console.log("okokokok");
      unit.iCanGet = true;

      return;
    }
  } else if (target && luchnik && luchnik === 2) {
    //console.log("ok");

    for (let d = 0; d < this.iContaktWith.length; d++) {
      if (
        this.iContaktWith[d].father.persolalNumber === target.persolalNumber
      ) {
        father.finish = gameFielg[this.vertikal][this.horizont];

        father.finish.myWay(father.finish);

        //console.log("ura");
        unit.iCanGet = true;

        return;
      }
    }
  } else if (target && luchnik && luchnik === 3) {
    let x = this.x + 25;
    let y = this.y + 25;

    if (unit.type === "dragoon") {
      x = this.x + 50;
      y = this.y;
    }

    let a = target.damagePointX - x;
    let b = target.damagePointY - y;

    let c = Math.sqrt(a * a + b * b);

    if (c <= unit.seeing) {
      father.finish = gameFielg[this.vertikal][this.horizont];

      father.finish.myWay(father.finish);

      //console.log(c+" way");
      unit.iCanGet = true;

      return;
    }
  }

  if (target && !luchnik) {
    for (let d = 0; d < this.iContaktWith.length; d++) {
      if (
        this.iContaktWith[d].father.persolalNumber === target.persolalNumber
      ) {
        father.finish = gameFielg[this.vertikal][this.horizont];

        father.finish.myWay(father.finish);

        //console.log("ura");
        unit.iCanGet = true;

        return;
      }

      ///*

      if (father.unit.type === 1) {
        if (unit.type === 1 && unit.fatherFraction.control === "comp") {
          if (
            !unit.iGoBuild &&
            !unit.iGetTarget &&
            this.iContaktWith[d].father.unitStatus === "building" &&
            !this.iContaktWith[d].father.neitral &&
            this.iContaktWith[d].father.fatherFraction.persolalNumber ===
              unit.fatherFraction.persolalNumber &&
            (this.iContaktWith[d].father.hp <
              this.iContaktWith[d].father.hpfull ||
              this.iContaktWith[d].father.buildready <
                this.iContaktWith[d].father.hpfull) &&
            this.iContaktWith[d].father.hp > 0
          ) {
            father.finish = gameFielg[this.vertikal][this.horizont];

            father.finish.myWay(father.finish);

            //console.log(c+" way");
            unit.iCanGet = true;

            unit.target = this.iContaktWith[d].father;

            return;
          }
        }

        if (!father.unit.potentialTarget) {
          //console.log("ok");

          if (
            (this.iContaktWith[d].father.unitName === target.unitName &&
              (this.iContaktWith[d].father.neitral ||
                this.iContaktWith[d].father.fatherFraction.fraction ===
                  unit.fatherFraction.fraction)) ||
            (father.unit.wood && this.iContaktWith[d].father.unitWoodOut)
          ) {
            if (
              father.unit.wood &&
              this.iContaktWith[d].father.unitWoodOut &&
              !father.unit.iGoBuild &&
              this.iContaktWith[d].father.fatherFraction.fraction ===
                father.unit.fatherFraction.fraction &&
              this.iContaktWith[d].father.hp > 0 &&
              this.free &&
              (target.unitName === "townHoll" ||
                target.unitName === "lesopilka")
            ) {
              father.unit.potentialTarget = this.iContaktWith[d].father;

              father.finish = gameFielg[this.vertikal][this.horizont];
              father.finish.myWay(father.finish);

              father.unit.potentialWay = father.way;

              if (father.unit.fatherFraction.control === "player") {
                father.finish = target.cell;
                father.way = [];
              } else {
                return;
              }
            } else if (
              target.unitName === "wood" &&
              !this.iContaktWith[d].father.lesorub &&
              this.iContaktWith[d].father.hp > 0 &&
              this.free
            ) {
              father.unit.potentialTarget = this.iContaktWith[d].father;

              father.finish = gameFielg[this.vertikal][this.horizont];
              father.finish.myWay(father.finish);

              father.unit.potentialWay = father.way;

              if (father.unit.fatherFraction.control === "player") {
                father.finish = target.cell;
                father.way = [];
              } else {
                return;
              }
            } else if (
              target.unitName === "shahta" &&
              this.iContaktWith[d].father.gold > 0 &&
              this.iContaktWith[d].father.hp > 0 &&
              this.free
            ) {
              father.unit.potentialTarget = this.iContaktWith[d].father;

              father.finish = gameFielg[this.vertikal][this.horizont];
              father.finish.myWay(father.finish);

              father.unit.potentialWay = father.way;

              if (father.unit.fatherFraction.control === "player") {
                father.finish = target.cell;
                father.way = [];
              } else {
                return;
              }
            } else if (
              !father.unit.iGoBuild &&
              target.unitName === "townHoll" &&
              target.fatherFraction.fraction ===
                father.unit.fatherFraction.fraction &&
              this.iContaktWith[d].father.hp > 0 &&
              this.free
            ) {
              father.unit.potentialTarget = this.iContaktWith[d].father;

              father.finish = gameFielg[this.vertikal][this.horizont];
              father.finish.myWay(father.finish);

              father.unit.potentialWay = father.way;

              if (father.unit.fatherFraction.control === "player") {
                father.finish = target.cell;
                father.way = [];
              } else {
                return;
              }
            }
          }
        }

        //*/
      }
    }

    /*	
		
		if(this.vertikal===target.contaktCells[d].vertikal&&this.horizont===target.contaktCells[d].horizont){
			
		//father.finish.myWay(gameFielg[i][k]);	
			
		father.finish=gameFielg[this.vertikal][this.horizont];

		father.finish.myWay(father.finish);
			
			
		console.log("ura");	
			
		return;	
			
			//console.log("uh")
			
		};
		
		
	*/
  }

  //left_Up left_

  let koof = 0;

  for (let i = this.vertikal - 1; i < this.vertikal - 1 + 3; i++) {
    for (let k = this.horizont - 1; k < this.horizont - 1 + 3; k++) {
      //if(isNaN(this.f)){console.log(this.father.f);};

      /*		
		
if(gameFielg[i]&&gameFielg[i][k]&&gameFielg[i][k].startFinish.length&&
(gameFielg[i][k].startFinish[0].vertikal!==father.vertikal||
gameFielg[i][k].startFinish[0].horizont!==father.horizont||
gameFielg[i][k].startFinish[1].vertikal!==father.finish.vertikal||
gameFielg[i][k].startFinish[1].horizont!==father.finish.horizont
)){


	
gameFielg[i][k].inUse=false;
gameFielg[i][k].h=0;
gameFielg[i][k].f=0;
gameFielg[i][k].g=0;	
	
};
	
*/

      let cell;

      if (gameFielg[i] && gameFielg[i][k]) {
        cell = gameFielg[i][k];
      }

      if (
        cell &&
        cell.forCheck !== forCheck //||
        //(gameFielg[i]&&gameFielg[i][k]&&isNaN(gameFielg[i][k].h))||
        //(gameFielg[i]&&gameFielg[i][k]&&isNaN(gameFielg[i][k].f))
      ) {
        cell.inUse = false;
        cell.h = 0;
        cell.f = 0;
        cell.g = 0;
      }
      /*
let aa;
let bb;
let cc;


if(arg&&gameFielg[i]&&gameFielg[i][k]){
	
	aa=(arg.x+50)-(gameFielg[i][k].x+50);
	bb=(arg.y+50)-(gameFielg[i][k].y+50);
	
	cc=Math.sqrt(aa*aa+bb*bb);
	
};


if(arg){
	
	console.log(cc);
	
};

*/

      /*

let dis=false;
let okey=true;

let okDrag=0;


if(!unit.fly&&arg&&gameFielg[i]&&gameFielg[i][k]&&gameFielg[i][k].unit&&gameFielg[i][k].unit.unitStatus==="life"){
	
let a=unit.x-gameFielg[i][k].x;
let b=unit.y-gameFielg[i][k].y;

dis=Math.sqrt(a*a+b*b);

if(dis<arg){okey=false;};

};
//*/

      ///////////////

      let okDrag = 0;

      if (unit.fly) {
        //console.log("fly");

        for (let v = i - 1; v <= i; v++) {
          for (let h = k; h <= k + 1; h++) {
            let dc;

            if (gameFielg[v] && gameFielg[v][h]) {
              dc = gameFielg[v][h];
            }

            if (
              dc &&
              (!dc.dragoon ||
                (dc.dragoon &&
                  dc.dragoon.persolalNumber === unit.persolalNumber))
            ) {
              okDrag++;
            } else {
              break;
            }
          }
        }
      }

      ///*
      let ok2 = false;

      let a, c, b;

      //console.log(unit.goGroop)
      //floorGlobalTimer

      if (
        unit.gabarit === 50 &&
        cell &&
        cell.unit &&
        cell.unit.gabarit === 50 &&
        cell.unit.unitStatus === "life" &&
        (cell.unit.way.length ||
          cell.unit.fatherFraction.union !== unit.fatherFraction.union ||
          (unit.hold_position &&
            cell.unit.hold_position &&
            unit.hold_position === cell.unit.hold_position &&
            !unit.iNeedFreeWay))
      ) {
        a = cell.unit.cell.x - unit.cell.x;
        b = cell.unit.cell.y - unit.cell.y;

        c = Math.sqrt(a * a + b * b);

        if (
          (c >= 80 ||
            (unit.hold_position &&
              cell.unit.hold_position &&
              unit.hold_position === cell.unit.hold_position &&
              unit.persolalNumber !== cell.unit.persolalNumber) ||
            (unit.goGroop && cell.unit.goGroop && unit.isBlockedMem) ||
            (unit.goGroop &&
              cell.unit.goGroop &&
              unit.speed <= cell.unit.speed)) &&
          !unit.iNeedFreeWay
        ) {
          ok2 = true; //console.log("pizdez");
        }
      }

      //console.log()
      //*/

      let hart =
        (cell &&
          !unit.fly &&
          (cell.free ||
            //||
            //(!gameFielg[i][k].free&&gameFielg[i][k].unit&&gameFielg[i][k].unit.unitStatus==="life"&&okey)
            ok2)) ||
        (unit.fly && okDrag === 4);

      ///////////////////////
      //if(!arg){okey=false;};
      //console.log(arg);
      if (
        hart &&
        !cell.inUse &&
        !cell.f
        //&&
        //!(gameFielg[i][k].vertikal==this.vertikal&&gameFielg[i][k].horizont==this.horizont)
      ) {
        let a = Math.abs(father.finish.horizont - cell.horizont);
        let b = Math.abs(father.finish.vertikal - cell.vertikal);

        let c = a + b;

        //console.log(c)
        //if(!father.finish.horizont){console.log("koshmar " +father.finish.horizont);};/////////////!!!!!!!!!!!!!!!!

        if (koof === 0) {
          cell.g = this.g + 14;
        }
        if (koof === 1) {
          cell.g = this.g + 10;
        }
        if (koof === 2) {
          cell.g = this.g + 14;
        }

        if (koof === 3) {
          cell.g = this.g + 10;
        }
        if (koof === 5) {
          cell.g = this.g + 10;
        }

        if (koof === 6) {
          cell.g = this.g + 14;
        }
        if (koof === 7) {
          cell.g = this.g + 10;
        }
        if (koof === 8) {
          cell.g = this.g + 14;
        }

        //koof++;
        //console.log(c2);

        cell.father = gameFielg[this.vertikal][this.horizont];

        //this.vektors.push(gameFielg[i][k]);

        vektors.push(cell);

        allVektors.push(cell);

        cell.h = c * 10; //+c2//+v+h;

        cell.f = gameFielg[i][k].g + cell.h;

        //gameFielg[i][k].startFinish=[father,father.finish];

        cell.forCheck = forCheck;

        /*	
	
for(let d=0;d<target.contaktCells.length;d++){
		
		if(gameFielg[i][k].vertikal===target.contaktCells[d].vertikal&&gameFielg[i][k].horizont===target.contaktCells[d].horizont){
			
		//father.finish.myWay(gameFielg[i][k]);	
			
		//father.finish=gameFielg[i][k];

		//father.finish.myWay(father.finish);
			
		//target.stop=true;	
			
			
			console.log(gameFielg[i][k])
			
			break
			
		};
		
		
	};	
		
//*/

        ///*
        if (
          cell.vertikal === father.finish.vertikal &&
          cell.horizont === father.finish.horizont
        ) {
          //console.log("sucssess!!!!!!!!!!!!!!!");

          father.finish.myWay(father.finish);
          //arg.way=father.way;

          //vektors=[];
          //allVektors=[];
          //father=0;

          //if(unit.type==="dragoon"){console.log(father);pausa=1;};
        }
      } else if (
        hart &&
        !cell.inUse &&
        cell.f &&
        !(cell.vertikal == this.vertikal && cell.horizont == this.horizont)
      ) {
        //gameFielg[i][k].startFinish=[father,father.finish];
        cell.forCheck = forCheck;

        let g;

        if (koof === 0) {
          g = this.g + 14;
        }
        if (koof === 1) {
          g = this.g + 10;
        }
        if (koof === 2) {
          g = this.g + 14;
        }

        if (koof === 3) {
          g = this.g + 10;
        }
        if (koof === 5) {
          g = this.g + 10;
        }

        if (koof === 6) {
          g = this.g + 14;
        }
        if (koof === 7) {
          g = this.g + 10;
        }
        if (koof === 8) {
          g = this.g + 14;
        }

        if (g < cell.g) {
          cell.g = g;

          let a = Math.abs(father.finish.horizont - cell.horizont);
          let b = Math.abs(father.finish.vertikal - cell.vertikal);

          let c = a + b;

          cell.father = gameFielg[this.vertikal][this.horizont];

          cell.h = c * 10; //+c2//+v+h;

          cell.f = cell.g + cell.h;

          //console.log(gameFielg[i][k].f);
        }

        //koof++;
      }
      koof++;
    }
  }
};

const getBastVektors = function () {
  let bast = 0;
  let index = 0;

  for (let i = 0; i < vektors.length; i++) {
    if (!vektors[i].trup && !vektors[i].inUse) {
      if (i === 0) {
        bast = vektors[i];
        index = i;
      } else {
        if (vektors[i].f < bast.f) {
          bast = vektors[i];
          index = i;
        }
      }
    }

    //	console.log(vektors[i].distanse);
  }

  vektors.splice(index, 1);

  bast.inUse = true;

  //console.log(bast);

  return bast;
};

Obj.prototype.myWay = function (arg) {
  let b = this.father;

  father.way.push(arg);
  father.way[father.way.length - 1].drawWay = 1;

  //console.log(b);

  let a = father.x - father.finish.x;
  let s = father.y - father.finish.y;

  let c = Math.sqrt(a * a + s * s);

  //console.log(c);

  if (c < 100) {
    return;
  }

  father.wayLength = 0;

  while (true) {
    father.wayLength += b.g;

    father.way.push(b);

    b = father.way[father.way.length - 1].father;

    father.way[father.way.length - 1].drawWay = 1;

    if (b.vertikal === father.vertikal && b.horizont === father.horizont) {
      //console.log(father)

      break;
    }
  }
};

Obj.prototype.getH = function () {
  if (
    !father ||
    !father.finish ||
    father.finish.vertikal === undefined ||
    father.finish.horizont === undefined
  ) {
    console.log("pizdez");
    return;
  }

  let a = Math.abs(father.finish.vertikal - this.vertikal);
  let b = Math.abs(father.finish.horizont - this.horizont);

  let c = a + b;

  this.h = c * 10;
};

const getBastH = function () {
  let bast = 0;
  //let index=0;

  for (let i = 0; i < allVektors.length; i++) {
    if (i === 0) {
      bast = allVektors[i];
      //index=i;
    } else {
      if (allVektors[i].h < bast.h) {
        bast = allVektors[i];
      }
    }

    //	console.log(vektors[i].distanse);
  }

  //allVektors.splice(index,1);

  //bast.inUse=true;
  father.inUse = false;

  //vektors=[];
  vektors.push(gameFielg[father.vertikal][father.horizont]);
  //allVektors=[];
  //father=0;

  return bast;
};

Fraction.prototype.unitsUpdate = function () {
  //myJoube unterTowers lesopilka
  //checkAlarms //active peon_managmant nar

  this.batraks = [];
  this.mechniks = [];
  this.rizars = [];
  this.luchniks = [];
  this.dragons = [];
  this.mags = [];
  //this.ogreBases=[];
  //this.townHolls=[];
  //this.baracks=[];
  //this.lesopilkas=[];
  //this.batraksOnGolg=[];
  //this.batraksOnWood=[];
  this.freeBatraks = [];
  //this.towers=[];
  //this.kuznyas=[];
  //this.altars=[];
  //this.unterTowers=[];
  this.ballistas = [];
  this.freeBallistas = [];
  this.freeDragons = [];
  //this.farms=[];

  this.freeBatraks = [];
  this.freeRizzars = [];
  this.freeLuchniks = [];
  this.freeMechniks = [];
  this.transports = [];
  this.oil_tankers = [];
  this.freeTransports = [];
  this.ships = [];
  this.warriors = [];
  this.distroers = [];
  this.linkors = [];
  this.turtles = [];

  this.war_ships = [];

  //if(!this.objects_on_continents){
  //////////////////////////////////////////////// continents
  this.objects_on_continents = [0];
  this.warriors_on_continents = [0];
  this.batraks_on_continents = [0];

  for (let i = 1; i < allContinents.length; i++) {
    this.objects_on_continents.push([]);
    this.warriors_on_continents.push([]);
  }
  /////////////////////////////////////////////////
  //};

  //////////////////////////////////////////////// seas
  this.objects_on_seas = [0];
  this.warriors_on_seas = [0];

  for (let i = 1; i < allSeas.length; i++) {
    this.objects_on_seas.push([]);
    this.warriors_on_seas.push([]);
  }
  /////////////////////////////////////////////////

  //console.log(this.objects_on_continents); pausa=1;

  for (let i = 0; i < this.buildings.length; i++) {
    if (
      !this.buildings[i] ||
      this.buildings[i].hp <= 0 ||
      this.buildings[i].buildready <= 0
    ) {
      //console.log(this.buildings[i].unitName); pausa=1;

      this.buildings.splice(i, 1);
      i--;
    } else {
      if (this.buildings[i].cell.continent) {
        this.objects_on_continents[this.buildings[i].cell.continent].push(
          this.buildings[i]
        );
      } else if (
        this.buildings[i].cell.sea &&
        !this.buildings[i].my_continent
      ) {
        this.objects_on_seas[this.buildings[i].cell.sea].push(
          this.buildings[i]
        );
      } else {
        this.objects_on_continents[this.buildings[i].my_continent].push(
          this.buildings[i]
        );
      }
    }
  }

  for (let i = 0; i < this.peoples.length; i++) {
    let unit = this.peoples[i];

    //if(!unit){pausa=1;};

    if (!unit || unit.readyToOut) {
      this.peoples.splice(i, 1);
      i--;
    } else {
      if (unit.cell && unit.cell.continent) {
        if (!unit.fly) {
          this.objects_on_continents[unit.cell.continent].push(unit);
        }
      }

      for (let i = 0; i < unit.hp_up.length; i++) {
        if (unit.hp_up[i].timer) {
          unit.hp_up[i].timer--;
        }

        if (unit.hp_up[i].timer % 4 === 0) {
          unit.hp_up[i].animX += 100;
        }
        if (!unit.hp_up[i].timer) {
          unit.hp_up.splice(i, 1);
          i--;
        }
      }

      if (unit.nar) {
        unit.nar--;
      }

      if (unit.type === 1) {
        this.batraks.push(unit);
        this.batraks_on_continents.push(unit);

        if (!unit.active) {
          this.freeBatraks.push(unit);
        }
        //if(unit.myJoube==="shahter"){this.batraksOnGolg.push(unit);};
        //if(unit.myJoube==="lesorub"){this.batraksOnWood.push(unit);};
      } else if (unit.unitName === "mag") {
        unit.mana += 0.02;
        if (unit.mana > 100) {
          unit.mana = 100;
        }

        this.warriors.push(unit);
        this.mags.push(unit);
        if (unit.cell) {
          this.warriors_on_continents[unit.cell.continent].push(unit);
        }
        //if(!unit.active){this.freeMechniks.push(unit);};
      } else if (unit.unitName === "mechnick") {
        unit.attack = Math.round(unit.baseAttack * this.dopNoFlyAttack);
        unit.panzer = Math.round(unit.basePanzer * this.dopNoFlyPanzer);

        unit.level = 1 + this.dopNoFlyAttack_level + this.dopNoFlyPanzer_level;

        this.warriors.push(unit);
        this.mechniks.push(unit);
        if (unit.cell) {
          this.warriors_on_continents[unit.cell.continent].push(unit);
        }
        if (!unit.active) {
          this.freeMechniks.push(unit);
        }
      } else if (unit.unitName === "luchnik") {
        if (this.nation === "orc" && unit.hp > 0) {
          unit.hp += 0.015;

          if (unit.hp > unit.hpfull) {
            unit.hp = unit.hpfull;
          }
        }

        unit.attack = Math.round(unit.baseAttack * this.dopFlyAttack);
        unit.seeing = unit.baseSeeing + this.dopFlySee;

        unit.level = 1 + this.dopFlyAttack_level + this.dopFlySee_level;

        this.warriors.push(unit);
        this.luchniks.push(unit);
        if (unit.cell) {
          this.warriors_on_continents[unit.cell.continent].push(unit);
        }
        if (!unit.active) {
          this.freeLuchniks.push(unit);
        }
      } else if (unit.unitName === "ballista") {
        unit.attack = Math.round(unit.baseAttack * this.dopBallista);

        unit.level = 1 + this.dopBallista_level;

        this.warriors.push(unit);
        this.ballistas.push(unit);
        if (unit.cell) {
          this.warriors_on_continents[unit.cell.continent].push(unit);
        }
        if (!unit.active) {
          this.freeBallistas.push(unit);
        }
      } else if (unit.unitName === "rizar") {
        /*
				if(
				!unit.cell&&!unit.pas
				
				||
				(unit.cell&&unit.cell.vossalObj)
				||
				(unit.cell&&unit.cell.unit.persolalNumber!==unit.persolalNumber)
				){console.log(unit);pausa=1;};
				*/

        unit.attack = Math.round(unit.baseAttack * this.dopNoFlyAttack);
        unit.panzer = Math.round(unit.basePanzer * this.dopNoFlyPanzer);

        unit.level = 1 + this.dopNoFlyAttack_level + this.dopNoFlyPanzer_level;

        if (this.canMagick) {
          unit.mana += 0.06;
        }
        if (unit.mana > 100) {
          unit.mana = 100;
        }

        this.warriors.push(unit);
        this.rizars.push(unit);
        if (unit.cell) {
          this.warriors_on_continents[unit.cell.continent].push(unit);
        }
        if (!unit.active) {
          this.freeRizzars.push(unit);
        }
      } else if (unit.unitName === "dragoon") {
        this.dragons.push(unit);
        //this.warriors_on_continents[unit.cell.continent].push(unit);
        if (!unit.active) {
          this.freeDragons.push(unit);
        }
      } else if (unit.unitName === "transport") {
        this.ships.push(unit);
        this.transports.push(unit);
        this.objects_on_seas[unit.cell.sea].push(unit);

        if (
          !unit.way.length &&
          !unit.clickSave &&
          !unit.handCell &&
          !unit.handTarget
        ) {
          this.freeTransports.push(unit);
          //this.objects_on_seas.push(unit);
        }
      } else if (unit.unitName === "oil_tanker") {
        this.ships.push(unit);
        this.oil_tankers.push(unit);

        if (unit.cell) {
          this.objects_on_seas[unit.cell.sea].push(unit);
        }
      } else if (unit.unitName === "distroer") {
        unit.attack = Math.round(unit.baseAttack * this.dopAttack);
        unit.level = 1 + this.dopAttack_level;

        this.ships.push(unit);
        this.distroers.push(unit);

        //if(unit.cell){
        this.objects_on_seas[unit.cell.sea].push(unit);
        this.warriors_on_seas[unit.cell.sea].push(unit);
        this.war_ships.push(unit);
        //};
      } else if (unit.unitName === "linkor") {
        unit.attack = Math.round(unit.baseAttack * this.dopAttack);

        unit.level = 1 + this.dopAttack_level;

        this.ships.push(unit);
        this.linkors.push(unit);

        //if(unit.cell){
        this.objects_on_seas[unit.cell.sea].push(unit);
        this.warriors_on_seas[unit.cell.sea].push(unit);
        this.war_ships.push(unit);
        //};
      } else if (unit.unitName === "turtle") {
        //unit.visible=false;
        //unit.draw_visible=false;

        unit.attack = Math.round(unit.baseAttack * this.dopAttack);

        unit.level = 1 + this.dopAttack_level;

        turtles_mass.push(unit);

        this.ships.push(unit);
        this.turtles.push(unit);

        //if(unit.cell){
        this.objects_on_seas[unit.cell.sea].push(unit);
        this.warriors_on_seas[unit.cell.sea].push(unit);
        this.war_ships.push(unit);
        //};
      }
    }
  }
};

const fractionsControl = function () {
  //ii_attack	nar

  for (let i = 0; i < turtles_mass.length; i++) {
    let obj = turtles_mass[i];

    let light;

    for (let k = 0; k < obj.animys.length; k++) {
      let unit = obj.animys[k];

      if (unit && unit.hp > 0 && unit.light) {
        //console.log("here");

        if (
          unit &&
          unit.warrior &&
          unit.iCanGetSweem &&
          (unit.unitStatus === "building" || unit.fl || unit.gabarit > 50)
        ) {
          let a = unit.damagePointX - obj.damagePointX;
          let b = unit.damagePointY - obj.damagePointY;

          let c = Math.sqrt(a * a + b * b);

          //console.log("here");

          if (
            c <= unit.seeing &&
            (unit.unitStatus === "building" || unit.fly || c <= 141.5)
          ) {
            if (!obj.visible) {
              obj.cellUpdate();
            }

            obj.visible = true;
            obj.draw_visible = true;

            light = true;

            break;
          }

          //obj.visible=true; obj.draw_visible=true;
        }
      }
    }

    if (!light) {
      obj.visible = false;
      obj.draw_visible = false;
    }
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////

  turtles_mass = [];

  for (let i = 0; i < fractions.length; i++) {
    //getDragonsGroopPosition
    fractions[i].persolalNumber = i;

    fractions[i].unitsUpdate();

    fractions[i].globalUpdate();

    //hold_position
    /////////////////////////////////////////////////////////////////////////////////	vynosit v otdelniy metod
    /*
let farms=0;
	
for(let k=0;k<fractions[i].farms.length;k++){

if(fractions[i].farms[k].hp>0&&fractions[i].farms[k].buildready>=fractions[i].farms[k].hpfull){
	
	farms++;
	
};	
	
};

fractions[i].maxUnits=farms*5;		
*/
    //////////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////

    if (fractions[i].control === "comp") {
      fractions[i].ii(i);
    }
    //else{

    ////////////////////////////////////////////////////////

    //console.log(fractions[i].selectUnits.length);
    let save = [];

    for (let k = 0; k < fractions[i].selectUnits.length; k++) {
      //if(!fractions[i].selectUnits[k].cell){fractions[i].selectUnits.splice(k,1);k--;};

      let saveMyWey;

      //fractions[i].selectUnits[k].finish=	fractions[i].selectUnits[k].extraFin;
      //fractions[i].selectUnits[k].saveFinish=	fractions[i].selectUnits[k].extraFin;
      //fractions[i].selectUnits[k].sosFin=	fractions[i].selectUnits[k].extraFin;

      if (
        fractions[i].selectUnits[k] &&
        fractions[i].selectUnits[k].unitStatus === "life" &&
        fractions[i].selectUnits[k].goGroop &&
        fractions[i].selectUnits[k].finish && //&&
        //fractions[i].selectUnits[k].cell
        fractions[i].selectUnits[k].finish.persolalNumber !==
          fractions[i].selectUnits[k].cell.persolalNumber &&
        !fractions[i].selectUnits[k].target &&
        !fractions[i].selectUnits[k].handTarget &&
        fractions[i].selectUnits[k].stepTakt < 1 &&
        fractions[i].selectUnits[k].stepTakt >= 0
      ) {
        //if(fractions[i].selectUnits[k].handCell===0){
        fractions[i].selectUnits[k].handCell =
          fractions[i].selectUnits[k].finish;
        //};
        if (fractions[i].selectUnits[k].hold_position) {
          fractions[i].selectUnits[k].goGroop = 0;
        }

        //console.log("eto");

        //fractions[i].selectUnits[k].myReset=0;

        //if(fractions[i].selectUnits[k].type===2){console.log("ok");};

        /*
if(fractions[i].selectUnits[k].goGroop){
fractions[i].selectUnits[k].goGroop--;
};
*/

        //let a=fractions[i].selectUnits[k].damagePointX-fractions[i].selectUnits[k].handCell.x+25;
        //let b=fractions[i].selectUnits[k].damagePointY-fractions[i].selectUnits[k].handCell.y+25;

        //let c=Math.sqrt(a*a+b*b);

        //if(c<=150){fractions[i].selectUnits[k].goGroop=0;};

        //fractions[i].selectUnits[k].sosFin=fractions[i].selectUnits[k].finish;

        fractions[i].selectUnits[k].way = [];

        //fractions[i].selectUnits[k].saveFinish=fractions[i].selectUnits[k].sosFin;
        //console.log(fractions[i].selectUnits[k].handCell);

        ////*
        //console.log("hren");

        fractions[i].selectUnits[k].isBlockedMem =
          fractions[i].selectUnits[k].isBlocked();

        getWay(fractions[i].selectUnits[k], 0, 1000);

        saveMyWey = fractions[i].selectUnits[k].way; //
        fractions[i].selectUnits[k].way = [];
        fractions[i].selectUnits[k].finish =
          fractions[i].selectUnits[k].groupCentrCell;
        getWay(fractions[i].selectUnits[k], 0, 2000);
        fractions[i].selectUnits[k].wayLength =
          fractions[i].selectUnits[k].way.length;
        fractions[i].selectUnits[k].way = saveMyWey;
        //fractions[i].selectUnits[k].getWayLength();

        fractions[i].selectUnits[k].saveFinish =
          fractions[i].selectUnits[k].finish;
        fractions[i].selectUnits[k].finish = 0; ///////////////////////////////
        fractions[i].selectUnits[k].isBlockedMem = false;
        //*/
        //console.log(fractions[i].selectUnits[k].way.length)

        if (
          fractions[i].selectUnits[k].way.length &&
          !fractions[i].selectUnits[k].active
        ) {
          if (
            fractions[i].activeUnits.indexOf(fractions[i].selectUnits[k]) !== -1
          ) {
            fractions[i].activeUnits.splice(
              fractions[i].activeUnits.indexOf(fractions[i].selectUnits[k]),
              1
            );

            //console.log("uh-ty");
          }
          //console.log(fractions[i].activeUnits.indexOf(fractions[i].selectUnits[k]));
          //fractions[i].activeUnits.push(fractions[i].selectUnits[k]);
          //fractions[i].selectUnits[k].active=true;

          if (!save.length) {
            save.push(fractions[i].selectUnits[k]);
          } else {
            //console.log(save[0].way[save[0].way.length-1].g);

            for (let h = 0; h < save.length; h++) {
              //fractions[i].selectUnits[k].way=saveMyWey;

              if (fractions[i].selectUnits[k].wayLength <= save[h].wayLength) {
                save.splice(h, 0, fractions[i].selectUnits[k]);

                break;
              }

              if (h === save.length - 1) {
                save.push(fractions[i].selectUnits[k]);

                break;
              }
            }
            //console.log(save[0].wayLength);
          }

          //console.log(save);
        }

        //console.log(fractions[i].selectUnits[k].way.length)
      }
      /*
		else if(fractions[i].selectUnits[k]&&

fractions[i].selectUnits[k].unitStatus==="building"&&

(!fractions[i].selectUnits[k].fatherFraction||fractions[i].selectUnits[k].fatherFraction.control==="player")
){
	
	//console.log("kjhiijdh");
};
//*/
    }

    if (save.length) {
      //const array3 = array1.concat(array2);

      fractions[i].activeUnits = fractions[i].activeUnits.concat(save);

      //console.log(fractions[i].activeUnits[0])
    }

    //console.log(fractions[i].activeUnits);
    for (let j = 0; j < fractions[i].activeUnits.length; j++) {
      let obj_obj = fractions[i].activeUnits[j];
      //console.log(fractions[i].activeUnits[j].way);

      /*	
	if(fractions[i].activeUnits[j].way.length===0&&fractions[i].activeUnits[j].stepTakt<=0
&&fractions[i].activeUnits[j].iInUse===false//&&!fractions[i].activeUnits[j].target
){
	fractions[i].activeUnits[j].moveVektor=0;
	
};
*/
      //console.log(fractions[i].activeUnits[j][0]);

      if (obj_obj && !obj_obj.way) {
        obj_obj.way = [];
      }

      if (
        !obj_obj ||
        (obj_obj.stepTakt <= 0 &&
          obj_obj.way.length === 0 &&
          obj_obj.iInUse === false &&
          !obj_obj.target &&
          (obj_obj.hp > 0 || obj_obj.distroyTimer === 0) &&
          (!obj_obj.animys || !obj_obj.animys.length) &&
          !obj_obj.handTarget &&
          !obj_obj.clickSave &&
          !obj_obj.ii_saveCell &&
          !obj_obj.magickTarget &&
          !obj_obj.rage &&
          !obj_obj.doMagick &&
          !obj_obj.landing &&
          !obj_obj.transport &&
          !obj_obj.stopTroll &&
          !obj_obj.nar &&
          !obj_obj.iFight &&
          !obj_obj.iDoTakt) ||
        obj_obj.katastrofa
      ) {
        //if(fractions[i].activeUnits[j].persolalNumber===394){console.log(fractions[i].activeUnits[j].target);};

        //console.log(obj_obj.unitName)	//active

        if (obj_obj) {
          obj_obj.ii_back = 0;
          obj_obj.stopGetTarget = 0;
          obj_obj.revers = false;

          obj_obj.tyuk = false;
          obj_obj.tyuk_rage = false;

          obj_obj.active = false;
          obj_obj.goGroop = false;
          obj_obj.iin = false;
          obj_obj.ii_saveCell_reset = 0;
          //console.log("out");
          //if(fractions[i].activeUnits[j].type==="dragoon"&&fractions[i].activeUnits[j].hp<=0){console.log("out drg");};
          obj_obj.x = obj_obj.cell.x;
          obj_obj.y = obj_obj.cell.y;
          //fractions[i].activeUnits[j].moveVektor=0;
          if (fractions[i].activeUnits[j].type === 1) {
            //console.log(fractions[i].activeUnits[j]);
            fractions[i].activeUnits[j].target = 0;
            fractions[i].activeUnits[j].iGetTarget = false;
            fractions[i].activeUnits[j].workTimeSahta = 100;
            fractions[i].activeUnits[j].waitTime = 30;
            fractions[i].activeUnits[j].myJoube = 0;
            fractions[i].activeUnits[j].x = fractions[i].activeUnits[j].cell.x;
            fractions[i].activeUnits[j].y = fractions[i].activeUnits[j].cell.y;
            fractions[i].activeUnits[j].myTargetClosed = 0;
            fractions[i].activeUnits[j].stepTakt = 0;
            fractions[i].activeUnits[j].finish = 0;
            fractions[i].activeUnits[j].saveFinish = 0;
            fractions[i].activeUnits[j].sosFin = 0;
            fractions[i].activeUnits[j].way = [];
            fractions[i].activeUnits[j].handCell = 0;
            fractions[i].activeUnits[j].myReset = 0;
            fractions[i].activeUnits[j].handCellNewWay = true;
            //fractions[i].activeUnits[j].handCell=0;
            fractions[i].activeUnits[j].handTarget = 0;
            fractions[i].activeUnits[j].iDoTakt = 0;
            //fractions[i].activeUnits[j].iGoBuild=false;
          } else if (
            fractions[i].activeUnits[j].type === 2 ||
            fractions[i].activeUnits[j].type === "ballista" ||
            fractions[i].activeUnits[j].type === "dragoon" ||
            fractions[i].activeUnits[j].type === "transport"
          ) {
            fractions[i].activeUnits[j].iGetTarget = false;
            //fractions[i].activeUnits[j].workTimeSahta=100;
            //fractions[i].activeUnits[j].waitTime=30;
            fractions[i].activeUnits[j].myJoube = 0;
            fractions[i].activeUnits[j].x = fractions[i].activeUnits[j].cell.x;
            fractions[i].activeUnits[j].y = fractions[i].activeUnits[j].cell.y;
            fractions[i].activeUnits[j].myTargetClosed = 0;
            fractions[i].activeUnits[j].stepTakt = 0;
            fractions[i].activeUnits[j].finish = 0;
            fractions[i].activeUnits[j].saveFinish = 0;
            fractions[i].activeUnits[j].sosFin = 0;
            fractions[i].activeUnits[j].way = [];
            fractions[i].activeUnits[j].handCell = 0;
            fractions[i].activeUnits[j].myReset = 0;
            fractions[i].activeUnits[j].handCellNewWay = true;
            fractions[i].activeUnits[j].handTarget = 0;
            fractions[i].activeUnits[j].iDoTakt = 0;
            fractions[i].activeUnits[j].stopGetTarget = 0;
            fractions[i].activeUnits[j].iGoBack = false;
            fractions[i].activeUnits[j].iFight = false;
            //fractions[i].activeUnits[j].handCell=0;
            fractions[i].activeUnits[j].blackBoock = [];
          } else if (
            fractions[i].activeUnits[j].type === 3 ||
            fractions[i].activeUnits[j].type === "rizar"
          ) {
            fractions[i].activeUnits[j].iGetTarget = false;
            //fractions[i].activeUnits[j].workTimeSahta=100;
            //fractions[i].activeUnits[j].waitTime=30;
            fractions[i].activeUnits[j].myJoube = 0;
            fractions[i].activeUnits[j].x = fractions[i].activeUnits[j].cell.x;
            fractions[i].activeUnits[j].y = fractions[i].activeUnits[j].cell.y;
            fractions[i].activeUnits[j].myTargetClosed = 0;
            fractions[i].activeUnits[j].stepTakt = 0;
            fractions[i].activeUnits[j].finish = 0;
            fractions[i].activeUnits[j].saveFinish = 0;
            fractions[i].activeUnits[j].sosFin = 0;
            fractions[i].activeUnits[j].way = [];
            fractions[i].activeUnits[j].handCell = 0;
            fractions[i].activeUnits[j].myReset = 0;
            fractions[i].activeUnits[j].handCellNewWay = true;
            fractions[i].activeUnits[j].handTarget = 0;
            fractions[i].activeUnits[j].iDoTakt = 0;
            fractions[i].activeUnits[j].stopGetTarget = 0;
            fractions[i].activeUnits[j].stopTroll = 0;
            fractions[i].activeUnits[j].iGoBack = false;
            fractions[i].activeUnits[j].iFight = false;
            //fractions[i].activeUnits[j].handCell=0;
          }

          fractions[i].activeUnits[j].active = false;
        }

        fractions[i].activeUnits.splice(j, 1);

        j--;
      } else {
        fractions[i].activeUnits[j].prog(fractions[i].activeUnits[j]);
        fractions[i].activeUnits[j].active = true;
      }
    }

    for (let k = 0; k < fractions[i].activeBuildings.length; k++) {
      if (fractions[i].activeBuildings[k]) {
        fractions[i].activeBuildings[k].prog();
      }

      if (
        //(
        //fractions[i].activeBuildings[k].iComplite&&
        //fractions[i].activeBuildings[k].hp===fractions[i].activeBuildings[k].hpfull&&!fractions[i].activeBuildings[k].myJoubeTimer)||
        fractions[i].activeBuildings[k].readyToOut ||
        !fractions[i].activeBuildings[k]
      ) {
        //console.log(fractions[i].activeBuildings[k].readyToOut);
        if (fractions[i].activeBuildings[k]) {
          fractions[i].activeBuildings[k].readyToOut = false;
        }

        fractions[i].activeBuildings.splice(k, 1);
        k--;
      }

      //this.target.buildready>=this.target.hpfull
    }
  }
  //};
};

//selectUnit

DragoonDamage.prototype.prog = function (mySelf) {
  if (this.timer) {
    this.timer--;
    //pausa=1

    if (this.timer <= 60 && this.timer % 4 === 0) {
      this.animX += 100;

      if (this.animX === 700) {
        this.animY += 100;
        this.animX = 0;
      }

      if (!this.boo) {
        this.boo = new Unit("boo");

        this.boo.x = this.x;
        this.boo.y = this.y;
        this.boo.horizont = this.horizont;
        this.boo.vertikal = this.vertikal;
        this.boo.alpf = 1;
        this.boo.distroyTimer = 400;

        if (
          !gameFielg[this.vertikal][this.horizont].water &&
          !gameFielg[this.vertikal][this.horizont].water_line &&
          this.dragoon.fatherFraction.nation === "orc"
        ) {
          gameFielg[this.vertikal][this.horizont].pen.unshift(this.boo);
        }

        let units = [];

        for (let ver = this.vertikal - 4; ver <= this.vertikal + 4; ver++) {
          for (let hor = this.horizont - 4; hor <= this.horizont + 4; hor++) {
            if (gameFielg[ver] && gameFielg[ver][hor]) {
              if (
                gameFielg[ver][hor].dragoon &&
                gameFielg[ver][hor].dragoon.persolalNumber !==
                  this.dragoon.persolalNumber &&
                units.indexOf(gameFielg[ver][hor].dragoon) === -1
              ) {
                units.push(gameFielg[ver][hor].dragoon);
              }

              if (
                gameFielg[ver][hor].unit &&
                !gameFielg[ver][hor].unit.neitral &&
                gameFielg[ver][hor].unit.hp > 0 &&
                gameFielg[ver][hor].unit.cell &&
                units.indexOf(gameFielg[ver][hor].unit) === -1
              ) {
                units.push(gameFielg[ver][hor].unit);
              }
            }
          }
        }

        for (let i = 0; i < units.length; i++) {
          let dx;
          let dy;

          if (units[i].unitStatus === "building") {
            dx = units[i].damagePointX;
            dy = units[i].damagePointY;
          } else if (units[i].gabarit === 50) {
            dx = units[i].x + 25;
            dy = units[i].y + 25;

            //console.log("okokokok");
          } else if (units[i].gabarit === 100) {
            dx = units[i].x + 50;
            dy = units[i].y;
          }

          let a = dx - this.x;
          let b = dy - this.y;

          let c = Math.sqrt(a * a + b * b);

          let zona = 100;

          let uronDrg = this.dragoon.attack - this.dragoon.attack / (zona / c);

          //console.log(c);pausa=1;

          if (c < zona) {
            if (units[i].unitStatus === "building") {
              let hp;

              if (units[i].buildready < units[i].hpfull) {
                hp = units[i].buildready;

                units[i].buildready -=
                  uronDrg - (uronDrg * units[i].panzer) / 100;

                ///////////////////////////
                if (title.style && hp > 0 && units[i].buildready <= 0) {
                  mySelf.fatherFraction.razings++;
                }
                ////////////////////////////////////
              } else {
                hp = units[i].hp;

                units[i].hp -= uronDrg - (uronDrg * units[i].panzer) / 100;

                ///////////////////////////
                if (title.style && hp > 0 && units[i].hp <= 0) {
                  mySelf.fatherFraction.razings++;
                }
                ////////////////////////////////////
              }

              if (
                units[i].fatherFraction.activeBuildings.indexOf(units[i]) === -1
              ) {
                units[i].fatherFraction.activeBuildings.push(units[i]);
              }

              if (!units[i].alarmTimer) {
                units[i].alarmTimer = 500;
                units[i].agressor = this.dragoon;
              }
            } else {
              let hp = units[i].hp;

              units[i].hp -= uronDrg - (uronDrg * units[i].panzer) / 100;

              ///////////////////////////
              if (title.style && hp > 0 && units[i].hp <= 0) {
                mySelf.fatherFraction.kills++;
              }
              ////////////////////////////////////

              if (!units[i].active) {
                units[i].fatherFraction.activeUnits.push(units[i]);
                units[i].active = true;
              }

              if (!units[i].warrior) {
                if (!units[i].alarmTimer) {
                  units[i].alarmTimer = 500;
                  units[i].agressor = this.dragoon;
                }
              }

              if (
                units[i].hp > 0 &&
                units[i].fatherFraction.control === "comp" &&
                !units[i].iCanGetFly &&
                !units[i].way.length &&
                (!units[i].animys || !units[i].animys.length) &&
                !units[i].handTarget
              ) {
                if (units[i].fatherFraction.inPanick.indexOf(units[i]) === -1) {
                  units[i].fatherFraction.inPanick.push(units[i]);
                  units[i].panick = new Panick(
                    100,
                    units[i].cell,
                    this.dragoon
                  );
                } else if (units[i].panick) {
                  units[i].panick.timer = 100;
                  units[i].panick.agressor = this.dragoon;
                }

                //console.log("in");
              }
            }
          }
        }

        //pausa=1;
      }
    }
  } else {
    this.boo.distroyTimer--;
    this.boo.alpf = 0.01 + this.boo.distroyTimer / 400;

    if (!this.boo.distroyTimer) {
      gameFielg[this.boo.vertikal][this.boo.horizont].pen.splice(
        gameFielg[this.boo.vertikal][this.boo.horizont].pen.indexOf(this.boo),
        1
      );

      this.cell.dragoonDamages.splice(
        this.cell.dragoonDamages.indexOf(mySelf),
        1
      );
      this.readyToOut = true;
    }
  }

  //console.log(this.timer)
};

const checkAliens_sea = function (her, alien) {
  //let ok_cells=[];
  /*
for(let i=0;i<allContinents[her.cell.continent].conturLineCells.length;i++){
	
let cell=allContinents[her.cell.continent].conturLineCells[i];

	if(
	get_distanse_on_lineyka(cell,her.gabarit,alien,alien.gabarit)<=her.seeing
	){
		ok_cells.push(cell);
	};
	
};
*/

  let seeing = 10; //her.seeing/50;

  //console.log(seeing)

  for (let i = alien.vertikal - seeing; i <= alien.vertikal + seeing; i++) {
    for (let k = alien.horizont - seeing; k <= alien.horizont + seeing; k++) {
      if (
        (gameFielg[i] &&
          gameFielg[i][k] &&
          her.good_cell_for_ship(gameFielg[i][k]) &&
          //(!gameFielg[i][k].unit||gameFielg[i][k].unit.persolalNumber===this.persolalNumber)
          //&&
          //gameFielg[i][k].sea
          //&&
          //gameFielg[i][k].sea===her.cell.sea
          get_distanse_on_lineyka(
            gameFielg[i][k],
            her.gabarit,
            alien.cell,
            alien.gabarit
          ) <= her.seeing) ||
        get_distanse_on_lineyka(
          her.cell,
          her.gabarit,
          alien.cell,
          alien.gabarit
        ) <= her.seeing
      ) {
        return true;
      }
    }
  }

  //if(ok_cells.length){  wrm=ok_cells; return true;};

  return false;
};

const checkAliens = function (her, alien) {
  //let ok_cells=[];
  /*
for(let i=0;i<allContinents[her.cell.continent].conturLineCells.length;i++){
	
let cell=allContinents[her.cell.continent].conturLineCells[i];

	if(
	get_distanse_on_lineyka(cell,her.gabarit,alien,alien.gabarit)<=her.seeing
	){
		ok_cells.push(cell);
	};
	
};
*/

  //let seeing=10//her.seeing/50;

  //console.log(her.seeing)

  for (let i = alien.vertikal - 10; i <= alien.vertikal + 10; i++) {
    for (let k = alien.horizont - 10; k <= alien.horizont + 10; k++) {
      let cell;

      if (gameFielg[i] && gameFielg[i][k]) {
        cell = gameFielg[i][k];
      }

      if (
        get_distanse_on_lineyka(
          her.cell,
          her.gabarit,
          alien.cell,
          alien.gabarit
        ) <= her.seeing ||
        (cell &&
          cell.free &&
          cell.continent &&
          cell.continent === her.cell.continent &&
          get_distanse_on_lineyka(
            cell,
            her.gabarit,
            alien.cell,
            alien.gabarit
          ) <= her.seeing)
      ) {
        return true;
      }
    }
  }

  //if(ok_cells.length){  wrm=ok_cells; return true;};
  //console.log("c : "+c); pausa=1;
  //console.log("dis : "+get_distanse_on_lineyka(her.cell,her.gabarit,alien.cell,alien.gabarit));
  //console.log(her.seeing); pausa=1;

  return false;
};

/*
const get_distanse_on_lineyka=function(ot_cell,ot_gabarit,do_cell,do_gabarit){
	

let dif_hor=do_cell.horizont-ot_cell.horizont;
let dif_ver=do_cell.vertikal-ot_cell.vertikal;


//centrCell_vertikal


let distanse;

let lineyka;


if((ot_gabarit===50||ot_gabarit===150)&&do_gabarit===100){
	
lineyka=lineyka_1x1Cell_do_2x2Cell;	
	
}
else if((ot_gabarit===50||ot_gabarit===150)&&(do_gabarit===50||do_gabarit===150)){
	
lineyka=lineyka_1x1Cell_do_1x1Cell_ily_do_3x3Cell;
		
}
else if(ot_gabarit===100&&(do_gabarit===50||do_gabarit===150)){
	
lineyka=lineyka_2x2Cell_do_1x1Cell_ily_do_3x3Cell;
		
}
else if(ot_gabarit===100&&do_gabarit===100){
	
lineyka=lineyka_2x2Cell_do_2x2Cell;
		
};



//console.log(dif_ver+dif_ver); pausa=1; lineyka_2x2Cell_do_2x2Cell
//console.log(lineyka); 

if(
(dif_hor||dif_hor===0)
&&
(dif_ver||dif_ver===0)
){

distanse=lineyka.field[lineyka.vertikal+dif_ver][lineyka.horizont+dif_hor];
//if(special){console.log(distanse);};
};
//console.log(distanse);
	
/*	
if(!distanse&&distanse!==0){
	
	console.log("dif_hor : "+dif_hor);
	console.log("dif_ver : "+dif_ver);
	console.log("distanse : "+distanse);
	console.log(ot_cell.unit)
	console.log(do_cell.unit);
	
	console.log("lineyka.field : ");
	console.log(lineyka.field);
	
	
	pausa=1;
};	
	
	
return distanse;	
};
*/

const get_distanse_on_lineyka = function (
  ot_cell,
  ot_gabarit,
  do_cell,
  do_gabarit
) {
  //let dif_hor=do_cell.horizont-ot_cell.horizont;
  //let dif_ver=do_cell.vertikal-ot_cell.vertikal;

  //centrCell_vertikal

  let distanse;

  //let lineyka;

  if ((ot_gabarit === 50 || ot_gabarit === 150) && do_gabarit === 100) {
    let a = do_cell.x + 50 - (ot_cell.x + 25);
    let b = do_cell.y - (ot_cell.y + 25);

    distanse = Math.sqrt(a * a + b * b);
  } else if (
    (ot_gabarit === 50 || ot_gabarit === 150) &&
    (do_gabarit === 50 || do_gabarit === 150)
  ) {
    let a = do_cell.x - ot_cell.x;
    let b = do_cell.y - ot_cell.y;

    distanse = Math.sqrt(a * a + b * b);
  } else if (ot_gabarit === 100 && (do_gabarit === 50 || do_gabarit === 150)) {
    let a = do_cell.x + 25 - (ot_cell.x + 50);
    let b = do_cell.y + 25 - ot_cell.y;

    distanse = Math.sqrt(a * a + b * b);
  } else if (ot_gabarit === 100 && do_gabarit === 100) {
    let a = do_cell.x + 50 - (ot_cell.x + 50);
    let b = do_cell.y - ot_cell.y;

    distanse = Math.sqrt(a * a + b * b);
  }

  //console.log(dif_ver+dif_ver); pausa=1; lineyka_2x2Cell_do_2x2Cell
  //console.log(lineyka);

  //console.log(distanse);

  /*	
if(!distanse&&distanse!==0){
	
	console.log("dif_hor : "+dif_hor);
	console.log("dif_ver : "+dif_ver);
	console.log("distanse : "+distanse);
	console.log(ot_cell.unit)
	console.log(do_cell.unit);
	
	console.log("lineyka.field : ");
	console.log(lineyka.field);
	
	
	pausa=1;
};	
*/

  return distanse;
};

Unit.prototype.checkAntyMoveVektors = function (unit) {
  /*	
if(conor>=67.5&&conor<112.5){
	vector="up";
	}
else if(conor>=112.5&&conor<157.5){
	vector="up_Right";
}
else if(conor>=157.5&&conor<202.5){
	vector="right";
}
else if(conor>=202.5&&conor<247.5){
	vector="right_Down";
}
else if(conor>=247.5&&conor<292.5){
	vector="down";
}
else if(conor>=292.5&&conor<337.5){
	vector="down_Left";
}
else if((conor>=337.5&&conor<=360)||(conor>=0&&conor<22.5)){
	vector="left";
}
else if(conor>=22.5&&conor<67.5){
	vector="left_Up";
}	
*/

  if (this.persolalNumber === unit.persolalNumber) {
    return "her";
  }

  let vektor = unit.moveVektor;

  if (vektor === "up") {
    if (
      this.moveVektor === "down" ||
      this.moveVektor === "right_Down" ||
      this.moveVektor === "down_Left"
    ) {
      return "anty";
    }
  } else if (vektor === "up_Right") {
    if (
      this.moveVektor === "down_Left" ||
      this.moveVektor === "down" ||
      this.moveVektor === "left"
    ) {
      return "anty";
    }
  } else if (vektor === "right") {
    if (
      this.moveVektor === "left" ||
      this.moveVektor === "down_Left" ||
      this.moveVektor === "left_Up"
    ) {
      return "anty";
    }
  } else if (vektor === "right_Down") {
    if (
      this.moveVektor === "left_Up" ||
      this.moveVektor === "left" ||
      this.moveVektor === "up"
    ) {
      return "anty";
    }
  } else if (vektor === "down") {
    if (
      this.moveVektor === "up" ||
      this.moveVektor === "left_Up" ||
      this.moveVektor === "up_Right"
    ) {
      return "anty";
    }
  } else if (vektor === "down_Left") {
    if (
      this.moveVektor === "up_Right" ||
      this.moveVektor === "up" ||
      this.moveVektor === "right"
    ) {
      return "anty";
    }
  } else if (vektor === "left") {
    if (
      this.moveVektor === "right" ||
      this.moveVektor === "up_Right" ||
      this.moveVektor === "right_Down"
    ) {
      return "anty";
    }
  } else if (vektor === "left_Up") {
    if (
      this.moveVektor === "right_Down" ||
      this.moveVektor === "down" ||
      this.moveVektor === "right"
    ) {
      return "anty";
    }
  }

  return "her";
};

Unit.prototype.checkGoodLandingCell = function (cell) {
  //console.log("ok");

  let ok_1 = true;

  let vertikal = cell.vertikal;
  let horizont = cell.horizont;

  if (
    gameFielg[vertikal] &&
    gameFielg[vertikal][horizont] &&
    !gameFielg[vertikal - 1][horizont].water
    //||
    //!gameFielg[vertikal-1][horizont+1].water
  ) {
    vertikal += 1;
  }

  for (let v = vertikal - 1; v <= vertikal; v++) {
    for (let h = horizont; h <= horizont + 1; h++) {
      if (
        !gameFielg[v] ||
        !gameFielg[v][h] ||
        !gameFielg[v][h].water ||
        (gameFielg[v][h].unit &&
          gameFielg[v][h].unit.cell.sea &&
          gameFielg[v][h].unit.persolalNumber !== this.persolalNumber) ||
        gameFielg[v][h].vossalObj
      ) {
        ok_1 = false;
      }
    }
  }

  return ok_1;
};

Unit.prototype.getMy_landing_cell = function () {
  let min = [];

  let continent = allContinents[this.landing.base_cell.continent];

  for (let i = 0; i < continent.conturLine_sea_Cells.length; i++) {
    if (
      continent.conturLine_sea_Cells[i].sea === this.cell.sea &&
      this.checkGoodLandingCell(continent.conturLine_sea_Cells[i])
    ) {
      let dis = get_distanse_on_lineyka(
        this.landing.base_cell,
        50,
        continent.conturLine_sea_Cells[i],
        50
      );

      if (!min.length || min[0] > dis) {
        min = [dis, continent.conturLine_sea_Cells[i]];
      }
    }
  }

  if (
    !gameFielg[min[1].vertikal - 1][min[1].horizont].water ||
    !gameFielg[min[1].vertikal - 1][min[1].horizont + 1].water
  ) {
    min[1] = gameFielg[min[1].vertikal + 1][min[1].horizont];
  }

  ///*
  if (
    !gameFielg[min[1].vertikal][min[1].horizont + 1].water ||
    !gameFielg[min[1].vertikal - 1][min[1].horizont + 1].water
  ) {
    min[1] = gameFielg[min[1].vertikal][min[1].horizont - 2];
    //console.log("ok");
  }

  //min[1]=gameFielg[min[1].vertikal][min[1].horizont-2];

  return min[1];
};

Unit.prototype.panick_peoples = function (target) {
  let cells = [];

  for (let i = this.vertikal - 3; i <= this.vertikal + 3; i++) {
    for (let k = this.horizont - 3; k <= this.horizont + 3; k++) {
      if (gameFielg[i] && gameFielg[i][k] && gameFielg[i][k].free) {
        cells.push(gameFielg[i][k]);
      }
    }
  }

  let max = [];

  for (let i = 0; i < cells.length; i++) {
    let a = cells[i].x + 25 - target.damagePointX;
    let b = cells[i].y + 25 - target.damagePointY;

    let c = Math.sqrt(a * a + b * b);

    if (!max.length || max[0] < c) {
      max = [c, cells[i]];
    }
  }

  if (max.length) {
    this.clickSave = new ClickSave(0, max[1]);

    if (!this.active) {
      this.fatherFraction.activeUnits.push(this.cell.unit);
      this.active = true;
    }
  }
};

Unit.prototype.magick_ok = function (arg) {
  if (
    (arg.neitral || arg.fatherFraction.union === this.fatherFraction.union) &&
    this.type === "mag"
  ) {
    return false;
  }

  //console.log("dddd");

  if (this.magick === "cure") {
    //console.log(arg.fatherFraction.fraction===this.fatherFraction.fraction);

    if (
      arg.unitStatus === "life" &&
      !arg.neitral &&
      arg.gabarit === 50 &&
      arg.fatherFraction.fraction === this.fatherFraction.fraction &&
      arg.cell &&
      arg.hp > 0 &&
      arg.hp < arg.hpfull &&
      arg.persolalNumber !== this.persolalNumber
    ) {
      //console.log("ok");
      return true;
    } else {
      return false;
    }
  } else if (this.magick === "rage") {
    //console.log(arg.fatherFraction.fraction===this.fatherFraction.fraction);

    if (
      arg.unitStatus === "life" &&
      !arg.neitral &&
      arg.warrior &&
      arg.gabarit === 50 &&
      arg.fatherFraction.fraction === this.fatherFraction.fraction &&
      arg.cell &&
      arg.hp > 0 &&
      arg.persolalNumber !== this.persolalNumber
    ) {
      //console.log("ok");
      return true;
    } else {
      return false;
    }
  } else if (this.magick === "tor") {
    if (arg.gabarit === 50 || arg.fly) {
      return false;
    } else if (arg.gabarit > 50 && !arg.fly) {
      return true;
    }
  } else if (this.magick === "z" || this.magick === "nar") {
    if (arg.gabarit === 50 || arg.fly) {
      return true;
    } else if (arg.gabarit > 50 && !arg.fly) {
      return false;
    }
  }
};

//deep tyuk

Unit.prototype.prog = function (arg) {
  //this.mana=100;
  //if(this.type!=="transport"){console.log(this.active);}; return target handTarget
  //iin ii_saveCell hand alive_warriors
  //ii_abort continent speed born_cell clickSave target oil_tanker way

  //if(!this.fatherFraction.attack&&this.magickTarget){console.log(this.persolalNumber);}; clickSave

  //if(this.warrior&&this.handTarget){this.handTarget.hp=0;};

  //if(this.ii_attack){this.ii_saveCell=false;}; get_distanse_on_lineyka

  /////////////////////////// ii_way_reset revers

  ////////////////////////

  this.tyuk = false;
  this.tyuk_rage = false;
  //this.tyuk_magick=false;

  if (this.hp <= 0 && !this.zero) {
    this.zero = true;

    this.ii_saveCell = false;
    this.magickTarget = false;
    this.rage = 0;
    this.doMagick = false;
    this.landing = false;
    this.transport = false;
    this.stopTroll = 0;
    this.nar = 0;
    this.iFight = false;
    this.clickSave = false;
    this.hp = 0;
  }

  if (this.nar) {
    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      this.cell &&
      this.hp > 0 &&
      !this.iFight &&
      !this.anim_magick_timer
    ) {
      this.stepTakt = 0;
      this.x = this.cell.x;
      this.y = this.cell.y;

      this.way = [];

      if (this.stopTroll) {
        this.stopTroll--;
      }

      return;
    }

    this.way = [];
  }

  if (this.type === 1 && this.hp > 0) {
    if (this.stepTakt < 1 && this.stepTakt >= 0) {
      if (!this.target) {
        this.iDoTakt = 0;
      }

      if (
        this.clickSave &&
        this.clickSave.handTarget &&
        this.clickSave.handTarget.sweeme &&
        this.clickSave.handTarget.fatherFraction.fraction ===
          this.fatherFraction.fraction &&
        this.clickSave.handTarget.type === "transport" &&
        this.clickSave.handTarget.landing &&
        this.clickSave.handTarget.landing.landCells.length &&
        this.clickSave.handTarget.landing.landCells[0].continent ===
          this.cell.continent &&
        this.clickSave.handTarget.passagers.length < 9 &&
        this.clickSave.handTarget.hp > 0
      ) {
        let ran = Math.floor(Math.random() * 2);

        let cell = this.clickSave.handTarget.landing.landCells[ran];

        if (this.fatherFraction.control === "player") {
          this.p_transport = this.clickSave.handTarget;
          this.clickSave = new ClickSave(0, cell, undefined, 1000);
          this.iin = false;
        } else {
          this.clickSave = new ClickSave(0, cell);
          this.iin = false;
        }
      }
    }

    if (this.iGetTarget) {
      this.way = [];
    }

    if (!this.target || !this.cell) {
      this.iGoBuild = false;
    }

    if (this.target) {
      if (
        this.target.neitral ||
        this.target.buildready >= this.target.hpfull ||
        this.target.hp <= 0
      ) {
        this.iGoBuild = false;
      }

      if (this.target.unitName && this.target.unitName === "wood") {
        this.mw = this.target;
      }
    }

    if (this.hp <= 0 && this.mw && this.mw.hp > 0) {
      if (
        this.mw.lesorub &&
        this.mw.lesorub.persolalNumber === this.persolalNumber
      ) {
        this.mw.lesorub = 0;
        this.mw = false;

        //console.log("!!!!!!!!!!!!!!!!!");
      }
    }

    if (this.stepTakt < 1 && this.stepTakt >= 0) {
      if (this.way.length && this.cell && this.peon_s < 150) {
        if (
          !this.way[this.way.length - 1].free &&
          this.way[this.way.length - 1].unit &&
          this.way[this.way.length - 1].unit.type === 1 &&
          this.way[this.way.length - 1].unit.unitStatus === "life" &&
          this.way[this.way.length - 1].unit.fatherFraction.fraction ===
            this.fatherFraction.fraction &&
          this.way[this.way.length - 1].unit.way.length &&
          this.target &&
          this.way[this.way.length - 1].unit.target &&
          this.way[this.way.length - 1].unit.target.persolalNumber ===
            this.target.persolalNumber
        ) {
          this.x = this.cell.x;
          this.y = this.cell.y;

          this.stepTakt = 0;

          this.peon_s++;

          return;
        }
      } else {
        this.peon_s = 0;
      }
    }
  }

  if (this.alarmTimer) {
    if (this.alarmTimer === 500) {
      //console.log(this.agressor);

      this.fatherFraction.alarms.push(
        new Alarm(this.agressor, 1500, this.cell.unit)
      );

      this.agressor = 0;
    }

    this.alarmTimer--; //console.log("alarm");
  }

  ///////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////

  this.active = true;

  //indexOf

  this.iCanGet = false;

  let rage = 1;

  this.saveFinish = this.sosFin;

  if (this.goGroop) {
    this.goGroop--;
  }
  if (this.rage) {
    this.rage--;
    rage = 1.5;
  }

  /*	
if(this.type===1
&&(this.iGoBuild||this.fatherFraction.control==="player")
&&this.target&&this.target.hp===this.target.hpfull
//&&this.iGetTarget
){
	this.target.buildready=this.target.hpfull;
	this.target=0;
this.iGoBuild=false;
this.iGetTarget=false;

};	
//*/

  if (this.gabarit === 50 && this.cell) {
    this.damagePointX = this.cell.x + 25;
    this.damagePointY = this.cell.y + 25;
  } else if (this.gabarit === 100) {
    this.damagePointX = this.cell.x + 50;
    this.damagePointY = this.cell.y;
  }

  //fatherFraction
  //console.log(this.smotr);
  //myReset

  if (this.myReset >= 20) {
    this.way = [];
  }
  if (!this.way.length) {
    this.handCell = 0;
  }
  if ((this.x === this.cell.x && this.y === this.cell.y) || !this.cell) {
    this.iGetMyCell = true;
  }

  ///////////////////////////////////// fly!!!!!!!!!!!!!!!
  ///*

  if (this.warrior) {
    if (!this.cell) {
      this.way = [];
      this.handCell = 0;
      this.handTarget = 0;
      this.clickSave = false;
      this.animys = [];
      this.target = 0;
      this.stepTakt = 0;
      //console.log("need out");
      return;
    }

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      this.clickSave &&
      this.clickSave.handTarget &&
      this.clickSave.handTarget.sweeme &&
      this.clickSave.handTarget.fatherFraction.fraction ===
        this.fatherFraction.fraction &&
      this.clickSave.handTarget.type === "transport" &&
      this.clickSave.handTarget.landing &&
      this.clickSave.handTarget.landing.landCells.length &&
      this.clickSave.handTarget.landing.landCells[0].continent ===
        this.cell.continent &&
      this.clickSave.handTarget.passagers.length < 9 &&
      this.clickSave.handTarget.hp > 0
    ) {
      let ran = Math.floor(Math.random() * 2);

      let cell = this.clickSave.handTarget.landing.landCells[ran];

      if (this.fatherFraction.control === "player") {
        this.p_transport = this.clickSave.handTarget;
        this.clickSave = new ClickSave(0, cell, undefined, 1000);
        this.iin = false;

        //console.log("here");
      } else {
        this.clickSave = new ClickSave(0, cell);
        this.iin = false;
      }
    }
  }

  if (!this.iCanGetFly) {
    if (
      this.clickSave &&
      this.clickSave.handTarget &&
      this.clickSave.handTarget.fly
    ) {
      this.clickSave = 0;
    }
  }

  if (!this.iCanGetSweem && this.type !== "oil_tanker") {
    if (
      this.clickSave &&
      this.clickSave.handTarget &&
      this.clickSave.handTarget.sweeme
    ) {
      this.clickSave = 0;
    }
  }

  if (
    this.type !== "ballista" &&
    this.type !== 3 &&
    this.gabarit === 50 &&
    this.clickSave &&
    ((this.clickSave.handTarget &&
      this.clickSave.handTarget.cell &&
      ((this.clickSave.handTarget.cell.continent &&
        this.clickSave.handTarget.cell.continent !== this.cell.continent) ||
        (this.clickSave.handTarget.my_continent &&
          this.clickSave.handTarget.my_continent !== this.cell.continent))) ||
      (this.clickSave.handCell && this.clickSave.handCell.sea))
    //&&
    //(this.clickSave.handTarget.cell.continent!==this.cell.continent)
  ) {
    this.clickSave = 0;
  }

  //*/
  ////////////////////////////////////

  //indexOf

  if (this.fatherFraction.control === "player" && this.hp > 0) {
    //hold_position

    if (this.stepTakt < 1 && this.stepTakt >= 0) {
      if (
        !this.fly &&
        this.clickSave &&
        this.clickSave.handTarget &&
        (this.clickSave.handTarget.type === "gora" ||
          this.clickSave.handTarget.cell.stena)
      ) {
        let cells = [];

        for (
          let i = this.clickSave.handTarget.vertikal - 4;
          i <= this.clickSave.handTarget.vertikal + 4;
          i++
        ) {
          for (
            let k = this.clickSave.handTarget.horizont - 4;
            k <= this.clickSave.handTarget.horizont + 4;
            k++
          ) {
            if (gameFielg[i] && gameFielg[i][k]) {
              let cell = gameFielg[i][k];

              if (cell.free && cell.continent === this.cell.continent) {
                cells.push(cell);
              }
            }
          }
        }

        if (!cells.length) {
          this.clickSave = false;
        } else {
          let min = [];

          for (let i = 0; i < cells.length; i++) {
            let a = this.clickSave.handTarget.damagePointX - (cells[i].x + 25);
            let b = this.clickSave.handTarget.damagePointY - (cells[i].y + 25);

            let c = Math.sqrt(a * a + b * b);

            if (!min.length || min[0] > c) {
              min = [c, cells[i]];
            }
          }

          this.clickSave = new ClickSave(0, min[1]);
        }
      }

      /*
if(this.fatherFraction.control==="player"&&this.hold_position){

if(this.clickSave&&this.clickSave.handTarget){	
this.clickSave=false;
}

//console.log(this.way.length);	
};
*/

      if (this.handTarget && !this.handTarget.cell) {
        this.handTarget = 0;
        this.way = [];
      }

      if (this.canHold && this.hold_position) {
        if (this.animys.length && !this.stopGetTarget) {
          this.way = [];
        }

        if (this.clickSave && this.clickSave.handTarget) {
          this.clickSave = false;
          this.handTarget = 0;
        }
      }
      //////////////////////////////////////////

      if (this.canHold && (this.handCell || this.handTarget)) {
        let cell = this.handCell;

        if (this.handTarget && this.handTarget.cell) {
          cell = this.handTarget.cell;
        }

        let way;

        if (
          !this.hold_position &&
          this.way.length &&
          this.way[this.way.length - 1].unit &&
          this.way[this.way.length - 1].unit.way.length &&
          this.way[this.way.length - 1].unit.fatherFraction.union ===
            this.fatherFraction.union
        ) {
          way = this.way[this.way.length - 1].unit.way;
        }

        if (
          way &&
          this.way[this.way.length - 1].unit.speed >= this.speed &&
          this.way.length > 10 &&
          get_distanse_on_lineyka(this.way[0], 50, way[0], 50) <= 150
        ) {
          this.need_return = true;

          //console.log("stp");
          //return;
        }
      }

      //////////////////////////////////////////////////////////////

      if (this.p_transport) {
        if (
          (this.clickSave &&
            this.clickSave.handTarget &&
            this.clickSave.handTarget.type !== "transport") ||
          (this.clickSave &&
            this.clickSave.handCell &&
            this.p_transport.landing &&
            this.p_transport.landing.landCells.length &&
            this.clickSave.handCell.persolalNumber !==
              this.p_transport.landing.landCells[0].persolalNumber &&
            this.clickSave.handCell.persolalNumber !==
              this.p_transport.landing.landCells[1].persolalNumber) ||
          (this.handCell &&
            this.p_transport.landing &&
            this.p_transport.landing.landCells.length &&
            this.handCell.persolalNumber !==
              this.p_transport.landing.landCells[0].persolalNumber &&
            this.handCell.persolalNumber !==
              this.p_transport.landing.landCells[1].persolalNumber) ||
          this.handTarget ||
          this.target
        ) {
          this.p_transport = false;
        }

        if (
          !this.iFight &&
          this.cell &&
          !this.stopTroll &&
          !this.anim_magick_timer &&
          !this.magickTarget &&
          this.p_transport.landing &&
          this.p_transport.hp > 0 &&
          this.p_transport.landing.landCells.length &&
          this.p_transport.passagers.length < 9 &&
          this.p_transport.landing.landCells[0].continent ===
            this.cell.continent
        ) {
          if (
            this.cell.persolalNumber ===
              this.p_transport.landing.landCells[0].persolalNumber ||
            this.cell.persolalNumber ===
              this.p_transport.landing.landCells[1].persolalNumber
          ) {
            for (let k = 0; k < this.contaktCells.length; k++) {
              if (
                gameFielg[this.contaktCells[k].vertikal][
                  this.contaktCells[k].horizont
                ].iContaktWith.indexOf(this.contaktCells[k]) !== -1
              ) {
                gameFielg[this.contaktCells[k].vertikal][
                  this.contaktCells[k].horizont
                ].iContaktWith.splice(
                  gameFielg[this.contaktCells[k].vertikal][
                    this.contaktCells[k].horizont
                  ].iContaktWith.indexOf(this.contaktCells[k]),
                  1
                );
              }
            }

            this.p_transport.passagers.push(this.cell.unit);

            this.iin = false;

            this.cell.free = true;
            this.cell.unit = 0;
            this.cell = 0;

            //console.log(unit);
            this.p_transport = false;
            this.handCell = 0;
            this.target = false;
            this.handTarget = false;
            this.clickSave = false;
            this.way = [];

            this.vertikal = false;
            this.horizont = false;
            this.x = false;
            this.y = false;
            this.stepTakt = 0;
            this.rage = 0;
            this.transport = false;
            this.handTarget = 0;
            this.animys = [];
            this.pas = true;

            return;
          }
        } else {
          this.p_transport = false;
          this.clickSave = false;
        }
      }
    }

    this.iNeedFreeWay = false;

    if (this.iWaitMyBrosReset >= 30) {
      this.iWaitMyBrosReset++;
      this.iNeedFreeWay = true;
    }

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      //&&
      //this.fatherFraction.attack
      !this.fly &&
      !this.sweeme &&
      this.warrior &&
      //&&
      //!this.animys.length
      this.hold_position &&
      this.way.length &&
      !this.way[this.way.length - 1].free &&
      this.way[this.way.length - 1].unit &&
      !this.way[this.way.length - 1].unit.neitral &&
      this.way[this.way.length - 1].unit.fatherFraction.union ===
        this.fatherFraction.union &&
      ((this.way[this.way.length - 1].unit.way.length &&
        this.way[this.way.length - 1].unit.hold_position &&
        this.way[this.way.length - 1].unit.hold_position ===
          this.hold_position) ||
        (!this.way[this.way.length - 1].unit.way.length &&
          this.way[this.way.length - 1].unit.hold_position &&
          this.way[this.way.length - 1].unit.hold_position ===
            this.hold_position)) &&
      this.way[this.way.length - 1].unit.warrior &&
      //&&
      //this.way[this.way.length-1].unit.ii_attack
      this.iWaitMyBrosReset < 30

      //&&
      //this.way[this.way.length-1].unit.way[this.way[this.way.length-1].unit.way.length-1].persolalNumber!==this.cell.persolalNumber
    ) {
      if (!this.way[this.way.length - 1].unit.way.length) {
        this.iNeedFreeWay = true;
        this.iWaitMyBrosReset = 31;
      }

      //console.log("stop");

      //this.x=this.cell.x;
      //this.y=this.cell.y;

      this.iWaitMyBrosReset++;

      //return;

      this.need_return = true;
    } else {
      this.iWaitMyBrosReset = 0;
    }
  }

  if (this.fatherFraction.control === "comp") {
    let takt_ok = this.stepTakt < 1 && this.stepTakt >= 0;

    if (takt_ok) {
      if (this.warrior && !this.stopTroll && this.gabarit === 50 && this.cell) {
        if (
          this.cell.fraction &&
          this.cell.fraction === this.fatherFraction.fraction &&
          !this.revers
        ) {
          this.ii_saveCell = false;
        }

        if (!this.stopGetTarget || this.ii_attack) {
          this.ii_back = false;
          this.stopGetTarget = 0;
        }
        ///////////////////////////	BACK

        if (this.stopGetTarget > 2) {
          this.animys = [];
        }

        if (
          !this.ii_attack &&
          this.type !== "mag" &&
          this.target &&
          !this.iFight &&
          this.cell.continent === this.born_cell.continent
        ) {
          if (this.target.type === "tower" && this.type !== "ballista") {
            this.target = 0;
            //this.handTarget=0;
            this.way = [];
            this.stopGetTarget = 2;
            //this.clickSave=new ClickSave(0,this.born_cell,0,0,1000);
            this.ii_saveCell = this.born_cell;
            this.ii_back = 400;
            //this.console=true;

            //this.ii_saveCell=false;
          } else {
            //*

            if (
              !this.fatherFraction.stop_back &&
              !this.target.fly &&
              this.target.warrior &&
              this.target.type !== "ballista" &&
              /////////////////////////////////////////////////

              (!this.target.target || this.target.target.warrior) &&
              /////////////////////////////////////////////////

              this.target.cell &&
              this.target.unitStatus === "life" &&
              !this.target.hold_position &&
              get_distanse_on_lineyka(this.cell, 50, this.born_cell, 50) >
                150 &&
              (!this.target.cell.fraction ||
                this.target.cell.fraction !== this.fatherFraction.fraction)
            ) {
              //console.log("here");

              let ran = Math.floor(Math.random() * 7);

              if (!ran) {
                //this.clickSave=new ClickSave(0,this.born_cell);

                this.way = [];
                this.stopGetTarget = 2;
                //this.clickSave=new ClickSave(0,this.born_cell,0,0,1000);
                this.ii_saveCell = this.born_cell;

                this.target = 0;
                this.way = [];
                this.ii_back = 150 + Math.floor(Math.random() * 150);
              }
            }

            //*/
          }
        }

        ///////////////////////////

        if (
          this.way.length &&
          !this.animys.length &&
          !this.iWaitMyBrosReset &&
          this.iStand
        ) {
          this.ii_way_reset++;
        } else {
          this.ii_way_reset = 0;
        }

        if (this.ii_way_reset >= 240) {
          this.way = [];
          //console.log(this.type+" GOGOGOGOGOGOGOGOGOG");
        }
      }

      if (
        this.revers &&
        this.cell &&
        this.cell.fraction === this.fatherFraction.fraction
      ) {
        this.revers = false;
      }

      ///////////////////////////////////

      if (
        this.sweeme
        //&&this.type!=="transport"
      ) {
        if (!this.animys.length) {
          this.hold_position = this.fatherFraction.fraction;
          this.goGroop_sweeme = true;
        } else {
          this.hold_position = false;
          this.goGroop_sweeme = false;
        }
      }

      /////////////////////////////////////////////////

      if (!this.born_cell) {
        this.born_cell = this.cell;
      }

      if (
        !this.ii_attack &&
        (this.target || this.stopTroll) &&
        this.warrior &&
        !this.ii_saveCell
      ) {
        this.ii_saveCell = this.born_cell;
      }

      //if(!this.animys.length){this.magickTarget=0;};

      //if(this.type!==1&&this.born_cell&&!this.ii_attack&&this.cell.continent&&this.cell.continent===this.born_cell.continent){this.ii_saveCell=this.born_cell;};

      if (
        //takt_ok
        //&&
        this.transport &&
        //&&
        //this.handCell
        this.cell &&
        (this.transport.passagers.length === 9 ||
          this.transport.hp <= 0 ||
          (this.transport.landing && !this.transport.landing.iGetLand) ||
          this.target)
      ) {
        this.handCell = 0;
        this.way = [];
        this.transport = false;
        this.ii_saveCell = this.born_cell;
        this.iin = false;
        this.ii_attack = false;

        //this.fatherFraction.attack.warriors_flot_reserv--;
      }
    }

    /*
if(this.ii_saveCell){

if(!this.ii_attack){this.ii_saveCell=this.born_cell;};

if(this.ii_saveCell.continent&&this.ii_saveCell.continent!==this.cell.continent&&!this.fly){this.ii_saveCell=false;};


};
*/

    this.iNeedFreeWay = false;

    if (this.iWaitMyBrosReset >= 200) {
      this.iWaitMyBrosReset++;
      this.iNeedFreeWay = true;
    }

    if (
      takt_ok &&
      (this.type !== "mag" || this.mana === 100) &&
      !this.fly &&
      !this.sweeme &&
      this.warrior &&
      !this.animys.length &&
      !this.magickTarget &&
      //&&
      //!this.ii_saveCell
      //&&
      //this.ii_attack
      this.way.length &&
      !this.way[this.way.length - 1].free &&
      this.way[this.way.length - 1].unit &&
      !this.way[this.way.length - 1].unit.neitral &&
      this.way[this.way.length - 1].unit.fatherFraction.union ===
        this.fatherFraction.union &&
      this.way[this.way.length - 1].unit.way &&
      (this.way[this.way.length - 1].unit.way === "go" ||
        this.way[this.way.length - 1].unit.way.length) &&
      this.way[this.way.length - 1].unit.warrior &&
      this.way[this.way.length - 1].unit.speed > 1 && //!!!!!!!!!!!!!!!!!!!!!!
      //&&
      //this.way[this.way.length-1].unit.ii_attack
      this.iWaitMyBrosReset < 200 &&
      this.way[this.way.length - 1].unit.way[
        this.way[this.way.length - 1].unit.way.length - 1
      ].persolalNumber !== this.cell.persolalNumber
    ) {
      this.x = this.cell.x;
      this.y = this.cell.y;

      this.stepTakt = 0;

      this.iWaitMyBrosReset++;

      return;
    } else {
      this.iWaitMyBrosReset = 0;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////// WAY

    if (takt_ok && this.ii_index && this.cell && this.cell.ii_fractions_way) {
      let index =
        this.cell.ii_fractions_way[this.fatherFraction.persolalNumber].index;

      //console.log(this.ii_index); pausa=1;

      if (index && index <= this.ii_index) {
        this.ii_index = index - 1;

        if (this.ii_index < 0) {
          this.ii_index = 0;
        }

        this.clickSave = new ClickSave(
          0,
          this.fatherFraction.attack.ii_way[this.ii_index]
        );

        //console.log("here");
      }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
  }

  if (this.hp <= 0) {
    this.ii_saveCell = false;
  }

  if (this.type === "mag") {
    //magickTarget
    //animY
    //iStand
    //hp
    ///////////////////////////////////////////////////////////////////////////////////////////

    this.level = 1; //+(this.fatherFraction.dopNoFlyAttack_level)+
    //(this.fatherFraction.dopNoFlyPanzer_level);

    /*
if(this.fatherFraction.canMagick_mag){
		this.mana=(floorGlobalTimer-this.manaTimer)*25;
		}
		else{this.mana=0;};
*/

    if (this.mana > 100) {
      this.mana = 100;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////

    if (this.hp <= 0) {
      this.hp = 0;
      this.target = "dead";
    }
    //this.target="dead";
    //iStand
    if (this.target === "dead") {
      this.magickTarget = false;
      this.iDoTaktTimer = -1;
      this.iDoTakt = 0;
      //this.myJoube=0;
      this.iFight = false;
      this.way = [];
      this.speed = 0;
      //this.updateSpeed();
      this.target = 0;
      this.handTarget = 0;
      this.animys = [];
      //this.animY=900;

      if (this.distroyTimer === 1020) {
        this.animY = 900;
      }

      this.distroyTimer--;

      if (this.distroyTimer % 4 === 0) {
        this.animY += 100;
      }

      //this.distroyTimer--;

      if (this.distroyTimer === 992) {
        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );
        }

        //if(this.fatherFraction.peoples.indexOf(this.cell.unit)!==-1){this.fatherFraction.peoples.splice(this.fatherFraction.peoples.indexOf(this.cell.unit),1)};
        //if(this.fatherFraction.rizars.indexOf(this.cell.unit)!==-1){this.fatherFraction.rizars.splice(this.fatherFraction.rizars.indexOf(this.cell.unit),1)};
        if (this.fatherFraction.selectUnits.indexOf(this.cell.unit) !== -1) {
          this.fatherFraction.selectUnits.splice(
            this.fatherFraction.selectUnits.indexOf(this.cell.unit),
            1
          );
        }
        //if(this.fatherFraction.control==="comp"&&this.fatherFraction.freeRizzars.indexOf(this.cell.unit)!==-1){this.fatherFraction.freeRizzars.splice(this.fatherFraction.freeRizzars.indexOf(this.cell.unit),1)};
        this.readyToOut = true;

        //this.cell.pen.push(this.cell.unit);
        this.cell.free = true;
        this.cell.unit = 0;
      }

      if (this.distroyTimer === 0) {
        //this.cell.pen.splice(this.cell.pen.indexOf(arg),1);
        this.cell = 0;
        this.target = 0;
        this.stepTakt = 0;
      }

      //console.log("pizdez");

      return;
    }

    //console.log(!this.iFight&&!this.isBlocked()&&this.stopGetTarget===true); iCanGetSweem

    //if(this.mag_back){this.mag_back--; this.animys=[]; this.target=0; this.handTarget=0; };

    if (this.stepTakt < 1 && this.stepTakt >= 0 && !this.iFight) {
      if (this.target && (this.target.hp <= 0 || !this.target.cell)) {
        this.target = 0;
        //this.iFight=false;
        this.iDoTakt = 0;
        this.magickTarget = false;
        //this.handCell=this.target.cell;
        //this.way="go";
      } else if (
        this.handTarget &&
        (this.handTarget.hp <= 0 || !this.handTarget.cell)
      ) {
        ///*

        if (this.fatherFraction.control === "comp") {
          this.handCell = this.handTarget.cell;
          this.way = "go";

          this.handTarget = 0;
          //this.iFight=false;
          this.iDoTakt = 0;
        } else {
          if (
            this.memHT &&
            this.memHT.persolalNumber === this.handTarget.persolalNumber
          ) {
            this.handTarget = 0;
            this.way = [];
            this.clickSave = false;
            this.iDoTakt = 0;
          } else {
            this.handCell = this.handTarget.cell;
            this.way = "go";

            this.handTarget = 0;
            //this.iFight=false;
            this.iDoTakt = 0;
          }
        }
      }
    }

    //this.memHT=false;

    if (this.fatherFraction.control === "comp") {
      this.dash = 1000;
    } else {
      this.dash = 200;
    }

    //////////////////////////////////////////
    ///////////////////////////////////////////////

    //if(this.fatherFraction.control==="comp"&&this.stepTakt<1&&this.stepTakt>=0&&this.iDoTakt===0){

    // if(this.fatherFraction.freeRizzars.indexOf(this.cell.unit)!==-1){this.fatherFraction.freeRizzars.splice(this.fatherFraction.freeRizzars.indexOf(this.cell.unit),1);};

    //};
    //else if(this.fatherFraction.control==="comp"&&!this.handCell&&!this.handTarget&&this.stepTakt<1&&this.stepTakt>=0&&this.iDoTakt===0){

    // if(this.fatherFraction.freeMechniks.indexOf(this.cell.unit)===-1){this.fatherFraction.freeMechniks.push(this.cell.unit);};

    //};

    let isBlocked = this.isBlocked();

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      this.iDoTakt === 0 &&
      !this.iFight
    ) {
      //isBlocked=this.isBlocked();

      /////////////////////////////////
      /////////////////////////////////

      ///*

      if (
        this.ii_attack &&
        this.mana < 100 &&
        this.cell.continent === this.fatherFraction.continent &&
        !this.anim_magick_timer &&
        this.cell &&
        this.cell.fraction !== this.fatherFraction.fraction
      ) {
        ///*
        this.ii_attack = false;
        this.ii_saveCell = this.born_cell;
        this.stopGetTarget = 700;
        this.target = 0;
        this.clickSave = new ClickSave(0, this.born_cell);
        this.animys = [];
        this.ii_index = false;
        //*/
        ///console.log("here");
      }

      /*
if(this.handTarget){
pausa	
	this.magickTarget=this.handTarget;
	this.magick="tor";
	
};
*/
      //this.mana=100;

      if (this.fatherFraction.control === "comp") {
        //if(this.stopGetTarget){this.animys=[];};

        /*	
	if(
	this.cell
	&&
	this.cell.fraction===this.fatherFraction.fraction
	){
		this.iCanGetSweem=false;
	}
	else{
		this.iCanGetSweem=true;
	};
*/

        if (this.target && this.mana === 100) {
          if (this.fatherFraction.nation === "orc") {
            if (this.target.gabarit === 50 || this.target.fly) {
              this.magickTarget = this.target;
              this.magick = "z";
            } else {
              this.magickTarget = this.target;
              this.magick = "tor";
            }
          } else {
            if (this.target.gabarit === 50 || this.target.fly) {
              this.magickTarget = this.target;
              this.magick = "nar";
            } else {
              this.magickTarget = this.target;
              this.magick = "tor";
            }
          }
        }
        /*
	else if(this.target&&!this.stopGetTarget&&!this.ii_attack&&!this.handCell&&!this.ii_saveCell){
		
		
		this.stopGetTarget=500;
		
		this.ground_panick(this.target);
		
		//console.log("in"); pausa=1;
		
	};
	*/

        if (this.mana < 100 && !this.anim_magick_timer) {
          if (
            !this.anim_magick_timer &&
            !this.handCell &&
            !this.handTarget &&
            !this.way.length &&
            this.animys.length &&
            !this.stopGetTarget &&
            !this.clickSave
          ) {
            this.stopGetTarget = 500;

            this.ground_panick(this.animys[0]);
          }

          this.magick = false;
          this.magickTarget = false;
        }

        if (this.mana === 100) {
          this.stopGetTarget = 0;
        }
      }

      //if(this.animys.length){console.log("in"); pausa=1;};
      //if(this.target.fly){console.log(this.magickTarget); console.log(this.magick); pausa=1;};

      if (this.magickTarget || this.anim_magick_timer) {
        if (
          !this.anim_magick_timer &&
          ((this.fatherFraction.control === "player" &&
            (!this.handTarget ||
              this.handTarget.persolalNumber !==
                this.magickTarget.persolalNumber)) ||
            !this.magickTarget.cell ||
            this.magickTarget.hp <= 0 ||
            !checkAliens(this.cell.unit, this.magickTarget) ||
            this.mana < 100 ||
            !this.magick ||
            (this.magickTarget.nar &&
              this.fatherFraction.nation === "h" &&
              this.magick === "nar"))

          //||
          //(this.magickTarget.gabarit>50&&this.magick==="z")
        ) {
          this.target = 0;
          this.handTarget = 0;

          if (!this.ii_saveCell) {
            this.way = [];
          }

          this.magickTarget = false;

          //console.log("here");
        }

        //console.log(this.magickTarget);
        //console.log(this.magick);
        //pausa=1;

        if (
          (this.magickTarget &&
            get_distanse_on_lineyka(
              this.cell,
              50,
              this.magickTarget.cell,
              this.magickTarget.gabarit
            ) <= this.seeing) ||
          this.anim_magick_timer
        ) {
          //console.log("get"); pausa=1;
          this.x = this.cell.x;
          this.y = this.cell.y;

          this.way = [];

          if (!this.anim_magick_timer) {
            this.anim_magick_timer = 8;
            this.animY = 400;
            this.moveVektor = this.getFightVector(this.magickTarget);
          }

          if (this.anim_magick_timer % 2 === 0) {
            this.animY += 100;
          }

          this.anim_magick_timer--;

          if (this.anim_magick_timer === 3) {
            //console.log("z");
            if (this.magick === "z") {
              let targets = [];

              for (
                let i = this.magickTarget.vertikal - 5;
                i <= this.magickTarget.vertikal + 5;
                i++
              ) {
                for (
                  let k = this.magickTarget.horizont - 5;
                  k <= this.magickTarget.horizont + 5;
                  k++
                ) {
                  if (gameFielg[i] && gameFielg[i][k]) {
                    if (
                      gameFielg[i][k].unit &&
                      !gameFielg[i][k].unit.neitral &&
                      gameFielg[i][k].unit.fatherFraction.union !==
                        this.fatherFraction.union &&
                      gameFielg[i][k].unit.gabarit === 50 &&
                      gameFielg[i][k].unit.hp > 0 &&
                      gameFielg[i][k].unit.cell
                    ) {
                      targets.push(gameFielg[i][k].unit);

                      if (targets.length === 4) {
                        break;
                      }
                    }

                    if (
                      gameFielg[i][k].dragoon &&
                      gameFielg[i][k].dragoon.fatherFraction.union !==
                        this.fatherFraction.union &&
                      targets.indexOf(gameFielg[i][k].dragoon) === -1
                    ) {
                      targets.push(gameFielg[i][k].dragoon);

                      if (targets.length === 4) {
                        break;
                      }
                    }
                  }
                }

                if (targets.length === 4) {
                  break;
                }
              }

              for (let i = 0; i < targets.length; i++) {
                let target = targets[i];

                /////////////////////////

                this.firePointX = this.damagePointX;
                this.firePointY = this.damagePointY;

                let a = target.damagePointX - this.damagePointX;
                let b = target.damagePointY - this.damagePointY;

                let c = Math.sqrt(a * a + b * b);

                let a2 = target.damagePointX - this.firePointX;
                let b2 = target.damagePointY - this.firePointY;

                //x,y,type,target,attack,father

                let conor = Math.atan2(b, a);

                this.tyuk_rage = this.magick;

                let axe = new Axes(
                  this.firePointX,
                  this.firePointY,
                  "z",
                  undefined,
                  this.attack,
                  this.cell.unit,
                  conor
                );

                axe.takt = Math.floor(c / 24);

                ////////////////////////

                axe.dopGabKoof = 40 / axe.takt;

                /////////////////////////////

                let a3 = a2; //this.target.damagePointX-this.firePointX;
                let b3 = b2; //(this.target.damagePointY-30)-this.firePointY;

                if (target.fly) {
                  a3 = target.damagePointX - this.firePointX;
                  b3 = target.damagePointY - 30 - this.firePointY;
                  //console.log("drdrdrdrdr");
                }

                axe.gSp = a3 / axe.takt;
                axe.vSp = b3 / axe.takt;

                axe.stopDraw = 2;

                axe.target = target;
                //axe.attack=this.attack;
                //x,y,type,target,attack,father,conor

                axesFly.push(axe);

                //console.log("!!!!!!!!!!!");pausa=1

                //////////////////////////////

                if (this.fatherFraction.control === "player") {
                  this.clickSave = new ClickSave(0, "stop");
                }
              }
            } else if (this.magick === "tor") {
              let axe = new Axes(
                this.magickTarget.damagePointX,
                this.magickTarget.damagePointY,
                "tor",
                undefined,
                50,
                this.cell.unit,
                0
              );

              axe.life_timer = 2000;

              axe.cells = [];

              axesFly.push(axe);

              this.tyuk_rage = this.magick;

              ///*
              if (this.fatherFraction.control === "player") {
                this.clickSave = new ClickSave(0, "stop");
              }
              //*/

              //console.log(this.magickTarget);	pausa=1;
            } else if (this.magick === "nar") {
              this.tyuk_rage = this.magick;

              let targets = [];

              for (
                let i = this.magickTarget.vertikal - 5;
                i <= this.magickTarget.vertikal + 5;
                i++
              ) {
                for (
                  let k = this.magickTarget.horizont - 5;
                  k <= this.magickTarget.horizont + 5;
                  k++
                ) {
                  if (gameFielg[i] && gameFielg[i][k]) {
                    if (
                      gameFielg[i][k].unit &&
                      !gameFielg[i][k].unit.neitral &&
                      gameFielg[i][k].unit.fatherFraction.union !==
                        this.fatherFraction.union &&
                      gameFielg[i][k].unit.gabarit === 50 &&
                      gameFielg[i][k].unit.hp > 0 &&
                      gameFielg[i][k].unit.cell &&
                      !gameFielg[i][k].unit.nar
                    ) {
                      targets.push(gameFielg[i][k].unit);

                      if (targets.length === 10) {
                        break;
                      }
                    }

                    if (
                      gameFielg[i][k].dragoon &&
                      gameFielg[i][k].dragoon.fatherFraction.union !==
                        this.fatherFraction.union &&
                      targets.indexOf(gameFielg[i][k].dragoon) === -1
                    ) {
                      targets.push(gameFielg[i][k].dragoon);

                      if (targets.length === 10) {
                        break;
                      }
                    }
                  }
                }

                if (targets.length === 10) {
                  break;
                }
              }

              for (let i = 0; i < targets.length; i++) {
                let target = targets[i];

                target.nar = 500;
              }

              if (this.fatherFraction.control === "player") {
                this.clickSave = new ClickSave(0, "stop");
              }
            }

            //	pausa=1;
          }

          if (!this.anim_magick_timer) {
            this.magickTarget = false;
            this.magick = false;
            this.mana = 0;
            this.tyuk_rage = this.magick;

            if (this.fatherFraction.control === "comp") {
              ///*
              this.ii_attack = false;
              this.ii_saveCell = this.born_cell;
              this.stopGetTarget = 700;
              this.target = 0;
              this.clickSave = new ClickSave(0, this.born_cell);
              this.animys = [];
              this.ii_index = false;
              //*/
              //console.log("here 2");
            }
          }

          if (!this.ii_saveCell) {
            return;
          }
        }
      }

      if (this.anim_magick_timer) {
        return;
      }

      //&&
      //checkAliens(this.cell.unit,this.clickSave.handTarget)

      if (this.clickSave.handTarget && this.clickSave.handTarget === "stop") {
        this.magick = false;
        this.magickTarget = false;
        this.handTarget = 0;
        this.way = [];
        this.clickSave = false;
      }

      //*/
      ////////////////////////////////
      /////////////////////////////////

      /*
let hDis2=false;

if(this.clickSave.handTarget){
	
let a=this.clickSave.handTarget.x-this.x;
let b=this.clickSave.handTarget.y-this.y;

hDis2=Math.sqrt(a*a+b*b);	
	
};
*/

      if (
        this.clickSave
        //&&(!isBlocked||(isBlocked&&hDis2&&hDis2<80))
      ) {
        if (this.clickSave.handCell) {
          this.target = 0;
          this.handTarget = 0;
          this.iDoTakt = 0;
          this.stepTakt = 0;
          this.handCell = this.clickSave.handCell;
          this.way = "go";

          this.stopGetTarget = 50;

          if (this.handCell.persolalNumber === this.born_cell.persolalNumber) {
            this.stopGetTarget = 700;
          }

          //if(this.clickSave.wait){this.ii_saveCell=this.cell;};
          //if(this.fatherFraction.control==="comp"){this.stopGetTarget=50;};
        } else if (
          this.clickSave.handTarget &&
          (!this.handTarget ||
            this.clickSave.handTarget.persolalNumber !==
              this.handTarget.persolalNumber) &&
          checkAliens(this.cell.unit, this.clickSave.handTarget)
        ) {
          this.target = 0;
          this.handTarget = this.clickSave.handTarget;
          this.iDoTakt = 0;
          this.stepTakt = 0;
          this.handCell = 0;
          this.stopGetTarget = 50000000;

          if (this.fatherFraction.control === "comp") {
            this.stopGetTarget = 0;
          } else {
            if (this.magick && this.magick_ok(this.handTarget)) {
              this.magickTarget = this.handTarget;
              this.clickSave = false;
              //console.log("here");// ok
            }
          }
          //if(this.clickSave.wait){this.ii_saveCell=this.cell;};
        }
      }

      let del = false;

      if (
        this.fatherFraction.control === "player" &&
        this.clickSave.handTarget
      ) {
        let a = this.handTarget.damagePointX - this.damagePointX;
        let b = this.handTarget.damagePointY - this.damagePointY;

        let c = Math.sqrt(a * a + b * b);

        if (c <= 250) {
          del = true;
        }
      }

      if (this.clickSave && this.clickSave.hold) {
        this.clickSave.hold--;
      }

      if ((this.clickSave && !this.clickSave.hold) || del) {
        this.clickSave = false;
      }

      /////////////////////////////////////////////////
      /////////////////////////////////////////////////

      let hDis = false;

      if (this.handTarget) {
        hDis = this.checkGetHandTarget(true);
      }

      /*
	if(this.stopGetTarget===0
	&&this.stepTakt<1&&this.stepTakt>=0
	&&(!this.target||(this.target&&!this.checkGetTarget()))
	&&!hDis//!!!!!!!!!!?????????????
	){
		
		
for(let i=0;i<this.cell.iContaktWith.length;i++){
	
	
if(
!this.cell.iContaktWith[i].father.neitral&&
this.cell.iContaktWith[i].father.fatherFraction.union!==this.fatherFraction.union&&
this.cell.iContaktWith[i].father.warrior&&
this.cell.iContaktWith[i].father.hp>0
){	

				
				this.handTarget=0//gameFielg[i][k].unit;
				this.handCell=0;
				this.target=this.cell.iContaktWith[i].father
				this.way=[];
				this.targetCell=false;
				this.clickSave=false;
				
	//if(this.fatherFraction.control==="comp"){console.log("act");};			
				
				
};
				
};
	
	
};	
*/
    }

    //
    //if(this.stopGetTarget===50){console.log("vot");};
    if (this.stopGetTarget) {
      this.stopGetTarget--;
    }
    //if(this.iGoBack){this.iGoBack--;};

    //////////////////////////////////////////////////////////////////////////////// new!!!!
    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      !this.iFight //&&!this.iGoBack
    ) {
      for (let i = 0; i < this.animys.length; i++) {
        let c;
        if (this.animys[i] && this.animys[i].damagePointX) {
          let a = this.animys[i].damagePointX - this.damagePointX;
          let b = this.animys[i].damagePointY - this.damagePointY;

          c = Math.sqrt(a * a + b * b);
        }
        /*
if(this.fatherFraction.control==="comp"&&c<=this.dash&&this.animys[i].warrior&&!this.target){
	
	this.handCell=0;
	this.handTarget=0;
	this.way=[];
	//console.log("oklll");
};	
//*/
        if (
          /*

(

(
this.fatherFraction.control==="player"
||
this.mana<100
)
&&

(
!c
||
c>this.dash
||
!this.animys[i].cell
||
this.animys[i].hp<=0
||
!this.animys[i].cell.continent
||
this.animys[i].cell.continent!==this.cell.continent
)

)


||



*/

          //(

          //this.fatherFraction.control==="comp"
          //&&
          //(
          !c ||
          !this.animys[i] ||
          c > this.dash ||
          !this.animys[i].cell ||
          this.animys[i].hp <= 0 ||
          !this.animys[i].visible ||
          ((!this.animys[i].cell.continent ||
            (this.animys[i].cell.continent &&
              this.animys[i].cell.continent !== this.cell.continent)) &&
            !checkAliens(this.cell.unit, this.animys[i]))
          //)

          //)
        ) {
          this.animys.splice(i, 1);
          i--;
        }
      }
    }
    /////////////////////////////////////////////////////////////////////////////////////

    // ii

    if (
      this.fatherFraction.control === "comp" &&
      this.animys.length &&
      this.mana === 100 &&
      !this.stopGetTarget
    ) {
      this.handCell = 0;
      this.handTarget = 0;
    }

    // ii

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      ((!this.handCell && !this.handTarget) || this.iNeedTarget) &&
      this.stopGetTarget === 0
    ) {
      //if(this.fatherFraction.control==="comp"&&!this.target&&this.animys.length){console.log("kkkkk");	};

      let min = [];

      //if(this.fatherFraction.fraction==="redOrcs"){console.log(this.iFight);};

      let dis;

      if (this.target) {
        let a = this.target.damagePointX - this.damagePointX;
        let b = this.target.damagePointY - this.damagePointY;

        dis = Math.sqrt(a * a + b * b);
      }

      if (
        !this.iFight &&
        (!this.target || this.ii_attack) &&
        (this.fatherFraction.control === "player" || this.mana === 100)
      ) {
        //////////////////////////

        //let min=[];

        let basickMass;

        let life = [];
        let warrior = [];
        let tower = [];
        let els = [];

        for (let i = 0; i < this.animys.length; i++) {
          //if(!this.animys[i].isBlocked(this.cell.unit)){

          if (this.animys[i].type === "tower") {
            tower.push(this.animys[i]);
          } else if (this.animys[i].warrior) {
            warrior.push(this.animys[i]);
          } else if (this.animys[i].unitStatus === "life") {
            life.push(this.animys[i]);
          } else {
            els.push(this.animys[i]);
          }

          //};
        }

        if (tower.length) {
          basickMass = tower;
        } else if (warrior.length) {
          basickMass = warrior;
        } else if (life.length) {
          basickMass = life;
        } else {
          basickMass = els;
        }

        for (let i = 0; i < basickMass.length; i++) {
          let a = basickMass[i].damagePointX - this.damagePointX;
          let b = basickMass[i].damagePointY - this.damagePointY;

          let c = Math.sqrt(a * a + b * b);

          if (
            (!min.length || c < min[0]) &&
            c <= this.dash &&
            basickMass[i].hp > 0 &&
            basickMass[i].cell &&
            (!basickMass[i].nar ||
              this.fatherFraction.nation === "orc" ||
              this.fatherFraction.control === "player")
          ) {
            min = [c, basickMass[i]];
          }
        }

        /////////////////////////

        /*		
	
for(let i=0;i<this.animys.length;i++){
	
	let a=this.animys[i].damagePointX-this.damagePointX;
	let b=this.animys[i].damagePointY-this.damagePointY;
	
	let c=Math.sqrt(a*a+b*b);
	
	//this.target=this.animys[i];
	
	if((!min.length||c<min[0])&&c<=this.dash&&this.animys[i].hp>0&&this.animys[i].cell&&
	!this.animys[i].isBlocked(this.cell.unit)
	
){
		min=[c,this.animys[i]];
		};
	
	
};

*/

        if (
          (this.target &&
            min.length &&
            this.target.persolalNumber !== min[1].persolalNumber) ||
          !this.target
        ) {
          this.targetCell = false;
        } ///!!!!!!!!!!!!!!!!?????????????????

        if (min.length) {
          if (
            this.fatherFraction.control === "comp" &&
            !this.ii_attack &&
            !this.handCell &&
            !this.handTarget &&
            !this.way.length &&
            !this.ii_saveCell
          ) {
            this.ii_saveCell = this.cell;
            this.comeWithMee(min[1]);
          }

          this.target = min[1];
          this.handCell = 0;
          this.handTarget = 0;
          //this.way=[];
          this.clickSave = false;
        } else {
          this.target = 0;
        }
      }

      //console.log(this.iGetTarget);
      if (this.target) {
        // this.targetCell=this.target.cell.persolalNumber;

        if (!this.target.warrior) {
          for (let i = 0; i < this.cell.iContaktWith.length; i++) {
            if (
              !this.cell.iContaktWith[i].father.neitral &&
              this.cell.iContaktWith[i].father.fatherFraction.union !==
                this.fatherFraction.union &&
              this.cell.iContaktWith[i].father.warrior &&
              this.cell.iContaktWith[i].father.hp > 0
            ) {
              this.handTarget = 0; //gameFielg[i][k].unit;
              this.handCell = 0;
              this.target = this.cell.iContaktWith[i].father;
              this.way = [];
              this.targetCell = false;
              this.clickSave = false;
            }
          }

          //this.target=gameFielg[i][k].unit;
          //this.targetCell=false;/////////////////////////////////////////////////////////??????????????????????????????????
        }

        //let a=this.target.x-this.x;
        //let b=this.target.y-this.y;

        //let c=Math.sqrt(a*a+b*b);

        //if(c<=Math.sqrt(50*50+50*50)){
        if (!this.iFight && this.target.hp > 0 && this.target.cell) {
          this.iGetTarget = this.checkGetTarget();
        }
        //};

        if (this.iGetTarget) {
          ////////////////////////////////////////////////////////////peon

          this.peonGo(this.target);

          ////////////////////////////////////////////////////////////peon

          this.clickSave = false;

          this.moveVektor = this.getFightVector(this.target);

          //console.log(this.moveVektor);

          this.way = [];
          //};

          //if(this.iGetMyCell){
          this.iFight = true;

          //};
        } else if (
          !isBlocked &&
          !this.iFight &&
          this.target &&
          !this.target.isBlocked(this.cell.unit) &&
          (this.targetCell !== this.target.cell.persolalNumber ||
            !this.way.length ||
            (this.way.length && !this.way[this.way.length - 1].free)) &&
          (this.fatherFraction.control === "player" || this.mana === 100)
        ) {
          /*	
let alienWay=[];

if(
this.way.length&&!this.way[this.way.length-1].free
&&this.way[this.way.length-1].unit
&&this.way[this.way.length-1].unit.fatherFraction.union===this.fatherFraction.union
&&this.way[this.way.length-1].unit.way.length>=3
){
	
for(let i=this.way[this.way.length-1].unit.way.length-1;i>0;i--){
	
gameFielg[this.way[this.way.length-1].unit.way[i].vertikal][this.way[this.way.length-1].unit.way[i].horizont].free=false;

alienWay.push(gameFielg[this.way[this.way.length-1].unit.way[i].vertikal][this.way[this.way.length-1].unit.way[i].horizont]);
	
	
if(alienWay.length>=5){break;};	
};	


	
};	
	
*/

          this.targetCell = this.target.cell.persolalNumber;

          let noFree = 1000;

          this.finish = this.target.cell;
          this.sosFin = this.target.cell;
          //getWay(this.cell.unit,noFree,2000);

          /*		
let deep;

if(dis<=150){deep=10;}

	else if(dis<=300){
		deep=20;
		}
else if(dis>300&&deep<500){
	deep=30;
}
else{
	
	deep=50;
	
};		
	deep=1000;	
		
*/
          let deep = 2000;

          getWay(arg, noFree, glob_deep, this.target);

          /*		 
	for(let i=0;i<alienWay.length;i++){
	
	if(!gameFielg[alienWay[i].vertikal][alienWay[i].horizont].unit){
		gameFielg[alienWay[i].vertikal][alienWay[i].horizont].free=true;
	};
	
};	 
	*/
          //console.log("???");
        }

        this.iGetTarget = false;

        if (this.iFight) {
          if (this.iGetMyCell) {
            if (this.iDoTaktTimer === 100000) {
              this.iDoTaktTimer = 0;
            }

            //iStand
            //console.log(this.iDoTakt);

            if (this.iDoTaktTimer % 4 === 0) {
              this.iDoTakt++;
            }

            if (this.iDoTakt === 3 && !this.bom) {
              //pausa=1;

              let hp;

              let attack = this.attack * rage;
              this.tyuk = true;

              if (
                this.target.unitStatus === "building" &&
                this.target.buildready < this.target.hpfull &&
                this.target.buildready > 0
              ) {
                hp = this.target.buildready;

                this.target.buildready -=
                  attack - (attack * this.target.panzer) / 100;
              } else if (this.target.hp > 0 && this.target.cell) {
                hp = this.target.hp;

                this.target.hp -= attack - (attack * this.target.panzer) / 100;

                //console.log(this.attack-((this.attack*this.target.panzer)/100));
              }
              //indexOf
              if (this.target.unitStatus === "life") {
                if (!this.target.warrior && !this.target.alarmTimer) {
                  this.target.alarmTimer = 500;
                  this.target.agressor = this.cell.unit;
                }

                if (this.target && !this.target.active) {
                  this.target.fatherFraction.activeUnits.push(this.target);
                  this.target.active = true;
                }

                ////////////////////
                if (title.style && hp && hp > 0 && this.target.hp <= 0) {
                  this.fatherFraction.kills++;
                }
                ///////////////////////
              } else if (this.target.unitStatus === "building") {
                if (!this.target.alarmTimer) {
                  this.target.alarmTimer = 500;
                  this.target.agressor = this.cell.unit;
                }

                if (
                  this.target &&
                  this.target.fatherFraction.activeBuildings.indexOf(
                    this.target
                  ) === -1
                ) {
                  this.target.fatherFraction.activeBuildings.push(this.target);
                }

                ////////////////////
                if (
                  title.style &&
                  hp &&
                  hp > 0 &&
                  (this.target.hp <= 0 || this.target.buildready <= 0)
                ) {
                  this.fatherFraction.razings++;
                }
                ///////////////////////
              }

              this.bom = true;
              //pausa=1;
            }

            if (this.iDoTakt === 5) {
              this.iFight = false;
              this.animTimer = 100;
              this.bom = false;
              //this.cellUpdate();

              this.iDoTakt = 0;

              //pausa=1
            }
            this.iDoTaktTimer++;

            return;
          }
        }
      }
    } else if (this.handTarget && this.stepTakt < 1 && this.stepTakt >= 0) {
      //this.target=0;

      //console.log("hand");

      //this.target=this.handTarget;

      //	if(this.persolalNumber===1433&&this.handTarget.unitStatus==="building"){
      //	console.log(this.handTarget.buildready);
      //	}

      /*	
if((this.handTarget.hp<=0||!this.handTarget.cell||this.handTarget.buildready<=0||
!this.handTarget)&&!this.iFight
){this.handTarget=0;this.way=[];this.clickSave=false;};	
*/

      ///*
      //console.log(this.handTarget.unitName);

      if (!this.iFight && this.handTarget) {
        this.iGetTarget = this.checkGetHandTarget();
      }
      //};

      //if(this.handTarget.unitName==="townHoll"){
      //pausa=1;

      //console.log(this.iGetTarget);
      //};
      //*/

      if (this.iGetTarget) {
        this.memHT = this.handTarget;

        ////////////////////////////////////////////////////////////peon

        this.peonGo(this.handTarget);

        ////////////////////////////////////////////////////////////peon

        this.clickSave = false;

        this.moveVektor = this.getFightVector(this.handTarget);

        //console.log(this.moveVektor);

        //this.stopGetTarget=0;

        if (
          this.handTarget.neitral ||
          this.handTarget.fatherFraction.union === this.fatherFraction.union
        ) {
          this.handTarget = 0;
          this.way = [];
          this.clickSave = false;
          //console.log("ok");
        } else {
          //if(!this.iFight){
          this.way = [];
          //};

          //if(this.iGetMyCell){
          this.iFight = true;
          //this.stopGetTarget=2;
          //};
          this.clickSave = false;
        }
      }

      ///*
      else if (
        !this.iFight &&
        this.handTarget &&
        (this.targetCell !== this.handTarget.cell.persolalNumber ||
          (this.way.length && !this.way[this.way.length - 1].free) ||
          !this.way.length)
      ) {
        // console.log("ok");
        /*
let alienWay=[];

if(
this.way.length&&!this.way[this.way.length-1].free
&&this.way[this.way.length-1].unit
&&this.way[this.way.length-1].unit.fatherFraction.union===this.fatherFraction.union
&&this.way[this.way.length-1].unit.way.length>=3
){
	
for(let i=this.way[this.way.length-1].unit.way.length-1;i>0;i--){
	
gameFielg[this.way[this.way.length-1].unit.way[i].vertikal][this.way[this.way.length-1].unit.way[i].horizont].free=false;

alienWay.push(gameFielg[this.way[this.way.length-1].unit.way[i].vertikal][this.way[this.way.length-1].unit.way[i].horizont]);
	
	
if(alienWay.length>=5){break;};	
};	


	
};

*/

        this.targetCell = this.handTarget.cell.persolalNumber;

        noFree = 1000;

        if (this.fatherFraction.control === "comp") {
          noFree = 6000;
        }

        //let optimalContaktCell=this.getOptimalContaktCell();

        //console.log(this.target);
        this.finish = this.handTarget.cell; //this.target.cell;
        this.sosFin = this.handTarget.cell; //this.target.cell;

        //deep

        getWay(arg, noFree, glob_deep, this.handTarget);

        //console.log("way")

        /*
for(let i=0;i<alienWay.length;i++){
	
	if(!gameFielg[alienWay[i].vertikal][alienWay[i].horizont].unit){
		gameFielg[alienWay[i].vertikal][alienWay[i].horizont].free=true;
	};
	
};
*/

        ///*
        let iCanGet = this.iCanGet;
        this.iCanGet = false;
        /*	
for(let i=0;i<this.handTarget.contaktCells.length;i++){
	
	if(this.way.length&&this.way[0].horizont===this.handTarget.contaktCells[i].horizont&&
	this.way[0].vertikal===this.handTarget.contaktCells[i].vertikal
	){
		
	iCanGet=true;	
	break;	
	};
	
};
*/
        //console.log(this.handTarget)
        //console.log(this.way.length)
        if (!iCanGet) {
          if (
            this.fatherFraction.control === "player" &&
            !this.handTarget.fly &&
            !this.handTarget.sweeme
          ) {
            if (!this.way.length) {
              this.handCell = this.handTarget.cell;

              this.clickSave = false;
              this.handTarget = 0;
              //this.target=0;
              this.targetCell = false;
            } else {
              this.handCell = this.way[0];
              this.handTarget = 0;
              //this.target=0;
              this.targetCell = false;

              if (this.way.length > 1) {
                this.clickSave = false;
              }
            }
          }

          //console.log("neeee");
        } else {
          this.iGetTarget = this.checkGetHandTarget();

          if (this.iGetTarget) {
            if (
              this.handTarget.neitral ||
              this.handTarget.fatherFraction.union === this.fatherFraction.union
            ) {
              this.handTarget = 0;
              this.way = [];
              this.clickSave = false;
              //console.log("ok");
            } else {
              this.way = [];
              this.iFight = true;
              this.iGetTarget = false;
              this.clickSave = false;
              //this.stopGetTarget=2;
            }
          }
        }

        //*/

        //console.log("ok");
        /*	 
		 			let noFree=[];


for(let l=this.vertikal-7;l<this.vertikal+7;l++){
	
	for(let m=this.horizont-7;m<this.horizont+7;m++){
	
if(gameFielg[l]&&gameFielg[l][m]&&!gameFielg[l][m].free){	
		noFree.push(gameFielg[l][m]);
};
		
	};
	
};
	
	
	this.finish=this.handTarget.cell;
		getWay(this.cell.unit,noFree,2000);
		 
		 
		 
		 
	*/
      }

      //	*/
    }

    //if(this.fatherFraction.fraction==="blackOrcs"&&this.target){console.log("okokok");};

    this.iGetTarget = 0;

    if (this.iFight) {
      if (this.iGetMyCell) {
        if (this.iDoTaktTimer === 100000) {
          this.iDoTaktTimer = 0;
        }

        //iStand
        //console.log(this.iDoTakt);

        if (this.iDoTaktTimer % 4 === 0) {
          this.iDoTakt++;
        }

        if (this.iDoTakt === 3 && !this.bom) {
          let hp;

          let attack = this.attack * rage;
          this.tyuk = true;

          if (
            this.handTarget.unitStatus === "building" &&
            this.handTarget.buildready < this.handTarget.hpfull &&
            this.handTarget.buildready > 0
          ) {
            hp = this.handTarget.buildready;

            this.handTarget.buildready -=
              attack - (attack * this.handTarget.panzer) / 100;
          } else if (this.handTarget.hp > 0 && this.handTarget.cell) {
            hp = this.handTarget.hp;

            this.handTarget.hp -=
              attack - (attack * this.handTarget.panzer) / 100;
          }
          //indexOf
          if (this.handTarget.unitStatus === "life") {
            if (!this.handTarget.warrior && !this.handTarget.alarmTimer) {
              this.handTarget.alarmTimer = 500;
              this.handTarget.agressor = this.cell.unit;
            }
            ////////////////////
            if (title.style && hp && hp > 0 && this.handTarget.hp <= 0) {
              this.fatherFraction.kills++;
            }
            ///////////////////////

            if (this.handTarget && !this.handTarget.active) {
              this.handTarget.fatherFraction.activeUnits.push(this.handTarget);
              this.handTarget.active = true;
            }
          }
          if (
            this.handTarget.unitStatus === "building" &&
            !this.handTarget.neitral
          ) {
            ////////////////////
            if (
              title.style &&
              hp &&
              hp > 0 &&
              (this.handTarget.hp <= 0 || this.handTarget.buildready <= 0)
            ) {
              this.fatherFraction.razings++;
            }
            ///////////////////////

            if (!this.handTarget.alarmTimer) {
              this.handTarget.alarmTimer = 500;
              this.handTarget.agressor = this.cell.unit;
            }

            if (
              this.handTarget &&
              this.handTarget.fatherFraction.activeBuildings.indexOf(
                this.handTarget
              ) === -1
            ) {
              this.handTarget.fatherFraction.activeBuildings.push(
                this.handTarget
              );
            }
          }
          this.bom = true;
        }

        if (this.iDoTakt === 5) {
          this.iFight = false;
          this.animTimer = 100;
          this.bom = false;
          //this.cellUpdate();

          this.iDoTakt = 0;
        }
        this.iDoTaktTimer++;

        return;
      }
    }

    ///*

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      this.fatherFraction.control === "comp" &&
      !this.iFight &&
      !this.target &&
      //this.readyToOut&&
      this.ii_saveCell &&
      !this.handTarget &&
      !this.way.length &&
      !this.handCell
    ) {
      let a = this.ii_saveCell.x - this.cell.x;
      let b = this.ii_saveCell.y - this.cell.y;

      let c = Math.sqrt(a * a + b * b);

      if (c > 50) {
        this.clickSave = new ClickSave(0, this.ii_saveCell);

        //console.log(this.persolalNumber);
      }

      if (c <= 250) {
        this.ii_saveCell = 0;
      }

      //console.log(this.persolalNumber);
    }

    this.iNeedTarget = false;

    //*/
  } else if (this.type === "turtle") {
    ///////////////////////////////////////////////////////////////////////////////////////////
    //this.attack=this.baseAttack*this.fatherFraction.dopAttack;
    //this.seeing=this.baseSeeing+this.fatherFraction.dopFlySee;

    //this.level=1+(this.fatherFraction.dopAttack_level)

    ///////////////////////////////////////////////////////////////////////////////////////////

    //if(this.iDoTakt!==4){this.axe=false;};

    if (this.hp <= 0) {
      this.hp = 0;
      this.target = "dead";
    }
    //this.target="dead"; ii_saveCell
    //iStand
    if (this.target === "dead") {
      if (!this.bul_bul) {
        this.bul_bul = true;
        this.imageToDraw = bul_bul;
        this.animX = 0;
        this.animY = 0;
      }

      this.readyToOut = true;

      this.iDoTaktTimer = -1;
      this.iDoTakt = 0;
      //this.myJoube=0;

      this.way = [];
      this.speed = 0;
      this.updateSpeed();
      this.target = 0;
      this.handTarget = 0;
      this.animys = [];
      this.landing = false;
      this.rage = 0;

      this.distroyTimer--;

      if (!this.dopAnim) {
        this.dopAnim = 0;
      }

      if (this.distroyTimer % 3 === 0) {
        this.animX += 100;
      }

      if (this.distroyTimer === 0) {
        //if(this.fatherFraction.peoples.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.peoples.splice(this.fatherFraction.peoples.indexOf(this.cell.dragoon),1);};
        //if(this.fatherFraction.dragons.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.dragons.splice(this.fatherFraction.dragons.indexOf(this.cell.dragoon),1)};
        if (this.fatherFraction.selectIsSweem.indexOf(this.cell.unit) !== -1) {
          this.fatherFraction.selectIsSweem.splice(
            this.fatherFraction.selectIsSweem.indexOf(this.cell.unit),
            1
          );
        }
        //if(this.fatherFraction.control==="comp"&&this.fatherFraction.freeDragons.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.freeDragons.splice(this.fatherFraction.freeDragons.indexOf(this.cell.dragoon),1)};

        for (let v = this.vertikal - 1; v <= this.vertikal; v++) {
          for (let h = this.horizont; h <= this.horizont + 1; h++) {
            gameFielg[v][h].unit = 0;
          }
        }
      }

      if (this.distroyTimer === 0) {
        this.cell = 0;
        this.target = 0;
        this.stepTakt = 0;
      }

      //console.log("pizdez");

      this.visible = true;
      this.draw_visible = true;

      return;
    }

    //blackBoock
    //this.visible=false;

    if (this.fatherFraction.control === "comp") {
      this.dash = 1000;
    } // ii

    /*
for(let i=0;i<this.animys.length;i++){

if(this.animys[i].type===1){console.log("east");};	
	
};
*/

    let step_ok = this.stepTakt < 1 && this.stepTakt >= 0;

    if (this.stopTroll) {
      this.stopTroll--;
      this.iFight = false;
      return;
    }

    //////////////////////////////////////////
    ///////////////////////////////////////////////

    /*
else if(this.fatherFraction.control==="comp"&&!this.handCell&&!this.handTarget&&this.stepTakt<1&&this.stepTakt>=0&&this.iDoTakt===0){
	
  if(this.fatherFraction.freeLuchniks.indexOf(this.cell.unit)===-1){this.fatherFraction.freeLuchniks.push(this.cell.unit);};	
	
};
*/
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    let isBlocked = false;

    if (step_ok && !this.iFight) {
      //if(!this.axe_time){

      if (
        this.target &&
        (this.target.hp <= 0 ||
          !this.target.cell ||
          this.target.buildready <= 0)
      ) {
        this.target = 0;
        this.iFight = false;
        this.iDoTakt = 0;
        this.way = [];
      } else if (
        this.handTarget &&
        (this.handTarget.hp <= 0 ||
          !this.handTarget.cell ||
          this.handTarget.buildready <= 0)
      ) {
        this.handCell = this.handTarget.cell;

        this.handTarget = 0;
        this.iFight = false;
        this.iDoTakt = 0;
        //this.way=[];
      }

      //};

      /*
for(let i=0;i<this.animys.length;i++){
	
	if(this.animys[i].hp<=0){
		this.animys.splice(i,1);
		i--;
	};
	
};

*/

      isBlocked = this.isBlockedShip();

      //console.log(isBlocked);

      ///*
      let hDis2 = false;

      if (this.clickSave.handTarget && isBlocked) {
        if (
          !this.clickSave.handTarget.neitral &&
          this.clickSave.handTarget.fatherFraction.union !==
            this.fatherFraction.union
        ) {
          let a = this.clickSave.handTarget.damagePointX - this.damagePointX;
          let b = this.clickSave.handTarget.damagePointY - this.damagePointY;

          hDis2 = Math.sqrt(a * a + b * b);
        }
      }
      //*/

      //if(this.clickSave
      //&&(!isBlocked||(isBlocked&&hDis2&&hDis2<=this.seeing))

      //){
      //console.log(this.clickSave);

      if (this.clickSave.handCell) {
        if (
          !this.clickSave.handCell.sea ||
          this.clickSave.handCell.sea !== this.cell.sea
        ) {
          this.clickSave = false;
        } else {
          this.handTarget = 0;
          this.target = 0;
          this.handCell = this.clickSave.handCell;
          this.way = "go";
          this.stopGetTarget = 50;
          this.spe = this.handCell;
          //if(this.clickSave.wait){this.ii_saveCell=this.cell;};
          //if(this.fatherFraction.control==="player"&&this.handCell){console.log("here");};
        }
      } else if (
        this.clickSave.handTarget &&
        (!this.handTarget ||
          this.clickSave.handTarget.persolalNumber !==
            this.handTarget.persolalNumber)
      ) {
        /////////////

        if (
          (this.clickSave.handTarget.cell.sea &&
            this.clickSave.handTarget.cell.sea === this.cell.sea) ||
          checkAliens_sea(this.cell.unit, this.clickSave.handTarget)
        ) {
          /*
if(

//(
(

!this.clickSave.handTarget.cell.continent
||
( this.clickSave.handTarget .cell.continent &&  this.clickSave.handTarget.cell.continent!==this.cell.continent  )
)

&&  !checkAliens(this.cell.unit,this.clickSave.handTarget) 
//)

){
	this.clickSave=0;
}
*/

          /////////////

          this.handTarget = this.clickSave.handTarget;
          this.target = 0;
          this.handCell = 0;
          this.stopGetTarget = 50;
          this.way = [];
          this.targetCell = this.handTarget.cell.persolalNumber;
          this.hold_position = false;
          //if(this.clickSave.wait){this.ii_saveCell=this.cell;};

          //console.log("ok");
        }
      }

      //};

      let del = false;
      ///*
      if (
        this.fatherFraction.control === "player" &&
        this.clickSave.handTarget
      ) {
        let a = this.handTarget.damagePointX - this.damagePointX;
        let b = this.handTarget.damagePointY - this.damagePointY;

        let c = Math.sqrt(a * a + b * b);

        if (c <= 250) {
          del = true;
        }
      }
      //*/

      if (this.clickSave && this.clickSave.hold) {
        this.clickSave.hold--;
      }

      if ((this.clickSave && !this.clickSave.hold) || del) {
        this.clickSave = false;
        //console.log("out");
      }

      /////////////////////////////////////////////////
      /////////////////////////////////////////////////
    }

    //

    //if(this.handTarget){console.log("ok");}; handCell

    if (this.stopGetTarget) {
      this.stopGetTarget--;
    }

    /////////////////////////////////////////////////// new!!!

    if (step_ok && !this.iFight) {
      this.iDoTakt = 0;
      this.animY = 0;

      let thc;

      if (this.handTarget) {
        let hta = this.handTarget.damagePointX - this.damagePointX;
        let htb = this.handTarget.damagePointY - this.damagePointY;

        thc = Math.sqrt(hta * hta + htb * htb);
      }

      for (let i = 0; i < this.animys.length; i++) {
        //if(!this.animys[i]){console.log(this.animys); pausa=1;};

        let c;

        if (this.animys[i] && this.animys[i].cell) {
          c = get_distanse_on_lineyka(
            this.cell,
            this.gabarit,
            this.animys[i].cell,
            this.animys[i].gabarit
          );
        }

        if (
          !c ||
          !this.animys[i] ||
          c > 1000 || //this.dash
          !this.animys[i].cell ||
          this.animys[i].hp <= 0 ||
          ((!this.animys[i].cell.sea ||
            (this.animys[i].cell.sea &&
              this.animys[i].cell.sea !== this.cell.sea)) &&
            !checkAliens_sea(this.cell.unit, this.animys[i]))
        ) {
          this.animys.splice(i, 1);
          i--;

          //console.log("dell");
        } else {
          if (
            //(this.fatherFraction.control==="comp"&&c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&(this.handCell||this.handTarget))||(c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&this.handCell)
            this.fatherFraction.control === "player" &&
            ((this.handCell &&
              c <= this.seeing &&
              this.animys[i].warrior &&
              this.animys[i].hp > 0) ||
              (thc &&
                thc > this.seeing &&
                c <= this.seeing &&
                this.animys[i].warrior &&
                this.animys[i].hp > 0)) &&
            !this.stopGetTarget
          ) {
            //let oh=(c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&this.handCell);

            //console.log("ok"); pausa=1;
            //warrior=true;
            this.handTarget = 0;
            this.handCell = 0;
            this.way = [];
          }

          ///blackBoock

          //if(dlt){console.log("doloy");};

          //console.log(checkAliens(this.cell.unit,this.animys[i]))

          if (
            this.target &&
            this.animys[i].persolalNumber === this.target.persolalNumber &&
            c > this.dash
          ) {
            this.target = 0;
            this.way = [];
          }
        }
      }

      if (this.fatherFraction.control === "comp" && this.animys.length) {
        this.handCell = 0;
        this.handTarget = 0;
        this.hold_position = false;
      }
    }

    // ii
    ///*

    //let stopBack=false;

    //*/

    // ii

    ///////////////////////////////////////////////////////

    if (
      step_ok &&
      ((!this.handCell && !this.handTarget) || this.iNeedTarget) &&
      //||(this.fatherFraction.control==="comp"&&(this.handCell||this.handTarget)&&!this.iFight)

      this.stopGetTarget === 0
    ) {
      //iDoTakt

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      //this.stepTakt<1&&this.stepTakt>=0&&!this.handCell&&!this.handTarget&&this.stopGetTarget===0

      if (!this.iFight) {
        /////////////////////////

        let min = [];

        let basickMass;

        let life = [];
        let warrior = [];
        let tower = [];
        let els = [];

        for (let i = 0; i < this.animys.length; i++) {
          if (
            !this.animys[i].fly &&
            get_distanse_on_lineyka(
              this.cell,
              this.gabarit,
              this.animys[i].cell,
              this.animys[i].gabarit
            ) <= this.dash
          ) {
            if (this.animys[i].type === "tower") {
              tower.push(this.animys[i]);
            } else if (this.animys[i].warrior) {
              warrior.push(this.animys[i]);
            } else if (this.animys[i].unitStatus === "life") {
              life.push(this.animys[i]);
            } else {
              els.push(this.animys[i]);
            }
          }
        }

        if (tower.length) {
          basickMass = tower;
        } else if (warrior.length) {
          basickMass = warrior;
        } else if (life.length) {
          basickMass = life;
        } else {
          basickMass = els;
        }

        for (let i = 0; i < basickMass.length; i++) {
          let a = basickMass[i].damagePointX - this.damagePointX;
          let b = basickMass[i].damagePointY - this.damagePointY;

          let c = Math.sqrt(a * a + b * b);

          //console.log(basickMass[i].unitName);
          if (
            (!min.length || c < min[0]) &&
            c <= this.dash &&
            basickMass[i].hp > 0 &&
            basickMass[i].cell
          ) {
            min = [c, basickMass[i]];
          }
        }

        if (
          (this.target &&
            min.length &&
            this.target.persolalNumber !== min[1].persolalNumber) ||
          !this.target
        ) {
          this.targetCell = false;
        } ///!!!!!!!!!!!!!!!!?????????????????

        if (min.length) {
          if (
            this.fatherFraction.control === "comp" &&
            !this.ii_attack &&
            !this.handCell &&
            !this.handTarget &&
            !this.way.length &&
            !this.ii_saveCell
          ) {
            //this.ii_saveCell=this.cell;
            this.comeWithMee(min[1]);
          }

          this.target = min[1];
          this.handCell = 0;
          this.handTarget = 0;
          //this.way=[];
          this.clickSave = false;
          //this.targetCell=this.target.cell;
          this.hold_position = false;
          this.goGroop_sweeme = false;
        } else {
          this.target = 0;
        }
      } else if (this.iFight) {
        if (this.iGetMyCell && !this.stopTroll) {
          if (this.iDoTaktTimer === 100000) {
            this.iDoTaktTimer = 0;
          }

          //iStand
          //console.log(this.iDoTakt);

          if (this.iDoTaktTimer % 10 === 0) {
            this.iDoTakt++;
          }

          if (this.iDoTakt === 1) {
            //pausa=1;

            this.axe_time++;

            //x,y,type,target,power

            if (!this.axe && this.axe_time === 9) {
              //console.log("axe");
              this.tyuk = true;
              this.axe_time = -1;

              this.axeInitialization(this.target, "turtle", this.cell.unit);
              this.axe = true;

              if (
                this.target.unitStatus === "building" ||
                !this.target.warrior
              ) {
                if (!this.target.alarmTimer) {
                  this.target.alarmTimer = 500;
                  this.target.agressor = this.cell.unit;
                }
              }
              //console.log("firte");

              if (
                this.target &&
                this.target.fatherFraction.control === "comp" &&
                !this.target.sweeme &&
                !this.target.iCanGetSweem &&
                this.target.gabarit === 50 &&
                !this.target.active
              ) {
                this.target.panick_peoples(this.cell.unit);
              }
            }
          }

          if (this.iDoTakt === 5) {
            this.axe = false;
            //this.iFight=false;
            this.animTimer = 100;
            this.stopTroll = this.holdTroll;
            //this.cellUpdate();

            this.iDoTakt = 0;

            //if(this.target.unitStatus==="building"&&this.target.buildready<this.target.hpfull&&this.target.buildready>0){
            //this.target.buildready-=15;
            //}

            //else  if(this.target.hp>0&&this.target.cell){
            //this.target.hp-=15;

            ///			};

            //if(this.target.unitStatus==="life"){	if(this.target&&this.target.fatherFraction.activeUnits.indexOf(this.target)===-1){this.target.fatherFraction.activeUnits.push(this.target);};};
            //if(this.target.unitStatus==="building"){	if(this.target&&this.target.fatherFraction.activeBuildings.indexOf(this.target)===-1){this.target.fatherFraction.activeBuildings.push(this.target);};};
          }
          this.iDoTaktTimer++;

          return;
        }
      }

      if (
        !this.iFight &&
        this.target &&
        this.target.hp > 0 &&
        this.target.cell
      ) {
        this.iGetTarget = this.checkGetTarget_sweeme();
      }

      //console.log("do target : "+get_distanse_on_lineyka(this.cell,100,this.target,this.target.gabarit));
      //console.log(" target seeing : "+this.target.seeing);

      if (this.iGetTarget) {
        this.peonGo(this.target);

        this.iFight = true;
        this.iGetTarget = false;

        this.moveVektor = this.getFightVector(this.target);
        this.getFirePoint();
        //console.log(this.moveVektor);
        this.way = [];
        this.clickSave = false;
      } else {
        if (
          //!this.hold_position
          // &&

          !isBlocked &&
          !this.iFight &&
          this.target &&
          this.target.cell &&
          (this.targetCell !== this.target.cell.persolalNumber ||
            !this.way.length)
        ) {
          this.targetCell = this.target.cell.persolalNumber;

          //console.log("here");

          this.way = "go";

          this.spe = this.target.cell;
          this.hold_position = false;
        }
      }
    } else if (step_ok && !this.handCell && !this.target && this.handTarget) {
      // console.log(this.handTarget);

      if (!this.iFight && this.handTarget.hp > 0 && this.handTarget.cell) {
        this.iGetTarget = this.checkGetHandTarget_sweeme();

        //console.log("ok");
      }

      if (this.iGetTarget) {
        if (
          !this.handTarget.neitral &&
          this.handTarget.fatherFraction.union !== this.fatherFraction.union
        ) {
          this.peonGo(this.handTarget);

          this.iFight = true;
          this.clickSave = false;

          this.iGetTarget = false;

          this.moveVektor = this.getFightVector(this.handTarget);

          this.getFirePoint();
          //console.log(this.firePoint);
          this.way = [];
        } else {
          this.handTarget = 0;
          this.way = [];
          this.handCell = 0;
        }

        this.clickSave = false;
      } else {
        //console.log(this.handTarget);

        if (
          !isBlocked &&
          !this.iFight &&
          this.handTarget.cell &&
          (!this.way.length ||
            (this.targetCell &&
              this.targetCell !== this.handTarget.cell.persolalNumber))
        ) {
          this.targetCell = this.handTarget.cell.persolalNumber;

          this.spe = this.handTarget.cell;

          this.way = "go";
        }
      }

      //console.log(this.iFight);

      if (this.iFight) {
        if (
          this.handTarget.neitral ||
          this.handTarget.fatherFraction.union === this.fatherFraction.union
        ) {
          this.handTarget = 0;
          this.iFight = false;
        }

        if (this.iGetMyCell && !this.stopTroll) {
          if (this.iDoTaktTimer === 100000) {
            this.iDoTaktTimer = 0;
          }

          //iStand
          //console.log(this.iDoTakt);

          if (this.iDoTaktTimer % 10 === 0) {
            this.iDoTakt++;
          }

          if (this.iDoTakt === 1) {
            //pausa=1;

            this.axe_time++;

            //x,y,type,target,power

            if (!this.axe && this.axe_time === 9) {
              //console.log("axe");
              this.tyuk = true;
              this.axe_time = -1;

              this.axeInitialization(this.handTarget, "turtle", this.cell.unit);
              this.axe = true;

              if (
                this.handTarget.unitStatus === "building" ||
                !this.handTarget.warrior
              ) {
                if (!this.handTarget.alarmTimer) {
                  this.handTarget.alarmTimer = 500;
                  this.handTarget.agressor = this.cell.unit;
                }
              }
              //console.log("firte");

              if (
                this.handTarget.fatherFraction.control === "comp" &&
                !this.handTarget.sweeme &&
                !this.handTarget.iCanGetSweem &&
                this.handTarget.gabarit === 50 &&
                !this.handTarget.active
              ) {
                this.handTarget.panick_peoples(this.cell.unit);
              }
            }
          }

          if (this.iDoTakt === 5) {
            this.axe = false;
            //this.iFight=false;
            this.animTimer = 100;
            this.stopTroll = this.holdTroll;
            //this.cellUpdate();

            this.iDoTakt = 0;

            //	if(this.handTarget.unitStatus==="building"&&this.handTarget.buildready<this.handTarget.hpfull&&this.handTarget.buildready>0){
            //this.handTarget.buildready-=15;
            //	}

            //else  if(this.handTarget.hp>0&&this.handTarget.cell){
            //this.handTarget.hp-=15;

            //			};

            //if(this.handTarget.unitStatus==="life"){	if(this.handTarget&&this.handTarget.fatherFraction.activeUnits.indexOf(this.handTarget)===-1){this.handTarget.fatherFraction.activeUnits.push(this.handTarget);};};
            //if(this.handTarget.unitStatus==="building"){	if(this.handTarget&&this.handTarget.fatherFraction.activeBuildings.indexOf(this.handTarget)===-1){this.handTarget.fatherFraction.activeBuildings.push(this.handTarget);};};
          }
          this.iDoTaktTimer++;

          return;
        }
      }

      if (isBlocked && step_ok && !this.iFight && this.handTarget) {
        this.handTarget = 0;
        this.way = [];
        this.handCell = 0;
      } //////new!!!!?????
    }

    if (step_ok && this.fatherFraction.control === "comp") {
      if (
        !this.iFight &&
        !this.target &&
        //this.readyToOut&&
        this.ii_saveCell &&
        !this.handTarget &&
        !this.way.length &&
        !this.handCell
      ) {
        let a = this.ii_saveCell.x - this.cell.x;
        let b = this.ii_saveCell.y - this.cell.y;

        let c = Math.sqrt(a * a + b * b);

        if (c > 0) {
          this.clickSave = new ClickSave(0, this.ii_saveCell);

          //console.log(this.persolalNumber);
        }

        if (c <= 1000) {
          this.ii_saveCell = 0;
          this.handCell = 0;
          this.way = [];
        }

        //console.log(this.persolalNumber);
      }
    }

    this.iNeedTarget = false;

    this.go = false;

    let way_unit;
    let way_cell;

    if (this.way.length && this.stepTakt < 1 && this.stepTakt >= 0) {
      way_cell = this.way[this.way.length - 1];

      //let ran=Math.floor(Math.random()*11);

      for (let v = way_cell.vertikal - 1; v <= way_cell.vertikal; v++) {
        for (let h = way_cell.horizont; h <= way_cell.horizont + 1; h++) {
          if (
            gameFielg[v] &&
            gameFielg[v][h] &&
            gameFielg[v][h].unit &&
            gameFielg[v][h].unit.persolalNumber !== this.persolalNumber &&
            gameFielg[v][h].unit.active && //(gameFielg[v][h].unit.way.length||gameFielg[v][h].unit.way==="go")
            gameFielg[v][h].unit.hold_position &&
            this.hold_position &&
            this.hold_position === gameFielg[v][h].unit.hold_position &&
            //&&
            //this.checkAntyMoveVektors(gameFielg[v][h].unit)!=="anty"
            this.terpenie < this.terpenie_ran
          ) {
            //if(this.persolalNumber===35){console.log(gameFielg[v][h].unit.persolalNumber);};	iGetLand

            this.terpenie++;

            this.x = this.cell.x;
            this.y = this.cell.y;

            //console.log("ok");

            return;
          }
        }
      }
    }

    if (this.terpenie === this.terpenie_ran) {
      //this.hold_position=false;
      //this.goGroop_sweeme=false;

      //console.log("!!!!!!!!!!!!!");
      this.go = true;
      this.terpenie_ran = 50 + Math.floor(Math.random() * 20);
    }

    this.terpenie = 0;

    this.goWaySweeme(this.cell.unit);

    return;
  } else if (this.type === "linkor") {
    ///////////////////////////////////////////////////////////////////////////////////////////
    //this.attack=this.baseAttack*this.fatherFraction.dopAttack;
    //this.seeing=this.baseSeeing+this.fatherFraction.dopFlySee;

    //this.level=1+(this.fatherFraction.dopAttack_level)

    ///////////////////////////////////////////////////////////////////////////////////////////

    if (this.iDoTakt !== 4) {
      this.axe = false;
    }

    if (this.hp <= 0) {
      this.hp = 0;
      this.target = "dead";
    }
    //this.target="dead"; ii_saveCell
    //iStand
    if (this.target === "dead") {
      this.readyToOut = true;

      this.iDoTaktTimer = -1;
      this.iDoTakt = 0;
      //this.myJoube=0;

      this.way = [];
      this.speed = 0;
      this.updateSpeed();
      this.target = 0;
      this.handTarget = 0;
      this.animys = [];
      this.landing = false;
      this.rage = 0;

      this.distroyTimer--;

      if (!this.dopAnim) {
        this.dopAnim = 0;
      }

      if (this.distroyTimer % 10 === 0) {
        this.animY += 100;
      }

      if (this.distroyTimer === 0) {
        //if(this.fatherFraction.peoples.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.peoples.splice(this.fatherFraction.peoples.indexOf(this.cell.dragoon),1);};
        //if(this.fatherFraction.dragons.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.dragons.splice(this.fatherFraction.dragons.indexOf(this.cell.dragoon),1)};
        if (this.fatherFraction.selectIsSweem.indexOf(this.cell.unit) !== -1) {
          this.fatherFraction.selectIsSweem.splice(
            this.fatherFraction.selectIsSweem.indexOf(this.cell.unit),
            1
          );
        }
        //if(this.fatherFraction.control==="comp"&&this.fatherFraction.freeDragons.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.freeDragons.splice(this.fatherFraction.freeDragons.indexOf(this.cell.dragoon),1)};

        for (let v = this.vertikal - 1; v <= this.vertikal; v++) {
          for (let h = this.horizont; h <= this.horizont + 1; h++) {
            gameFielg[v][h].unit = 0;
          }
        }
      }

      if (this.distroyTimer === 0) {
        this.cell = 0;
        this.target = 0;
        this.stepTakt = 0;
      }

      //console.log("pizdez");

      return;
    }

    //blackBoock

    if (this.fatherFraction.control === "comp") {
      this.dash = 1000;
    } // ii

    /*
for(let i=0;i<this.animys.length;i++){

if(this.animys[i].type===1){console.log("east");};	
	
};
*/

    if (this.stopTroll) {
      this.stopTroll--;
      this.iFight = false;
      return;
    }

    //////////////////////////////////////////
    ///////////////////////////////////////////////

    /*
else if(this.fatherFraction.control==="comp"&&!this.handCell&&!this.handTarget&&this.stepTakt<1&&this.stepTakt>=0&&this.iDoTakt===0){
	
  if(this.fatherFraction.freeLuchniks.indexOf(this.cell.unit)===-1){this.fatherFraction.freeLuchniks.push(this.cell.unit);};	
	
};
*/
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    let isBlocked = false;

    if (this.stepTakt < 1 && this.stepTakt >= 0 && !this.iFight) {
      if (
        this.target &&
        (this.target.hp <= 0 ||
          !this.target.cell ||
          this.target.buildready <= 0)
      ) {
        this.target = 0;
        this.iFight = false;
        this.iDoTakt = 0;
        this.way = [];
      } else if (
        this.handTarget &&
        (this.handTarget.hp <= 0 ||
          !this.handTarget.cell ||
          this.handTarget.buildready <= 0)
      ) {
        this.handCell = this.handTarget.cell;

        this.handTarget = 0;
        this.iFight = false;
        this.iDoTakt = 0;
        //this.way=[];
      }

      /*
for(let i=0;i<this.animys.length;i++){
	
	if(this.animys[i].hp<=0){
		this.animys.splice(i,1);
		i--;
	};
	
};

*/

      isBlocked = this.isBlockedShip();

      //console.log(isBlocked);

      ///*
      let hDis2 = false;

      if (this.clickSave.handTarget && isBlocked) {
        if (
          !this.clickSave.handTarget.neitral &&
          this.clickSave.handTarget.fatherFraction.union !==
            this.fatherFraction.union
        ) {
          let a = this.clickSave.handTarget.damagePointX - this.damagePointX;
          let b = this.clickSave.handTarget.damagePointY - this.damagePointY;

          hDis2 = Math.sqrt(a * a + b * b);
        }
      }
      //*/

      //if(this.clickSave
      //&&(!isBlocked||(isBlocked&&hDis2&&hDis2<=this.seeing))

      //){
      //console.log(this.clickSave);

      if (this.clickSave.handCell) {
        if (
          !this.clickSave.handCell.sea ||
          this.clickSave.handCell.sea !== this.cell.sea
        ) {
          this.clickSave = false;
        } else {
          this.handTarget = 0;
          this.target = 0;
          this.handCell = this.clickSave.handCell;
          this.way = "go";
          this.stopGetTarget = 50;
          this.spe = this.handCell;
          //if(this.clickSave.wait){this.ii_saveCell=this.cell;};
          //if(this.fatherFraction.control==="player"&&this.handCell){console.log("here");};
        }
      } else if (
        this.clickSave.handTarget &&
        (!this.handTarget ||
          this.clickSave.handTarget.persolalNumber !==
            this.handTarget.persolalNumber)
      ) {
        /////////////

        if (
          (this.clickSave.handTarget.cell.sea &&
            this.clickSave.handTarget.cell.sea === this.cell.sea) ||
          checkAliens_sea(this.cell.unit, this.clickSave.handTarget)
        ) {
          /*
if(

//(
(

!this.clickSave.handTarget.cell.continent
||
( this.clickSave.handTarget .cell.continent &&  this.clickSave.handTarget.cell.continent!==this.cell.continent  )
)

&&  !checkAliens(this.cell.unit,this.clickSave.handTarget) 
//)

){
	this.clickSave=0;
}
*/

          /////////////

          this.handTarget = this.clickSave.handTarget;
          this.target = 0;
          this.handCell = 0;
          this.stopGetTarget = 50;
          this.way = [];
          this.targetCell = this.handTarget.cell.persolalNumber;
          this.hold_position = false;
          //if(this.clickSave.wait){this.ii_saveCell=this.cell;};

          //console.log("ok");
        }
      }

      //};

      let del = false;
      ///*
      if (
        this.fatherFraction.control === "player" &&
        this.clickSave.handTarget
      ) {
        let a = this.handTarget.damagePointX - this.damagePointX;
        let b = this.handTarget.damagePointY - this.damagePointY;

        let c = Math.sqrt(a * a + b * b);

        if (c <= 250) {
          del = true;
        }
      }
      //*/

      if (this.clickSave && this.clickSave.hold) {
        this.clickSave.hold--;
      }

      if ((this.clickSave && !this.clickSave.hold) || del) {
        this.clickSave = false;
        //console.log("out");
      }

      /////////////////////////////////////////////////
      /////////////////////////////////////////////////
    }

    //

    //if(this.handTarget){console.log("ok");}; handCell

    if (this.stopGetTarget) {
      this.stopGetTarget--;
    }

    /////////////////////////////////////////////////// new!!!

    if (this.stepTakt < 1 && this.stepTakt >= 0 && !this.iFight) {
      let thc;

      if (this.handTarget) {
        let hta = this.handTarget.damagePointX - this.damagePointX;
        let htb = this.handTarget.damagePointY - this.damagePointY;

        thc = Math.sqrt(hta * hta + htb * htb);
      }

      for (let i = 0; i < this.animys.length; i++) {
        //if(!this.animys[i]){console.log(this.animys); pausa=1;};
        let c;

        if (this.animys[i] && this.animys[i].cell) {
          c = get_distanse_on_lineyka(
            this.cell,
            this.gabarit,
            this.animys[i].cell,
            this.animys[i].gabarit
          );
        }

        if (
          !c ||
          !this.animys[i] ||
          c > this.dash ||
          !this.animys[i].cell ||
          this.animys[i].hp <= 0 ||
          ((!this.animys[i].cell.sea ||
            (this.animys[i].cell.sea &&
              this.animys[i].cell.sea !== this.cell.sea)) &&
            !checkAliens_sea(this.cell.unit, this.animys[i]))
        ) {
          this.animys.splice(i, 1);
          i--;

          //console.log("dell");
        } else {
          if (
            //(this.fatherFraction.control==="comp"&&c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&(this.handCell||this.handTarget))||(c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&this.handCell)
            this.fatherFraction.control === "player" &&
            ((this.handCell &&
              c <= this.seeing &&
              this.animys[i].warrior &&
              this.animys[i].hp > 0) ||
              (thc &&
                thc > this.seeing &&
                c <= this.seeing &&
                this.animys[i].warrior &&
                this.animys[i].hp > 0)) &&
            !this.stopGetTarget
          ) {
            //let oh=(c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&this.handCell);

            //console.log("ok"); pausa=1;
            //warrior=true;
            this.handTarget = 0;
            this.handCell = 0;
            this.way = [];
          }

          ///blackBoock

          //if(dlt){console.log("doloy");};

          //console.log(checkAliens(this.cell.unit,this.animys[i]))

          if (
            this.target &&
            this.animys[i].persolalNumber === this.target.persolalNumber &&
            c > this.dash
          ) {
            this.target = 0;
            this.way = [];
          }
        }
      }

      if (this.fatherFraction.control === "comp" && this.animys.length) {
        this.handCell = 0;
        this.handTarget = 0;
        this.hold_position = false;
      }
    }

    // ii
    ///*

    //let stopBack=false;

    //*/

    // ii

    ///////////////////////////////////////////////////////

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      ((!this.handCell && !this.handTarget) || this.iNeedTarget) &&
      //||(this.fatherFraction.control==="comp"&&(this.handCell||this.handTarget)&&!this.iFight)

      this.stopGetTarget === 0
    ) {
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      //this.stepTakt<1&&this.stepTakt>=0&&!this.handCell&&!this.handTarget&&this.stopGetTarget===0

      if (!this.iFight) {
        /////////////////////////

        let min = [];

        let basickMass;

        let life = [];
        let warrior = [];
        let tower = [];
        let els = [];

        for (let i = 0; i < this.animys.length; i++) {
          if (this.animys[i].type === "tower") {
            tower.push(this.animys[i]);
          } else if (this.animys[i].warrior) {
            warrior.push(this.animys[i]);
          } else if (this.animys[i].unitStatus === "life") {
            life.push(this.animys[i]);
          } else {
            els.push(this.animys[i]);
          }
        }

        if (tower.length) {
          basickMass = tower;
        } else if (warrior.length) {
          basickMass = warrior;
        } else if (life.length) {
          basickMass = life;
        } else {
          basickMass = els;
        }

        for (let i = 0; i < basickMass.length; i++) {
          let a = basickMass[i].damagePointX - this.damagePointX;
          let b = basickMass[i].damagePointY - this.damagePointY;

          let c = Math.sqrt(a * a + b * b);

          if (
            (!min.length || c < min[0]) &&
            c <= this.dash &&
            basickMass[i].hp > 0 &&
            basickMass[i].cell
          ) {
            min = [c, basickMass[i]];
          }
        }

        if (
          (this.target &&
            min.length &&
            this.target.persolalNumber !== min[1].persolalNumber) ||
          !this.target
        ) {
          this.targetCell = false;
        } ///!!!!!!!!!!!!!!!!?????????????????

        if (min.length) {
          if (
            this.fatherFraction.control === "comp" &&
            !this.ii_attack &&
            !this.handCell &&
            !this.handTarget &&
            !this.way.length &&
            !this.ii_saveCell
          ) {
            //this.ii_saveCell=this.cell;
            this.comeWithMee(min[1]);
          }

          this.target = min[1];
          this.handCell = 0;
          this.handTarget = 0;
          //this.way=[];
          this.clickSave = false;
          //this.targetCell=this.target.cell;
          this.hold_position = false;
          this.goGroop_sweeme = false;
        } else {
          this.target = 0;
        }
      } else if (this.iFight) {
        if (this.iGetMyCell && !this.stopTroll) {
          if (this.iDoTaktTimer === 100000) {
            this.iDoTaktTimer = 0;
          }

          //iStand
          //console.log(this.iDoTakt);

          if (this.iDoTaktTimer % 4 === 0) {
            this.iDoTakt++;
          }

          if (this.iDoTakt === 4) {
            //pausa=1;

            //x,y,type,target,power

            if (!this.axe) {
              //

              this.axeInitialization(this.target, "linkor", this.cell.unit);
              this.axe = true;
              if (
                this.target.unitStatus === "building" ||
                !this.target.warrior
              ) {
                if (!this.target.alarmTimer) {
                  this.target.alarmTimer = 500;
                  this.target.agressor = this.cell.unit;
                }
              }

              if (
                this.target &&
                !this.target.neitral &&
                this.target.fatherFraction.control === "comp" &&
                !this.target.sweeme &&
                !this.target.iCanGetSweem &&
                this.target.gabarit === 50 &&
                !this.target.active
              ) {
                this.target.panick_peoples(this.cell.unit);
              }
            }
          }

          if (this.iDoTakt === 5) {
            this.tyuk = true;
            this.axe = false;
            //this.iFight=false;
            this.animTimer = 100;
            this.stopTroll = this.holdTroll;
            //this.cellUpdate();

            this.iDoTakt = 0;

            //if(this.target.unitStatus==="building"&&this.target.buildready<this.target.hpfull&&this.target.buildready>0){
            //this.target.buildready-=15;
            //}

            //else  if(this.target.hp>0&&this.target.cell){
            //this.target.hp-=15;

            ///			};

            //if(this.target.unitStatus==="life"){	if(this.target&&this.target.fatherFraction.activeUnits.indexOf(this.target)===-1){this.target.fatherFraction.activeUnits.push(this.target);};};
            //if(this.target.unitStatus==="building"){	if(this.target&&this.target.fatherFraction.activeBuildings.indexOf(this.target)===-1){this.target.fatherFraction.activeBuildings.push(this.target);};};
          }
          this.iDoTaktTimer++;

          return;
        }
      }

      if (
        !this.iFight &&
        this.target &&
        this.target.hp > 0 &&
        this.target.cell
      ) {
        this.iGetTarget = this.checkGetTarget_sweeme();
      }

      //console.log("do target : "+get_distanse_on_lineyka(this.cell,100,this.target,this.target.gabarit));
      //console.log(" target seeing : "+this.target.seeing);

      if (this.iGetTarget) {
        this.peonGo(this.target);

        this.iFight = true;
        this.iGetTarget = false;

        this.moveVektor = this.getFightVector(this.target);
        this.getFirePoint();
        //console.log(this.moveVektor);
        this.way = [];
        this.clickSave = false;
      } else {
        if (
          //!this.hold_position
          // &&

          !isBlocked &&
          !this.iFight &&
          this.target &&
          this.target.cell &&
          (this.targetCell !== this.target.cell.persolalNumber ||
            !this.way.length)
        ) {
          this.targetCell = this.target.cell.persolalNumber;

          //console.log("here");

          this.way = "go";

          this.spe = this.target.cell;
          this.hold_position = false;
        }
      }
    } else if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      !this.handCell &&
      !this.target &&
      this.handTarget
    ) {
      // console.log(this.handTarget);

      if (!this.iFight && this.handTarget.hp > 0 && this.handTarget.cell) {
        this.iGetTarget = this.checkGetHandTarget_sweeme();

        //console.log("ok");
      }

      if (this.iGetTarget) {
        if (
          !this.handTarget.neitral &&
          this.handTarget.fatherFraction.union !== this.fatherFraction.union
        ) {
          this.peonGo(this.handTarget);

          this.iFight = true;
          this.clickSave = false;

          this.iGetTarget = false;

          this.moveVektor = this.getFightVector(this.handTarget);

          this.getFirePoint();
          //console.log(this.firePoint);
          this.way = [];
        } else {
          this.handTarget = 0;
          this.way = [];
          this.handCell = 0;
        }

        this.clickSave = false;
      } else {
        //console.log(this.handTarget);

        if (
          !isBlocked &&
          !this.iFight &&
          this.handTarget.cell &&
          (!this.way.length ||
            (this.targetCell &&
              this.targetCell !== this.handTarget.cell.persolalNumber))
        ) {
          this.targetCell = this.handTarget.cell.persolalNumber;

          this.spe = this.handTarget.cell;

          this.way = "go";
        }
      }

      //console.log(this.iFight);

      if (this.iFight) {
        if (
          this.handTarget.neitral ||
          this.handTarget.fatherFraction.union === this.fatherFraction.union
        ) {
          this.handTarget = 0;
          this.iFight = false;
        }

        if (this.iGetMyCell && !this.stopTroll) {
          if (this.iDoTaktTimer === 100000) {
            this.iDoTaktTimer = 0;
          }

          //iStand
          //console.log(this.iDoTakt);

          if (this.iDoTaktTimer % 4 === 0) {
            this.iDoTakt++;
          }

          if (this.iDoTakt === 4) {
            //pausa=1;

            //x,y,type,target,power

            if (!this.axe) {
              this.axeInitialization(this.handTarget, "linkor", this.cell.unit);
              this.axe = true;

              if (
                this.handTarget.unitStatus === "building" ||
                !this.handTarget.warrior
              ) {
                if (!this.handTarget.alarmTimer) {
                  this.handTarget.alarmTimer = 500;
                  this.handTarget.agressor = this.cell.unit;
                }
              }
              //console.log("firte");

              if (
                this.handTarget.fatherFraction.control === "comp" &&
                !this.handTarget.sweeme &&
                !this.handTarget.iCanGetSweem &&
                this.handTarget.gabarit === 50 &&
                !this.handTarget.active
              ) {
                this.handTarget.panick_peoples(this.cell.unit);
              }
            }
          }

          if (this.iDoTakt === 5) {
            this.tyuk = true;
            this.axe = false;
            //this.iFight=false;
            this.animTimer = 100;
            this.stopTroll = this.holdTroll;
            //this.cellUpdate();

            this.iDoTakt = 0;

            //	if(this.handTarget.unitStatus==="building"&&this.handTarget.buildready<this.handTarget.hpfull&&this.handTarget.buildready>0){
            //this.handTarget.buildready-=15;
            //	}

            //else  if(this.handTarget.hp>0&&this.handTarget.cell){
            //this.handTarget.hp-=15;

            //			};

            //if(this.handTarget.unitStatus==="life"){	if(this.handTarget&&this.handTarget.fatherFraction.activeUnits.indexOf(this.handTarget)===-1){this.handTarget.fatherFraction.activeUnits.push(this.handTarget);};};
            //if(this.handTarget.unitStatus==="building"){	if(this.handTarget&&this.handTarget.fatherFraction.activeBuildings.indexOf(this.handTarget)===-1){this.handTarget.fatherFraction.activeBuildings.push(this.handTarget);};};
          }
          this.iDoTaktTimer++;

          return;
        }
      }

      if (
        isBlocked &&
        this.stepTakt < 1 &&
        this.stepTakt >= 0 &&
        !this.iFight &&
        this.handTarget
      ) {
        this.handTarget = 0;
        this.way = [];
        this.handCell = 0;
      } //////new!!!!?????
    }

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      this.fatherFraction.control === "comp"
    ) {
      if (
        !this.iFight &&
        !this.target &&
        //this.readyToOut&&
        this.ii_saveCell &&
        !this.handTarget &&
        !this.way.length &&
        !this.handCell
      ) {
        let a = this.ii_saveCell.x - this.cell.x;
        let b = this.ii_saveCell.y - this.cell.y;

        let c = Math.sqrt(a * a + b * b);

        if (c > 0) {
          this.clickSave = new ClickSave(0, this.ii_saveCell);

          //console.log(this.persolalNumber);
        }

        if (c <= 1000) {
          this.ii_saveCell = 0;
          this.handCell = 0;
          this.way = [];
        }

        //console.log(this.persolalNumber);
      }
    }

    this.iNeedTarget = false;

    this.go = false;

    let way_unit;
    let way_cell;

    if (this.way.length && this.stepTakt < 1 && this.stepTakt >= 0) {
      way_cell = this.way[this.way.length - 1];

      //let ran=Math.floor(Math.random()*11);

      for (let v = way_cell.vertikal - 1; v <= way_cell.vertikal; v++) {
        for (let h = way_cell.horizont; h <= way_cell.horizont + 1; h++) {
          if (
            gameFielg[v] &&
            gameFielg[v][h] &&
            gameFielg[v][h].unit &&
            gameFielg[v][h].unit.persolalNumber !== this.persolalNumber &&
            gameFielg[v][h].unit.active && //(gameFielg[v][h].unit.way.length||gameFielg[v][h].unit.way==="go")
            gameFielg[v][h].unit.hold_position &&
            this.hold_position &&
            this.hold_position === gameFielg[v][h].unit.hold_position &&
            //&&
            //this.checkAntyMoveVektors(gameFielg[v][h].unit)!=="anty"
            this.terpenie < this.terpenie_ran
          ) {
            //if(this.persolalNumber===35){console.log(gameFielg[v][h].unit.persolalNumber);};	iGetLand

            this.terpenie++;

            this.x = this.cell.x;
            this.y = this.cell.y;

            //console.log("ok");

            return;
          }
        }
      }
    }

    if (this.terpenie === this.terpenie_ran) {
      //this.hold_position=false;
      //this.goGroop_sweeme=false;

      //console.log("!!!!!!!!!!!!!");
      this.go = true;
      this.terpenie_ran = 50 + Math.floor(Math.random() * 20);
    }

    this.terpenie = 0;

    this.goWaySweeme(this.cell.unit);

    return;
  } else if (this.type === "distroer") {
    //this.hold_position=false;
    ///////////////////////////////////////////////////////////////////////////////////////////
    //this.attack=this.baseAttack*this.fatherFraction.dopAttack;
    //this.seeing=this.baseSeeing+this.fatherFraction.dopFlySee;

    //this.level=1+(this.fatherFraction.dopAttack_level)

    ///////////////////////////////////////////////////////////////////////////////////////////

    if (this.iDoTakt !== 4) {
      this.axe = false;
    }

    if (this.hp <= 0) {
      this.hp = 0;
      this.target = "dead";
    }
    //this.target="dead"; ii_saveCell
    //iStand
    if (this.target === "dead") {
      this.readyToOut = true;

      this.iDoTaktTimer = -1;
      this.iDoTakt = 0;
      //this.myJoube=0;

      this.way = [];
      this.speed = 0;
      this.updateSpeed();
      this.target = 0;
      this.handTarget = 0;
      this.animys = [];
      this.landing = false;
      this.rage = 0;

      this.distroyTimer--;

      if (!this.dopAnim) {
        this.dopAnim = 0;
      }

      if (this.distroyTimer % 10 === 0) {
        this.animY += 100;
      }

      if (this.distroyTimer === 0) {
        //if(this.fatherFraction.peoples.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.peoples.splice(this.fatherFraction.peoples.indexOf(this.cell.dragoon),1);};
        //if(this.fatherFraction.dragons.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.dragons.splice(this.fatherFraction.dragons.indexOf(this.cell.dragoon),1)};
        if (this.fatherFraction.selectIsSweem.indexOf(this.cell.unit) !== -1) {
          this.fatherFraction.selectIsSweem.splice(
            this.fatherFraction.selectIsSweem.indexOf(this.cell.unit),
            1
          );
        }
        //if(this.fatherFraction.control==="comp"&&this.fatherFraction.freeDragons.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.freeDragons.splice(this.fatherFraction.freeDragons.indexOf(this.cell.dragoon),1)};

        for (let v = this.vertikal - 1; v <= this.vertikal; v++) {
          for (let h = this.horizont; h <= this.horizont + 1; h++) {
            gameFielg[v][h].unit = 0;
          }
        }
      }

      if (this.distroyTimer === 0) {
        this.cell = 0;
        this.target = 0;
        this.stepTakt = 0;
      }

      //console.log("pizdez");

      return;
    }

    //blackBoock

    if (this.fatherFraction.control === "comp") {
      this.dash = 1000;
    } // ii

    /*
for(let i=0;i<this.animys.length;i++){

if(this.animys[i].type===1){console.log("east");};	
	
};
*/

    let step_ok = this.stepTakt < 1 && this.stepTakt >= 0;

    if (this.stopTroll) {
      this.stopTroll--;
      this.iFight = false;
      return;
    }

    //////////////////////////////////////////
    ///////////////////////////////////////////////

    /*
else if(this.fatherFraction.control==="comp"&&!this.handCell&&!this.handTarget&&this.stepTakt<1&&this.stepTakt>=0&&this.iDoTakt===0){
	
  if(this.fatherFraction.freeLuchniks.indexOf(this.cell.unit)===-1){this.fatherFraction.freeLuchniks.push(this.cell.unit);};	
	
};
*/
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    let isBlocked = false;

    if (step_ok) {
      if (!this.iFight) {
        if (
          this.target &&
          (this.target.hp <= 0 ||
            !this.target.cell ||
            this.target.buildready <= 0)
        ) {
          this.target = 0;
          this.iFight = false;
          this.iDoTakt = 0;
          this.way = [];
        } else if (
          this.handTarget &&
          (this.handTarget.hp <= 0 ||
            !this.handTarget.cell ||
            this.handTarget.buildready <= 0)
        ) {
          this.handCell = this.handTarget.cell;

          this.handTarget = 0;
          this.iFight = false;
          this.iDoTakt = 0;
          //this.way=[];
        }
        /*
for(let i=0;i<this.animys.length;i++){
	
	if(this.animys[i].hp<=0){
		this.animys.splice(i,1);
		i--;
	};
	
};

*/

        isBlocked = this.isBlockedShip();

        //console.log(isBlocked);

        ///*
        let hDis2 = false;

        if (this.clickSave.handTarget && isBlocked) {
          if (
            !this.clickSave.handTarget.neitral &&
            this.clickSave.handTarget.fatherFraction.union !==
              this.fatherFraction.union
          ) {
            let a = this.clickSave.handTarget.damagePointX - this.damagePointX;
            let b = this.clickSave.handTarget.damagePointY - this.damagePointY;

            hDis2 = Math.sqrt(a * a + b * b);
          }
        }
        //*/

        //if(this.clickSave
        //&&(!isBlocked||(isBlocked&&hDis2&&hDis2<=this.seeing))

        //){
        //console.log(this.clickSave);

        if (this.clickSave.handCell) {
          if (
            !this.clickSave.handCell.sea ||
            this.clickSave.handCell.sea !== this.cell.sea
          ) {
            this.clickSave = false;
          } else {
            this.handTarget = 0;
            this.target = 0;
            this.handCell = this.clickSave.handCell;
            this.way = "go";
            this.stopGetTarget = 50;
            this.spe = this.handCell;
            //if(this.clickSave.wait){this.ii_saveCell=this.cell;};
            //if(this.fatherFraction.control==="player"&&this.handCell){console.log("here");};
          }
        } else if (
          this.clickSave.handTarget &&
          (!this.handTarget ||
            this.clickSave.handTarget.persolalNumber !==
              this.handTarget.persolalNumber)
        ) {
          /////////////

          if (
            (this.clickSave.handTarget.cell.sea &&
              this.clickSave.handTarget.cell.sea === this.cell.sea) ||
            checkAliens_sea(this.cell.unit, this.clickSave.handTarget)
          ) {
            /*
if(

//(
(

!this.clickSave.handTarget.cell.continent
||
( this.clickSave.handTarget .cell.continent &&  this.clickSave.handTarget.cell.continent!==this.cell.continent  )
)

&&  !checkAliens(this.cell.unit,this.clickSave.handTarget) 
//)

){
	this.clickSave=0;
}
*/

            /////////////

            this.handTarget = this.clickSave.handTarget;
            this.target = 0;
            this.handCell = 0;
            this.stopGetTarget = 50;
            this.way = [];
            this.targetCell = this.handTarget.cell.persolalNumber;
            this.hold_position = false;
            //if(this.clickSave.wait){this.ii_saveCell=this.cell;};

            //console.log("ok");
          }
        }

        //};

        let del = false;
        ///*
        if (
          this.fatherFraction.control === "player" &&
          this.clickSave.handTarget
        ) {
          let a = this.handTarget.damagePointX - this.damagePointX;
          let b = this.handTarget.damagePointY - this.damagePointY;

          let c = Math.sqrt(a * a + b * b);

          if (c <= 250) {
            del = true;
          }
        }
        //*/

        if (this.clickSave && this.clickSave.hold) {
          this.clickSave.hold--;
        }

        if ((this.clickSave && !this.clickSave.hold) || del) {
          this.clickSave = false;
          //console.log("out");
        }

        /////////////////////////////////////////////////
        /////////////////////////////////////////////////
      } // iFight
    }
    //

    //if(this.handTarget){console.log("ok");}; handCell

    if (this.stopGetTarget) {
      this.stopGetTarget--;
    }

    /////////////////////////////////////////////////// new!!!

    if (step_ok && !this.iFight) {
      let thc;

      if (this.handTarget) {
        let hta = this.handTarget.damagePointX - this.damagePointX;
        let htb = this.handTarget.damagePointY - this.damagePointY;

        thc = Math.sqrt(hta * hta + htb * htb);
      }

      for (let i = 0; i < this.animys.length; i++) {
        //if(!this.animys[i]){console.log(this.animys); pausa=1;};

        let c;

        if (this.animys[i] && this.animys[i].cell) {
          c = get_distanse_on_lineyka(
            this.cell,
            this.gabarit,
            this.animys[i].cell,
            this.animys[i].gabarit
          );
        }

        if (
          !c ||
          !this.animys[i] ||
          c > this.dash ||
          !this.animys[i].cell ||
          this.animys[i].hp <= 0 ||
          ((!this.animys[i].cell.sea ||
            (this.animys[i].cell.sea &&
              this.animys[i].cell.sea !== this.cell.sea)) &&
            !checkAliens_sea(this.cell.unit, this.animys[i]))
        ) {
          this.animys.splice(i, 1);
          i--;

          //console.log("dell");
        } else {
          if (
            //(this.fatherFraction.control==="comp"&&c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&(this.handCell||this.handTarget))||(c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&this.handCell)
            this.fatherFraction.control === "player" &&
            ((this.handCell &&
              c <= this.seeing &&
              this.animys[i].warrior &&
              this.animys[i].hp > 0) ||
              (thc &&
                thc > this.seeing &&
                c <= this.seeing &&
                this.animys[i].warrior &&
                this.animys[i].hp > 0)) &&
            !this.stopGetTarget
          ) {
            //let oh=(c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&this.handCell);

            //console.log("ok"); pausa=1;
            //warrior=true;
            this.handTarget = 0;
            this.handCell = 0;
            this.way = [];
          }

          ///blackBoock

          //if(dlt){console.log("doloy");};

          //console.log(checkAliens(this.cell.unit,this.animys[i]))

          if (
            this.target &&
            this.animys[i].persolalNumber === this.target.persolalNumber &&
            c > this.dash
          ) {
            this.target = 0;
            this.way = [];
          }
        }
      }

      if (this.fatherFraction.control === "comp" && this.animys.length) {
        this.handCell = 0;
        this.handTarget = 0;
        this.hold_position = false;
      }
    }

    // ii
    ///*

    //let stopBack=false;

    //*/

    // ii

    ///////////////////////////////////////////////////////

    if (
      step_ok &&
      ((!this.handCell && !this.handTarget) || this.iNeedTarget) &&
      //||(this.fatherFraction.control==="comp"&&(this.handCell||this.handTarget)&&!this.iFight)

      this.stopGetTarget === 0
    ) {
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      //this.stepTakt<1&&this.stepTakt>=0&&!this.handCell&&!this.handTarget&&this.stopGetTarget===0

      if (!this.iFight) {
        /////////////////////////

        let min = [];

        let basickMass;

        let life = [];
        let warrior = [];
        let tower = [];
        let els = [];

        for (let i = 0; i < this.animys.length; i++) {
          if (this.animys[i].type === "tower") {
            tower.push(this.animys[i]);
          } else if (this.animys[i].warrior) {
            warrior.push(this.animys[i]);
          } else if (this.animys[i].unitStatus === "life") {
            life.push(this.animys[i]);
          } else {
            els.push(this.animys[i]);
          }
        }

        if (tower.length) {
          basickMass = tower;
        } else if (warrior.length) {
          basickMass = warrior;
        } else if (life.length) {
          basickMass = life;
        } else {
          basickMass = els;
        }

        for (let i = 0; i < basickMass.length; i++) {
          let a = basickMass[i].damagePointX - this.damagePointX;
          let b = basickMass[i].damagePointY - this.damagePointY;

          let c = Math.sqrt(a * a + b * b);

          if (
            (!min.length || c < min[0]) &&
            c <= this.dash &&
            basickMass[i].hp > 0 &&
            basickMass[i].cell
          ) {
            min = [c, basickMass[i]];
          }
        }

        if (
          (this.target &&
            min.length &&
            this.target.persolalNumber !== min[1].persolalNumber) ||
          !this.target
        ) {
          this.targetCell = false;
        } ///!!!!!!!!!!!!!!!!?????????????????

        if (min.length) {
          if (
            this.fatherFraction.control === "comp" &&
            !this.ii_attack &&
            !this.handCell &&
            !this.handTarget &&
            !this.way.length &&
            !this.ii_saveCell
          ) {
            //this.ii_saveCell=this.cell;
            this.comeWithMee(min[1]);
          }

          this.target = min[1];
          this.handCell = 0;
          this.handTarget = 0;
          //this.way=[];
          this.clickSave = false;
          //this.targetCell=this.target.cell;
          this.hold_position = false;
          this.goGroop_sweeme = false;
        } else {
          this.target = 0;
        }
      } else if (this.iFight) {
        if (this.iGetMyCell && !this.stopTroll) {
          if (this.iDoTaktTimer === 100000) {
            this.iDoTaktTimer = 0;
          }

          //iStand
          //console.log(this.iDoTakt);

          if (this.iDoTaktTimer % 4 === 0) {
            this.iDoTakt++;
          }

          if (this.iDoTakt === 4) {
            //pausa=1;

            //x,y,type,target,power

            if (!this.axe) {
              //

              this.tyuk = true;

              this.axeInitialization(
                this.target,
                "distroer_canon",
                this.cell.unit
              );
              this.axe = true;
              if (
                this.target.unitStatus === "building" ||
                !this.target.warrior
              ) {
                if (!this.target.alarmTimer) {
                  this.target.alarmTimer = 500;
                  this.target.agressor = this.cell.unit;
                }
              }

              if (
                this.target &&
                !this.target.neitral &&
                this.target.fatherFraction.control === "comp" &&
                !this.target.sweeme &&
                !this.target.iCanGetSweem &&
                this.target.gabarit === 50 &&
                !this.target.active
              ) {
                this.target.panick_peoples(this.cell.unit);
              }
            }
          }

          if (this.iDoTakt === 5) {
            this.axe = false;
            //this.iFight=false;
            this.animTimer = 100;
            this.stopTroll = this.holdTroll;
            //this.cellUpdate();

            this.iDoTakt = 0;

            //if(this.target.unitStatus==="building"&&this.target.buildready<this.target.hpfull&&this.target.buildready>0){
            //this.target.buildready-=15;
            //}

            //else  if(this.target.hp>0&&this.target.cell){
            //this.target.hp-=15;

            ///			};

            //if(this.target.unitStatus==="life"){	if(this.target&&this.target.fatherFraction.activeUnits.indexOf(this.target)===-1){this.target.fatherFraction.activeUnits.push(this.target);};};
            //if(this.target.unitStatus==="building"){	if(this.target&&this.target.fatherFraction.activeBuildings.indexOf(this.target)===-1){this.target.fatherFraction.activeBuildings.push(this.target);};};
          }
          this.iDoTaktTimer++;

          return;
        }
      }

      if (
        !this.iFight &&
        this.target &&
        this.target.hp > 0 &&
        this.target.cell
      ) {
        this.iGetTarget = this.checkGetTarget_sweeme();
      }

      //console.log("do target : "+get_distanse_on_lineyka(this.cell,100,this.target,this.target.gabarit));
      //console.log(" target seeing : "+this.target.seeing);

      if (this.iGetTarget) {
        this.peonGo(this.target);

        this.iFight = true;
        this.iGetTarget = false;

        this.moveVektor = this.getFightVector(this.target);
        this.getFirePoint();
        //console.log(this.moveVektor);
        this.way = [];
        this.clickSave = false;
      } else {
        if (
          //!this.hold_position
          // &&

          !isBlocked &&
          !this.iFight &&
          this.target &&
          this.target.cell &&
          (this.targetCell !== this.target.cell.persolalNumber ||
            !this.way.length)
        ) {
          this.targetCell = this.target.cell.persolalNumber;

          //console.log("here");

          this.way = "go";

          this.spe = this.target.cell;
          this.hold_position = false;
        }
      }
    } else if (step_ok && !this.handCell && !this.target && this.handTarget) {
      // console.log(this.handTarget);

      if (!this.iFight && this.handTarget.hp > 0 && this.handTarget.cell) {
        this.iGetTarget = this.checkGetHandTarget_sweeme();

        //console.log("ok");
      }

      if (this.iGetTarget) {
        if (
          !this.handTarget.neitral &&
          this.handTarget.fatherFraction.union !== this.fatherFraction.union
        ) {
          this.peonGo(this.handTarget);

          this.iFight = true;
          this.clickSave = false;

          this.iGetTarget = false;

          this.moveVektor = this.getFightVector(this.handTarget);

          this.getFirePoint();
          //console.log(this.firePoint);
          this.way = [];
        } else {
          this.handTarget = 0;
          this.way = [];
          this.handCell = 0;
        }

        this.clickSave = false;
      } else {
        //console.log(this.handTarget);

        if (
          !isBlocked &&
          !this.iFight &&
          this.handTarget.cell &&
          (!this.way.length ||
            (this.targetCell &&
              this.targetCell !== this.handTarget.cell.persolalNumber))
        ) {
          this.targetCell = this.handTarget.cell.persolalNumber;

          this.spe = this.handTarget.cell;

          this.way = "go";
        }
      }

      //console.log(this.iFight);

      if (this.iFight) {
        if (
          this.handTarget.neitral ||
          this.handTarget.fatherFraction.union === this.fatherFraction.union
        ) {
          this.handTarget = 0;
          this.iFight = false;
        }

        if (this.iGetMyCell && !this.stopTroll) {
          if (this.iDoTaktTimer === 100000) {
            this.iDoTaktTimer = 0;
          }

          //iStand
          //console.log(this.iDoTakt);

          if (this.iDoTaktTimer % 4 === 0) {
            this.iDoTakt++;
          }

          if (this.iDoTakt === 4) {
            //pausa=1;

            //x,y,type,target,power

            if (!this.axe) {
              this.tyuk = true;

              this.axeInitialization(
                this.handTarget,
                "distroer_canon",
                this.cell.unit
              );
              this.axe = true;

              if (
                this.handTarget.unitStatus === "building" ||
                !this.handTarget.warrior
              ) {
                if (!this.handTarget.alarmTimer) {
                  this.handTarget.alarmTimer = 500;
                  this.handTarget.agressor = this.cell.unit;
                }
              }
              //console.log("firte");

              if (
                this.handTarget.fatherFraction.control === "comp" &&
                !this.handTarget.sweeme &&
                !this.handTarget.iCanGetSweem &&
                this.handTarget.gabarit === 50 &&
                !this.handTarget.active
              ) {
                this.handTarget.panick_peoples(this.cell.unit);
              }
            }
          }

          if (this.iDoTakt === 5) {
            this.axe = false;
            //this.iFight=false;
            this.animTimer = 100;
            this.stopTroll = this.holdTroll;
            //this.cellUpdate();

            this.iDoTakt = 0;

            //	if(this.handTarget.unitStatus==="building"&&this.handTarget.buildready<this.handTarget.hpfull&&this.handTarget.buildready>0){
            //this.handTarget.buildready-=15;
            //	}

            //else  if(this.handTarget.hp>0&&this.handTarget.cell){
            //this.handTarget.hp-=15;

            //			};

            //if(this.handTarget.unitStatus==="life"){	if(this.handTarget&&this.handTarget.fatherFraction.activeUnits.indexOf(this.handTarget)===-1){this.handTarget.fatherFraction.activeUnits.push(this.handTarget);};};
            //if(this.handTarget.unitStatus==="building"){	if(this.handTarget&&this.handTarget.fatherFraction.activeBuildings.indexOf(this.handTarget)===-1){this.handTarget.fatherFraction.activeBuildings.push(this.handTarget);};};
          }
          this.iDoTaktTimer++;

          return;
        }
      }

      if (isBlocked && step_ok && !this.iFight && this.handTarget) {
        this.handTarget = 0;
        this.way = [];
        this.handCell = 0;
      } //////new!!!!?????
    }

    if (step_ok && this.fatherFraction.control === "comp") {
      if (
        !this.iFight &&
        !this.target &&
        //this.readyToOut&&
        this.ii_saveCell &&
        !this.handTarget &&
        !this.way.length &&
        !this.handCell
      ) {
        let a = this.ii_saveCell.x - this.cell.x;
        let b = this.ii_saveCell.y - this.cell.y;

        let c = Math.sqrt(a * a + b * b);

        if (c > 0) {
          this.clickSave = new ClickSave(0, this.ii_saveCell);

          //console.log(this.persolalNumber);
        }

        if (c <= 1000) {
          this.ii_saveCell = 0;
          this.handCell = 0;
          this.way = [];
        }

        //console.log(this.persolalNumber);
      }
    }

    this.iNeedTarget = false;

    this.go = false;

    let way_unit;
    let way_cell;

    if (this.way.length && step_ok) {
      way_cell = this.way[this.way.length - 1];

      //let ran=Math.floor(Math.random()*11);

      for (let v = way_cell.vertikal - 1; v <= way_cell.vertikal; v++) {
        for (let h = way_cell.horizont; h <= way_cell.horizont + 1; h++) {
          if (
            gameFielg[v] &&
            gameFielg[v][h] &&
            gameFielg[v][h].unit &&
            gameFielg[v][h].unit.persolalNumber !== this.persolalNumber &&
            gameFielg[v][h].unit.active && //(gameFielg[v][h].unit.way.length||gameFielg[v][h].unit.way==="go")
            gameFielg[v][h].unit.hold_position &&
            this.hold_position &&
            this.hold_position === gameFielg[v][h].unit.hold_position &&
            //&&
            //this.checkAntyMoveVektors(gameFielg[v][h].unit)!=="anty"
            this.terpenie < this.terpenie_ran
          ) {
            //if(this.persolalNumber===35){console.log(gameFielg[v][h].unit.persolalNumber);};	iGetLand

            this.terpenie++;

            this.x = this.cell.x;
            this.y = this.cell.y;

            //console.log("ok");

            return;
          }
        }
      }
    }

    if (this.terpenie === this.terpenie_ran) {
      //this.hold_position=false;
      //this.goGroop_sweeme=false;

      //console.log("!!!!!!!!!!!!!");
      this.go = true;
      this.terpenie_ran = 50 + Math.floor(Math.random() * 20);
    }

    this.terpenie = 0;

    this.goWaySweeme(this.cell.unit);

    return;
  } else if (this.type === "oil_tanker") {
    if (this.hp <= 0) {
      this.hp = 0;
      this.target = "dead";
    }
    //this.target="dead"; tanker_iCanGet
    //iStand
    if (this.target === "dead") {
      this.readyToOut = true;

      this.iDoTaktTimer = -1;
      this.iDoTakt = 0;
      //this.myJoube=0;

      this.way = [];
      this.speed = 0;
      this.updateSpeed();
      this.target = 0;
      this.handTarget = 0;
      this.animys = [];
      this.landing = false;
      this.rage = 0;

      this.distroyTimer--;

      if (!this.dopAnim) {
        this.dopAnim = 0;
      }

      if (this.distroyTimer % 10 === 0) {
        this.animY += 100;
      }

      if (this.distroyTimer === 0) {
        //if(this.fatherFraction.peoples.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.peoples.splice(this.fatherFraction.peoples.indexOf(this.cell.dragoon),1);};
        //if(this.fatherFraction.dragons.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.dragons.splice(this.fatherFraction.dragons.indexOf(this.cell.dragoon),1)};
        if (this.fatherFraction.selectIsSweem.indexOf(this.cell.unit) !== -1) {
          this.fatherFraction.selectIsSweem.splice(
            this.fatherFraction.selectIsSweem.indexOf(this.cell.unit),
            1
          );
        }
        //if(this.fatherFraction.control==="comp"&&this.fatherFraction.freeDragons.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.freeDragons.splice(this.fatherFraction.freeDragons.indexOf(this.cell.dragoon),1)};

        for (let v = this.vertikal - 1; v <= this.vertikal; v++) {
          for (let h = this.horizont; h <= this.horizont + 1; h++) {
            gameFielg[v][h].unit = 0;
          }
        }
      }

      if (this.distroyTimer === 0) {
        this.cell = 0;
        this.target = 0;
        this.stepTakt = 0;
      }

      //console.log("pizdez");

      return;
    }

    if (this.handTarget && this.handTarget.hp <= 0) {
      this.handTarget = 0;
      this.way = [];
    }

    this.damagePointX = this.cell.x + 50;
    this.damagePointY = this.cell.y;

    //&&!isBlocked

    if (this.stepTakt < 1 && this.stepTakt >= 0) {
      this.go = false;

      let way_unit;
      let way_cell;

      if (this.way.length) {
        way_cell = this.way[this.way.length - 1];

        //let ran=Math.floor(Math.random()*11);

        for (let v = way_cell.vertikal - 1; v <= way_cell.vertikal; v++) {
          for (let h = way_cell.horizont; h <= way_cell.horizont + 1; h++) {
            if (
              gameFielg[v] &&
              gameFielg[v][h] &&
              gameFielg[v][h].unit &&
              gameFielg[v][h].unit.persolalNumber !== this.persolalNumber &&
              gameFielg[v][h].unit.active && //(gameFielg[v][h].unit.way.length||gameFielg[v][h].unit.way==="go")
              gameFielg[v][h].unit.hold_position &&
              this.hold_position &&
              this.hold_position === gameFielg[v][h].unit.hold_position &&
              //&&
              //this.checkAntyMoveVektors(gameFielg[v][h].unit)!=="anty"
              this.terpenie < this.terpenie_ran
            ) {
              //if(this.persolalNumber===35){console.log(gameFielg[v][h].unit.persolalNumber);};	iGetLand

              this.terpenie++;

              this.x = this.cell.x;
              this.y = this.cell.y;

              //console.log("ok");

              return;
            }
          }
        }
      }

      if (this.terpenie === this.terpenie_ran) {
        //this.hold_position=false;
        //this.goGroop_sweeme=false;

        //console.log("!!!!!!!!!!!!!");
        this.go = true;
        this.terpenie_ran = 50 + Math.floor(Math.random() * 20);
      }

      this.terpenie = 0;

      //if(this.terpenie>=150){this.terpenie=0;};

      //console.log(this.clickSave);
      //pausa=1

      //if(this.jobe){this.myJoube=this.jobe;};

      if (this.clickSave) {
        //console.log(this.clickSave);
        //this.jobe=false;

        if (this.clickSave.handCell) {
          //console.log("ok");
          if (
            this.clickSave.handCell.sea &&
            this.clickSave.handCell.sea === this.cell.sea
          ) {
            this.handTarget = 0;
            this.target = 0;
            this.handCell = this.clickSave.handCell;
            this.way = "go";
            //this.myJoube=false;
            this.active_status = false;
          } else if (this.clickSave.handCell.continent) {
            this.clickSave = false;
            //this.myJoube=false;
            this.active_status = false;
          }
        } else if (this.clickSave.handTarget) {
          if (
            this.clickSave.handTarget.type === "oil_platform" &&
            this.clickSave.handTarget.fatherFraction.fraction ===
              this.fatherFraction.fraction &&
            this.clickSave.handTarget.buildready ===
              this.clickSave.handTarget.hpfull &&
            ((this.clickSave.handTarget.hp > 0 &&
              this.clickSave.handTarget.cell.oil.oil) ||
              this.oil)
          ) {
            //this.myJoube="get oil";
            this.active_status = "get oil";
          } else if (
            this.clickSave.handTarget.type === "oil_Ref" &&
            this.clickSave.handTarget.fatherFraction.fraction ===
              this.fatherFraction.fraction &&
            this.clickSave.handTarget.buildready ===
              this.clickSave.handTarget.hpfull &&
            this.clickSave.handTarget.hp > 0
          ) {
            //this.myJoube="get oil";
            this.active_status = "get oil";
          } else {
            this.handCell = 0;
            this.way = "go";
            this.handTarget = this.clickSave.handTarget;
            //this.myJoube=false;
            this.active_status = false;
          }

          //console.log(this.myJoube);
        }
      }

      //myJoube

      if (this.active_status === "get oil") {
        if (
          !this.oil &&
          // &&
          // !this.handTarget
          this.clickSave.handTarget &&
          this.clickSave.handTarget.type !== "oil_platform"
        ) {
          let min = [];

          for (let i = 0; i < this.fatherFraction.oil_platforms.length; i++) {
            if (
              this.fatherFraction.oil_platforms[i].buildready ===
                this.fatherFraction.oil_platforms[i].hpfull &&
              this.fatherFraction.oil_platforms[i].hp > 0 &&
              this.fatherFraction.oil_platforms[i].cell.oil.oil
            ) {
              let dis = get_distanse_on_lineyka(
                this.cell,
                100,
                this.fatherFraction.oil_platforms[i].cell,
                100
              );

              if (!min.length || min[0] > dis) {
                min = [dis, this.fatherFraction.oil_platforms[i]];
              }
            }
          }

          if (min.length) {
            this.handCell = 0;
            this.way = "go";
            this.handTarget = min[1];
          } else {
            this.handCell = 0;
            this.way = "go";
            this.handTarget = this.clickSave.handTarget;
          }
        } else if (
          !this.oil &&
          //&&
          //!this.handTarget
          this.clickSave.handTarget &&
          this.clickSave.handTarget.type === "oil_platform"
        ) {
          this.handCell = 0;
          this.way = "go";
          this.handTarget = this.clickSave.handTarget;
        } else if (
          this.oil &&
          !this.handTarget &&
          this.clickSave.handTarget &&
          this.clickSave.handTarget.type !== "oil_Ref"
        ) {
          //console.log("here");

          let min = [];

          for (let i = 0; i < this.fatherFraction.oil_Refs.length; i++) {
            if (
              this.fatherFraction.oil_Refs[i].buildready ===
                this.fatherFraction.oil_Refs[i].hpfull &&
              this.fatherFraction.oil_Refs[i].hp > 0
            ) {
              let dis = get_distanse_on_lineyka(
                this.cell,
                100,
                this.fatherFraction.oil_Refs[i].cell,
                150
              );

              if (!min.length || min[0] > dis) {
                min = [dis, this.fatherFraction.oil_Refs[i]];
              }
            }
          }

          if (min.length) {
            this.handCell = 0;
            this.way = "go";
            this.handTarget = min[1];
          } else {
            this.handCell = 0;
            this.way = "go";
            this.handTarget = this.clickSave.handTarget;
          }
        } else if (
          this.oil &&
          //&&
          //!this.handTarget
          this.clickSave.handTarget &&
          this.clickSave.handTarget.type === "oil_Ref"
        ) {
          this.handCell = 0;
          this.way = "go";
          this.handTarget = this.clickSave.handTarget;
        }
      }

      this.clickSave = false;

      if (this.handTarget) {
        /*
if(
this.check_way
&&
!this.tanker_iCanGet

){
this.handTarget=0;
this.active_status=false;
this.way=[];	
}

	
	else 
	*/
        if (
          this.active_status === "get oil" &&
          //!this.oil
          //&&
          //this.handTarget.type==="oil_platform"
          //&&
          (this.handTarget.hp <= 0 ||
            (this.handTarget.type === "oil_platform" &&
              !this.handTarget.cell.oil.oil))
        ) {
          this.handTarget = 0;
          //this.myJoube=false;
          this.active_status = false;
          this.iGetTarget = false;
          this.way = [];

          //console.log("okokoko");
        } else if (
          ((this.handTarget.gabarit === 150 &&
            get_distanse_on_lineyka(
              this.cell,
              100,
              this.handTarget.cell,
              this.handTarget.gabarit
            ) <= 177) ||
            (this.handTarget.gabarit === 100 &&
              get_distanse_on_lineyka(
                this.cell,
                100,
                this.handTarget.cell,
                this.handTarget.gabarit
              ) <= 141.5)) &&
          this.iGetMyCell
        ) {
          this.iGetTarget = true;

          if (this.active_status !== "get oil") {
            this.handTarget = 0;
            this.iGetTarget = false;
            this.handCell = 0;
            this.way = [];
            //console.log("fin");
          }
        }

        if (!this.iGetTarget && this.handTarget) {
          if (!this.way.length && this.iGetMyCell) {
            this.way = "go";
          }
        } else {
          //console.log(this.handTarget.cell.oil.oil); myJoube

          if (this.active_status === "get oil") {
            if (
              this.oil &&
              this.handTarget.type === "oil_Ref" &&
              this.handTarget.fatherFraction.fraction ===
                this.fatherFraction.fraction &&
              this.handTarget.buildready === this.handTarget.hpfull &&
              this.handTarget.hp > 0
            ) {
              //console.log("?????????????");//pausa=1;

              this.handTarget.fatherFraction.oil += 100;
              this.oil = false;

              this.handTarget.tankers.push(this.cell.unit);
              this.handTarget.timers.push({ time: 200 });

              if (
                this.handTarget.fatherFraction.activeBuildings.indexOf(
                  this.handTarget
                ) === -1
              ) {
                this.handTarget.fatherFraction.activeBuildings.push(
                  this.handTarget
                );
              }

              for (
                let i = this.cell.vertikal - 1;
                i <= this.cell.vertikal;
                i++
              ) {
                for (
                  let k = this.cell.horizont;
                  k <= this.cell.horizont + 1;
                  k++
                ) {
                  gameFielg[i][k].unit = 0;
                }
              }

              this.cell = 0;

              //console.log("okay");
              this.iGetTarget = false;
              this.handTarget = 0;
            } else if (
              !this.oil &&
              this.handTarget.type === "oil_platform" &&
              this.handTarget.fatherFraction.fraction ===
                this.fatherFraction.fraction &&
              this.handTarget.buildready === this.handTarget.hpfull &&
              this.handTarget.hp > 0 &&
              this.handTarget.cell.oil.oil
            ) {
              this.handTarget.cell.oil.oil -= 100;

              this.handTarget.tankers.push(this.cell.unit);
              this.handTarget.timers.push({ time: 200 });

              for (
                let i = this.cell.vertikal - 1;
                i <= this.cell.vertikal;
                i++
              ) {
                for (
                  let k = this.cell.horizont;
                  k <= this.cell.horizont + 1;
                  k++
                ) {
                  gameFielg[i][k].unit = 0;
                }
              }

              this.cell = 0;

              //console.log("okay");
              this.iGetTarget = false;
              this.handTarget = 0;
            } else if (this.oil && this.handTarget.type === "oil_platform") {
              this.iGetTarget = false;
              this.handTarget = 0;
            }
            //*
            else if (!this.oil && this.handTarget.type === "oil_Ref") {
              this.iGetTarget = false;
              this.handTarget = 0;
            }
            //*/
          } // get oil
        }
      }
    } //   stepTakt

    this.tanker_iCanGet = false;
    this.check_way = false;

    this.goWaySweeme(this.cell.unit);

    //console.log(this.way);

    if (this.handCell) {
      this.goGroop_sweeme = false;
    }

    return;
  } else if (this.type === "transport") {
    //ii_abort landCells animys

    if (this.hp <= 0) {
      this.hp = 0;
      this.target = "dead";
    }
    //this.target="dead";
    //iStand
    if (this.target === "dead") {
      this.readyToOut = true;

      this.iDoTaktTimer = -1;
      this.iDoTakt = 0;
      //this.myJoube=0;

      this.way = [];
      this.speed = 0;
      this.updateSpeed();
      this.target = 0;
      this.handTarget = 0;
      this.animys = [];
      this.landing = false;
      this.rage = 0;

      this.distroyTimer--;

      if (!this.dopAnim) {
        this.dopAnim = 0;
      }

      if (this.distroyTimer % 10 === 0) {
        this.animY += 100;
      }

      if (this.distroyTimer === 0) {
        //if(this.fatherFraction.peoples.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.peoples.splice(this.fatherFraction.peoples.indexOf(this.cell.dragoon),1);};
        //if(this.fatherFraction.dragons.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.dragons.splice(this.fatherFraction.dragons.indexOf(this.cell.dragoon),1)};
        if (this.fatherFraction.selectIsSweem.indexOf(this.cell.unit) !== -1) {
          this.fatherFraction.selectIsSweem.splice(
            this.fatherFraction.selectIsSweem.indexOf(this.cell.unit),
            1
          );
        }
        //if(this.fatherFraction.control==="comp"&&this.fatherFraction.freeDragons.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.freeDragons.splice(this.fatherFraction.freeDragons.indexOf(this.cell.dragoon),1)};

        for (let m = 0; m < this.passagers.length; m++) {
          this.passagers[m].readyToOut = true;
          this.passagers[m].katastrofa = true;
          this.passagers[m].hp = 0;
        }

        this.passagers = [];

        for (let v = this.vertikal - 1; v <= this.vertikal; v++) {
          for (let h = this.horizont; h <= this.horizont + 1; h++) {
            gameFielg[v][h].unit = 0;
          }
        }
      }

      if (this.distroyTimer === 0) {
        this.cell = 0;
        this.target = 0;
        this.stepTakt = 0;
      }

      //console.log("pizdez");

      return;
    }

    //console.log(this.animys.length)

    this.damagePointX = this.cell.x + 50;
    this.damagePointY = this.cell.y;

    //&&!isBlocked

    if (this.ii_aliss) {
      this.ii_aliss--;
    }

    if (this.stepTakt < 1 && this.stepTakt >= 0) {
      if (
        this.animys.length &&
        this.passagers.length &&
        this.fatherFraction.attack &&
        !this.ii_aliss &&
        this.way.length
        //&&
        //this.fatherFraction.fraction==="blackOrcs"
      ) {
        this.ii_aliss = 100;

        for (let i = this.vertikal - 10; i <= this.vertikal + 10; i++) {
          let br;

          for (let k = this.horizont - 10; k <= this.horizont + 10; k++) {
            let obj;

            if (gameFielg[i] && gameFielg[i][k]) {
              obj = gameFielg[i][k];
            }

            if (
              obj &&
              obj.continent &&
              obj.continent ===
                this.fatherFraction.attack.finish_cell.continent &&
              obj.free
            ) {
              this.clickSave = new ClickSave(0, obj);
              this.passagers_out = true;
              br = true;

              //console.log("okkokokokoko");

              break;
            }
          }

          if (br) {
            break;
          }
        }
      }

      this.animys = []; //////////////!!!!!!!!!!!!!!!!!

      /*
	if(!this.passagers.length){this.ii_abort=false;};
	if(this.way.length&&this.landing){this.landing.iGetLand=false;};
	if(this.fatherFraction.control==="comp"&&this.fatherFraction.attack){
		//if(!this.iGetLand){this.ii_abort=this.fatherFraction.attack.attack_target_fraction_continent;};
	};
*/

      this.go = false;

      let way_unit;
      let way_cell;

      if (this.way.length) {
        way_cell = this.way[this.way.length - 1];

        //let ran=Math.floor(Math.random()*11);

        for (let v = way_cell.vertikal - 1; v <= way_cell.vertikal; v++) {
          for (let h = way_cell.horizont; h <= way_cell.horizont + 1; h++) {
            if (
              gameFielg[v] &&
              gameFielg[v][h] &&
              gameFielg[v][h].unit &&
              gameFielg[v][h].unit.persolalNumber !== this.persolalNumber &&
              gameFielg[v][h].unit.active && //(gameFielg[v][h].unit.way.length||gameFielg[v][h].unit.way==="go")
              gameFielg[v][h].unit.hold_position &&
              gameFielg[v][h].unit.fatherFraction.fraction ===
                this.fatherFraction.fraction &&
              this.hold_position &&
              this.hold_position === gameFielg[v][h].unit.hold_position &&
              //&&
              //this.checkAntyMoveVektors(gameFielg[v][h].unit)!=="anty"
              this.terpenie < this.terpenie_ran
            ) {
              //if(this.persolalNumber===35){console.log(gameFielg[v][h].unit.persolalNumber);};	iGetLand

              this.terpenie++;

              this.x = this.cell.x;
              this.y = this.cell.y;

              //console.log("ok");

              return;
            }
          }
        }
      }

      if (this.terpenie === this.terpenie_ran) {
        //this.hold_position=false;
        //this.goGroop_sweeme=false;

        //console.log("!!!!!!!!!!!!!");
        this.go = true;
        this.terpenie_ran = 50 + Math.floor(Math.random() * 20);
      }

      this.terpenie = 0;

      //if(this.terpenie>=150){this.terpenie=0;};

      //pausa=1

      if (this.clickSave && this.clickSave.handCell) {
        this.spe = this.clickSave.handCell;

        //console.log("ok");
        if (
          this.clickSave.handCell.sea &&
          this.clickSave.handCell.sea === this.cell.sea &&
          this.spe.persolalNumber !== this.cell.persolalNumber
        ) {
          this.landing = false;
          this.handTarget = 0;
          this.target = 0;
          this.handCell = this.clickSave.handCell;
          this.way = "go";
          this.tardetLandCell = false;
        } else if (this.clickSave.handCell.continent) {
          if (
            allContinents[this.clickSave.handCell.continent].my_seas[
              this.cell.sea
            ]
          ) {
            //console.log(allContinents[this.clickSave.handCell.continent])
            //console.log(allSeas[this.cell.sea])

            /////////////

            this.landing = {
              base_cell: this.clickSave.handCell,
              landCells: [],
              passagers_out_cells: [],
            };

            this.way = [];
            this.tardetLandCell = false;
            //console.log("land");

            ///////////////
          } else {
            this.clickSave = 0;
          }
        }
      }

      this.clickSave = false;

      if (this.landing) {
        if (
          !this.tardetLandCell ||
          !this.checkGoodLandingCell(this.tardetLandCell)
        ) {
          this.tardetLandCell = this.getMy_landing_cell();

          this.way = [];

          //console.log(!this.checkGoodLandingCell(this.tardetLandCell))
          //if(this.persolalNumber===143){console.log(!this.checkGoodLandingCell(this.tardetLandCell));};
        } else {
          if (
            this.cell.persolalNumber !== this.tardetLandCell.persolalNumber &&
            !this.way.length
            //||(this.way[this.way.length-1].persolalNumber!==this.tardetLandCell.persolalNumber)
          ) {
            this.handTarget = 0;
            this.target = 0;
            this.handCell = this.tardetLandCell;
            this.spe = this.tardetLandCell;
            this.way = "go";
            this.iCanGet = false;
          } else if (
            this.cell.persolalNumber === this.tardetLandCell.persolalNumber &&
            this.iGetMyCell &&
            !this.landing.iGetLand
          ) {
            //console.log("i get");
            //this.landing=false;
            this.landing.iGetLand = this.landing.base_cell.continent;
          } else if (this.landing.iGetLand) {
            if (!this.landing.landCells.length) {
              let cells = [];
              let dis = [];

              for (
                let i = this.cell.vertikal - 10;
                i <= this.cell.vertikal + 10;
                i++
              ) {
                for (
                  let k = this.cell.horizont - 10;
                  k <= this.cell.horizont + 10;
                  k++
                ) {
                  if (
                    gameFielg[i] &&
                    gameFielg[i][k] &&
                    gameFielg[i][k].continent &&
                    gameFielg[i][k].continent ===
                      this.landing.base_cell.continent
                  ) {
                    this.landing.passagers_out_cells.push(gameFielg[i][k]);

                    if (
                      //gameFielg[i]&&gameFielg[i][k]
                      //&&
                      //gameFielg[i][k].continent
                      //&&
                      //gameFielg[i][k].continent===this.landing.base_cell.continent
                      //&&
                      gameFielg[i][k].water_line
                    ) {
                      cells.push(gameFielg[i][k]);
                      dis.push(
                        get_distanse_on_lineyka(
                          this.cell,
                          100,
                          gameFielg[i][k],
                          50
                        )
                      );
                    }
                  }
                }
              }

              //pausa=1
              for (let k = 0; k < 2; k++) {
                let min = [];
                for (let i = 0; i < dis.length; i++) {
                  if ((!min.length || min[0] > dis[i]) && !cells[i].vossalObj) {
                    min = [dis[i], cells[i], i];
                  }
                }

                this.landing.landCells.push(min[1]);
                cells.splice(min[2], 1);
                dis.splice(min[2], 1);
              }
            } else {
              if (this.passagers.length < 9) {
                for (let i = 0; i < this.landing.landCells.length; i++) {
                  if (this.passagers.length === 9) {
                    break;
                  }

                  if (
                    this.fatherFraction.control === "comp" &&
                    this.landing.landCells[i].unit.transport &&
                    this.landing.landCells[i].unit.fatherFraction.fraction ===
                      this.fatherFraction.fraction &&
                    this.landing.landCells[i].unit.hp > 0
                    //&&

                    //(this.fatherFraction.attack&&this.fatherFraction.attack.transports.indexOf(this.cell.unit)!==-1)
                  ) {
                    this.landing.landCells[i].unit.way = [];
                    this.landing.landCells[i].unit.iin = true;

                    if (!this.landing.landCells[i].unit.born_cell) {
                      this.landing.landCells[i].unit.born_cell =
                        this.landing.landCells[i].unit.cell;
                    }
                  } else if (this.fatherFraction.control !== "comp") {
                  }

                  if (
                    this.landing.landCells[i].unit.iin &&
                    ((this.landing.landCells[i].unit.stepTakt < 1 &&
                      this.landing.landCells[i].unit.stepTakt >= 0) ||
                      this.landing.landCells[i].unit.iGetMyCell)
                    //&&
                    //(
                    //this.landing.landCells[i].unit.handCell.persolalNumber===this.landing.landCells[0].persolalNumber
                    //||
                    //this.landing.landCells[i].unit.handCell.persolalNumber===this.landing.landCells[1].persolalNumber

                    //)
                  ) {
                    for (
                      let k = 0;
                      k < this.landing.landCells[i].unit.contaktCells.length;
                      k++
                    ) {
                      gameFielg[
                        this.landing.landCells[i].unit.contaktCells[k].vertikal
                      ][
                        this.landing.landCells[i].unit.contaktCells[k].horizont
                      ].iContaktWith.splice(
                        gameFielg[
                          this.landing.landCells[i].unit.contaktCells[k]
                            .vertikal
                        ][
                          this.landing.landCells[i].unit.contaktCells[k]
                            .horizont
                        ].iContaktWith.indexOf(
                          this.landing.landCells[i].unit.contaktCells[k]
                        ),
                        1
                      );
                    }

                    this.landing.landCells[i].unit.contaktCells = [];

                    if (
                      this.passagers.indexOf(this.landing.landCells[i].unit) ===
                      -1
                    ) {
                      this.passagers.push(this.landing.landCells[i].unit);
                    }

                    let unit = this.landing.landCells[i].unit;

                    if (unit.transport) {
                      let ind = unit.transport.ii_passagers.indexOf(unit);

                      if (ind !== -1) {
                        unit.transport.ii_passagers.splice(ind, 1);
                      }

                      unit.transport = this.cell.unit;
                    }

                    this.landing.landCells[i].unit.iin = false;

                    unit.cell.free = true;
                    unit.cell.unit = 0;
                    unit.cell = 0;

                    //console.log(unit);

                    unit.handCell = 0;
                    unit.way = [];
                    unit.vertikal = false;
                    unit.horizont = false;
                    unit.x = false;
                    unit.y = false;
                    unit.stepTakt = 0;
                    unit.rage = 0;
                    unit.transport = false;
                    unit.handTarget = 0;
                    unit.animys = [];
                    unit.pas = true;

                    ////////////////// ii
                    //this.attack.warriors_in_active=0;
                    //this.attack.alive_warriors=[];
                    if (unit.ii_attack && unit.fatherFraction.attack) {
                      unit.fatherFraction.attack.alive_warriors.push(unit);
                      unit.fatherFraction.attack.warriors_in_active++;
                    }

                    /////////////////

                    //unit.ii_saveCell=false;
                  }
                  //else{this.landing.landCells[i].unit.iin=false;};
                }
              }

              /*
if(
this.ii_abort
//&&
//this.ii_abort===this.landing.base_cell.continent

){
	this.ii_abort=false;
	this.passagers_out=true;
	};
*/

              if (this.passagers_out) {
                //console.log("out");

                this.passagers_out = false;

                for (let i = 0; i < this.passagers.length; i++) {
                  let min = [];

                  for (
                    let k = 0;
                    k < this.landing.passagers_out_cells.length;
                    k++
                  ) {
                    if (this.landing.passagers_out_cells[k].free) {
                      let dis = get_distanse_on_lineyka(
                        this.landing.passagers_out_cells[k],
                        50,
                        this.landing.landCells[0],
                        50
                      );

                      if (!min.length || min[0] > dis) {
                        min = [dis, this.landing.passagers_out_cells[k]];
                      }
                    }
                  }

                  let cell = min[1];

                  if (cell) {
                    this.passagers[i].cell =
                      gameFielg[min[1].vertikal][min[1].horizont];

                    this.passagers[i].horizont =
                      this.passagers[i].cell.horizont;
                    this.passagers[i].vertikal =
                      this.passagers[i].cell.vertikal;
                    this.passagers[i].x = this.passagers[i].cell.x;
                    this.passagers[i].y = this.passagers[i].cell.y;
                    this.passagers[i].cell.unit = this.passagers[i];
                    this.passagers[i].cell.free = false;
                    this.passagers[i].ii_saveCell = false;
                    this.passagers[i].handCell = 0;
                    this.passagers[i].transport = false; // ii
                    this.passagers[i].stepTakt = 0;
                    this.passagers[i].pas = false;
                    this.passagers[i].animys = [];
                    this.passagers[i].cellUpdate();
                    this.passagers[i].p_transport = false;

                    let obj = this.passagers[i];

                    let ind = this.fatherFraction.activeUnits.indexOf(obj);

                    if (ind === -1) {
                      this.fatherFraction.activeUnits.push(obj);
                      obj.active = true;
                    }

                    this.passagers.shift();
                    i--;
                  }
                }

                this.ii_ajackt = true;
              }
            }
          }
        }
      }
    } //   stepTakt

    this.goWaySweeme(this.cell.unit);

    if (this.handCell) {
      this.goGroop_sweeme = false;
    }

    return;
  } else if (this.type === "dragoon") {
    //console.log(this.axe);

    //if(this.iDoTakt!==4){this.axe=false;};

    if (this.hp <= 0) {
      this.hp = 0;
      this.target = "dead";
    }
    //this.target="dead";
    //iStand
    if (this.target === "dead") {
      this.iDoTaktTimer = -1;
      this.iDoTakt = 0;
      //this.myJoube=0;
      this.iFight = false;
      this.way = [];
      this.speed = 0;
      this.updateSpeed();
      this.target = 0;
      this.handTarget = 0;
      this.animys = [];

      this.distroyTimer--;

      if (!this.dopAnim) {
        this.dopAnim = 0;
      }

      if (this.distroyTimer % 6 === 0) {
        this.dopAnim += 100;
      }

      if (this.distroyTimer === 0) {
        this.readyToOut = true;

        //if(this.fatherFraction.peoples.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.peoples.splice(this.fatherFraction.peoples.indexOf(this.cell.dragoon),1);};
        //if(this.fatherFraction.dragons.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.dragons.splice(this.fatherFraction.dragons.indexOf(this.cell.dragoon),1)};
        if (
          this.fatherFraction.selectDragons.indexOf(this.cell.dragoon) !== -1
        ) {
          this.fatherFraction.selectDragons.splice(
            this.fatherFraction.selectDragons.indexOf(this.cell.dragoon),
            1
          );
        }
        //if(this.fatherFraction.control==="comp"&&this.fatherFraction.freeDragons.indexOf(this.cell.dragoon)!==-1){this.fatherFraction.freeDragons.splice(this.fatherFraction.freeDragons.indexOf(this.cell.dragoon),1)};

        for (let v = this.vertikal - 1; v <= this.vertikal; v++) {
          for (let h = this.horizont; h <= this.horizont + 1; h++) {
            gameFielg[v][h].dragoon = false;
          }
        }
      }

      if (this.distroyTimer === 0) {
        this.cell = 0;
        this.target = 0;
        this.stepTakt = 0;
      }

      //console.log("pizdez");

      return;
    }

    //console.log(this.ii_saveCell);

    if (this.fatherFraction.control === "comp") {
      this.dash = 1000;
    } // ii

    /*
for(let i=0;i<this.animys.length;i++){

if(this.animys[i].type===1){console.log("east");};	
	
};
*/
    //console.log(this.clickSave);

    if (this.stopTroll) {
      this.stopTroll--;
      this.iFight = false;
      return;
    }

    //////////////////////////////////////////
    ///////////////////////////////////////////////

    //indexOf
    /*
else if(this.fatherFraction.control==="comp"&&!this.handCell&&!this.handTarget&&this.stepTakt<1&&this.stepTakt>=0&&this.iDoTakt===0){
	
  if(this.fatherFraction.freeLuchniks.indexOf(this.cell.unit)===-1){this.fatherFraction.freeLuchniks.push(this.cell.unit);};	
	
};
*/
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    let isBlocked = false;

    if (this.stepTakt < 1 && this.stepTakt >= 0 && !this.iFight) {
      if (
        this.target &&
        (this.target.hp <= 0 ||
          !this.target.cell ||
          this.target.buildready <= 0)
      ) {
        this.target = 0;
        this.iFight = false;
        this.iDoTakt = 0;
        this.way = [];
      } else if (
        this.handTarget &&
        (this.handTarget.hp <= 0 ||
          !this.handTarget.cell ||
          this.handTarget.buildready <= 0)
      ) {
        this.handCell = this.handTarget.cell;

        this.handTarget = 0;
        this.iFight = false;
        this.iDoTakt = 0;
        //this.way=[];
      }

      isBlocked = this.isBlockedDrag();

      //console.log(isBlocked);

      ///*
      let hDis2 = false;

      if (this.clickSave.handTarget && isBlocked) {
        let a = this.clickSave.handTarget.damagePointX - this.damagePointX;
        let b = this.clickSave.handTarget.damagePointY - this.damagePointY;

        hDis2 = Math.sqrt(a * a + b * b);
      }
      //*/

      if (
        this.clickSave &&
        (!isBlocked || (isBlocked && hDis2 && hDis2 <= this.seeing))
      ) {
        if (this.clickSave.handCell && !isBlocked) {
          //console.log("gogogog");

          this.handTarget = 0;
          this.target = 0;
          this.handCell = this.clickSave.handCell;
          this.way = "go";
          //this.stopGetTarget=50;
          //if(this.clickSave.wait){this.ii_saveCell=this.cell;};
        } else if (
          this.clickSave.handTarget &&
          (!this.handTarget ||
            this.clickSave.handTarget.persolalNumber !==
              this.handTarget.persolalNumber)
        ) {
          this.handTarget = this.clickSave.handTarget;
          this.target = 0;
          this.handCell = 0;
          //this.stopGetTarget=50;
          this.way = [];
          this.targetCell = false;

          //if(this.clickSave.wait){this.ii_saveCell=this.cell;};

          //console.log("ok");
        }
      }

      if (this.clickSave && this.clickSave.hold) {
        this.clickSave.hold--;
      }

      if (this.clickSave && !this.clickSave.hold) {
        this.clickSave = false; ////////////////////////////////////////////////////////////////////////!!!!!!!!!!
        //console.log("????");
      }
      ///*/
      /////////////////////////////////////////////////
      /////////////////////////////////////////////////
    }
    //console.log(this.clickSave);
    //

    //if(this.handTarget){console.log("ok");};

    //if(this.stopGetTarget){this.stopGetTarget--;};
    //if(this.iStand){this.stopGetTarget=0;};

    //console.log(this.stopGetTarget);
    /////////////////////////////////////////////////// new!!!

    let warrior = false;

    if (this.stepTakt < 1 && this.stepTakt >= 0 && !this.iFight) {
      /*
let thc;

if(this.handTarget){
	
    let hta=this.handTarget.damagePointX-this.damagePointX;
	let htb=this.handTarget.damagePointY-this.damagePointY;	

thc=Math.sqrt(hta*hta+htb*htb);

};
*/

      let c;

      for (let i = 0; i < this.animys.length; i++) {
        if (this.animys[i] && this.animys[i].damagePointX) {
          let a = this.animys[i].damagePointX - this.damagePointX;
          let b = this.animys[i].damagePointY - this.damagePointY;

          c = Math.sqrt(a * a + b * b);
        }
        /*
if(
//(this.fatherFraction.control==="comp"&&c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&(this.handCell||this.handTarget))||(c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&this.handCell)
this.fatherFraction.control==="player"&&
(
(this.handCell&&c<=this.seeing&&this.animys[i].warrior&&this.animys[i].hp>0)
||
(thc&&thc>this.seeing&&c<=this.seeing&&this.animys[i].warrior&&this.animys[i].hp>0)
)

){
	
	//let oh=(c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&this.handCell);
	
	//console.log("ok");
	warrior=true;
	this.handTarget=0;
	this.handCell=0;
	this.way=[];
	
	
	
	};	
*/
        if (
          this.animys[i] &&
          this.target &&
          this.animys[i].persolalNumber === this.target.persolalNumber &&
          c > this.dash
        ) {
          this.target = 0;
          this.way = [];
        }

        if (
          !this.animys[i] ||
          (!c && c !== 0) ||
          c > this.dash ||
          !this.animys[i].cell ||
          this.animys[i].hp <= 0
          //||
          //(this.damagePointX===this.animys[i].damagePointX&&this.damagePointY===this.animys[i].damagePointY)
        ) {
          /*
	if(this.animys[i].type===1){
		console.log("delete");
	console.log("dash : "+this.dash);
	console.log("c : "+c);
	pausa=1;
	};
	*/

          //if(this.fatherFraction.selectUnits.indexOf(this.cell.unit)!==-1&&c>this.dash){console.log("c : "+c);};

          this.animys.splice(i, 1);
          i--;
        }
      }
    }

    // ii
    ///*

    //let stopBack=false;

    if (this.fatherFraction.control === "comp" && this.animys.length) {
      this.handCell = 0;
      this.handTarget = 0;
      //stopBack=true;
      this.stopGetTarget = 0;
      //this.way=[];
    }
    //*/

    // ii

    ///////////////////////////////////////////////////////

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      !this.handCell &&
      !this.handTarget
      //&&!this.way.length

      //||(this.fatherFraction.control==="comp"&&(this.handCell||this.handTarget)&&!this.iFight)
    ) {
      //console.log("i seee");

      if (
        this.fatherFraction.control === "comp" &&
        !this.ii_saveCell &&
        !this.ii_attack
      ) {
        this.ii_saveCell = this.born_cell;
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      //this.stepTakt<1&&this.stepTakt>=0&&!this.handCell&&!this.handTarget&&this.stopGetTarget===0

      if (!this.iFight) {
        /////////////////////////

        let min = [];

        let basickMass;

        let life = [];
        let warrior = [];
        let tower = [];
        let els = [];

        for (let i = 0; i < this.animys.length; i++) {
          if (this.animys[i].iCanGetFly) {
            tower.push(this.animys[i]);
          } else if (this.animys[i].warrior) {
            warrior.push(this.animys[i]);
          } else if (this.animys[i].unitStatus === "life") {
            life.push(this.animys[i]);
          } else {
            els.push(this.animys[i]);
          }
        }

        if (tower.length) {
          basickMass = tower;
        } else if (warrior.length) {
          basickMass = warrior;
        } else if (life.length) {
          basickMass = life;
        } else {
          basickMass = els;
        }

        for (let i = 0; i < basickMass.length; i++) {
          let a = basickMass[i].damagePointX - this.damagePointX;
          let b = basickMass[i].damagePointY - this.damagePointY;

          let c = Math.sqrt(a * a + b * b);

          if (
            (!min.length || c < min[0]) &&
            c <= this.dash &&
            basickMass[i].hp > 0 &&
            basickMass[i].cell
          ) {
            min = [c, basickMass[i]];
          }
        }

        /*	
	
for(let i=0;i<this.animys.length;i++){
	
	let a=this.animys[i].damagePointX-this.damagePointX;
	let b=this.animys[i].damagePointY-this.damagePointY;
	
	let c=Math.sqrt(a*a+b*b);
	
	//this.target=this.animys[i];
	///*
	if((!min.length||c<min[0])&&
	((c<=this.dash&&this.animys[i].hp>0&&this.animys[i].cell&&!warrior)||(warrior&&c<=this.dash&&this.animys[i].hp>0&&this.animys[i].warrior))
	
	//&&!this.animys[i].isBlocked(this.cell.unit)
	
){
		min=[c,this.animys[i]];
		};
	

	
};


*/

        if (
          (this.target &&
            min.length &&
            this.target.persolalNumber !== min[1].persolalNumber) ||
          !this.target
        ) {
          this.targetCell = false;
        } ///!!!!!!!!!!!!!!!!?????????????????

        if (min.length) {
          /*	
if(this.fatherFraction.control==="comp"&&!this.ii_attack&&!this.handCell&&!this.handTarget&&!this.way.length&&!this.ii_saveCell){
	this.ii_saveCell=this.cell;
	this.comeWithMee(min[1]);
	};
	*/

          this.target = min[1];
          this.handCell = 0;
          this.handTarget = 0;
          this.way = [];
          this.clickSave = false;
        } else {
          this.target = 0;
        }
      } else if (this.iFight) {
        if (this.iGetMyCell && !this.stopTroll) {
          if (this.iDoTaktTimer === 100000) {
            this.iDoTaktTimer = 0;
          }

          //iStand
          //console.log(this.iDoTakt);

          if (this.iDoTaktTimer % 4 === 0) {
            if (!this.iDoTakt) {
              this.tyuk = true;
            }

            this.iDoTakt++;
          }

          if (this.iDoTakt === 6) {
            //pausa=1;
            //console.log("fffff");
            //x,y,type,target,power

            if (!this.axe) {
              //pausa=1
              this.axeInitialization(
                this.target,
                "dragoonFire",
                this.cell.unit
              );
              //this.axeInitialization(this.target,"topor",this.cell.unit);
              //this.axeInitialization(this.target,"orc_ballista",this.cell.unit);
              //console.log("here");

              this.axe = true;

              if (
                this.target.unitStatus === "life" &&
                !this.target.warrior &&
                !this.target.alarmTimer
              ) {
                this.target.alarmTimer = 500;
                this.target.agressor = this.cell.dragoon;
              }
            }
          }

          if (this.iDoTakt === 7) {
            this.axe = false;
            //this.iFight=false;
            this.animTimer = 100;
            this.stopTroll = this.holdTroll;
            //this.cellUpdate();

            this.iDoTakt = 0;

            //if(this.target.unitStatus==="building"&&this.target.buildready<this.target.hpfull&&this.target.buildready>0){
            //this.target.buildready-=15;
            //}

            //else  if(this.target.hp>0&&this.target.cell){
            //this.target.hp-=15;

            ///			};

            //if(this.target.unitStatus==="life"){	if(this.target&&this.target.fatherFraction.activeUnits.indexOf(this.target)===-1){this.target.fatherFraction.activeUnits.push(this.target);};};
            //if(this.target.unitStatus==="building"){	if(this.target&&this.target.fatherFraction.activeBuildings.indexOf(this.target)===-1){this.target.fatherFraction.activeBuildings.push(this.target);};};
          }
          this.iDoTaktTimer++;

          return;
        }
      }

      if (
        !this.iFight &&
        this.target &&
        this.target.hp > 0 &&
        this.target.cell
      ) {
        this.iGetTarget = this.checkGetTarget();

        //console.log(this.target.unitName);
      }

      //console.log(this.iGetTarget);control

      if (this.iGetTarget) {
        this.peonGo(this.target);

        this.iFight = true;
        this.iGetTarget = false;

        this.moveVektor = this.getFightVector(this.target);
        this.getFirePoint();
        //console.log(this.moveVektor);
        this.way = [];
        this.clickSave = false;
      } else {
        let nextCell_ok = this.checkNextDragCell();

        //console.log(isBlocked);

        if (
          !isBlocked &&
          !this.iFight &&
          this.target &&
          (this.targetCell !== this.target.cell.persolalNumber ||
            !this.way.length ||
            (this.way.length && nextCell_ok < 4))
        ) {
          this.targetCell = this.target.cell.persolalNumber;

          let noFree = 1000;

          this.finish = this.target.cell;
          this.sosFin = this.target.cell;
          //getWay(this.cell.unit,noFree,2000);

          let dis;

          if (this.target) {
            let a = this.target.damagePointX - this.damagePointX;
            let b = this.target.damagePointY - this.damagePointY;

            dis = Math.sqrt(a * a + b * b);
          }

          //console.log("dis : "+dis);

          let deep;

          if (dis <= 300) {
            deep = 400;
          } else if (dis > 300 && deep < 500) {
            deep = 600;
          } else {
            deep = 1000;
          }

          //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //dlya luchnik
          /*
let luchnik=undefined;


if(this.target.unitStatus==="life"){luchnik=1;};
*/

          let luchnik = 3; //undefined;

          /*
if(!this.target.myCells||!this.target.myCells.length){
		
	luchnik=1;
		
	}

	else if(this.target.myCells&&this.target.myCells.length){
	luchnik=3;
	//console.log(this.handTarget);
	}
	*/

          //console.log(luchnik);

          ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          getWay(arg, noFree, 500, this.target, luchnik);

          //console.log(this.way.length)
        }
      }
    } else if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      !this.handCell &&
      !this.target &&
      this.handTarget
    ) {
      // console.log(this.handTarget);

      if (!this.iFight && this.handTarget.hp > 0 && this.handTarget.cell) {
        this.iGetTarget = this.checkGetHandTarget();

        //console.log("ok");
      }

      if (this.iGetTarget) {
        //console.log(this.iGetTarget)

        if (
          !this.handTarget.neitral &&
          this.handTarget.fatherFraction.union !== this.fatherFraction.union
        ) {
          this.peonGo(this.handTarget);

          this.iFight = true;
          this.clickSave = false;

          this.iGetTarget = false;

          this.moveVektor = this.getFightVector(this.handTarget);

          this.getFirePoint();
          //console.log(this.firePoint);
          this.way = [];
        } else {
          this.handTarget = 0;
          this.way = [];
          this.handCell = 0;
        }

        this.clickSave = false;
      } else {
        //console.log(this.handTarget);

        let nextCell_ok = this.checkNextDragCell();

        if ((!this.way.length || nextCell_ok < 4) && !this.iFight) {
          let luchnik = 3;

          /*
if((!this.handTarget.myCells||!this.handTarget.myCells.length)&&(!this.handTarget.neitral&&this.handTarget.fatherFraction.union!==this.fatherFraction.union)){
		
	luchnik=1;
		
	}
	else if((!this.handTarget.myCells||!this.handTarget.myCells.length)&&(this.handTarget.neitral||this.handTarget.fatherFraction.union===this.fatherFraction.union)){
	luchnik=2;
	//console.log(this.handTarget);
	}
	else if((this.handTarget.myCells&&this.handTarget.myCells.length)&&(this.handTarget.neitral||this.handTarget.fatherFraction.union===this.fatherFraction.union)){
	luchnik=undefined;
	//console.log(this.handTarget);
	}
	else if((this.handTarget.myCells&&this.handTarget.myCells.length)&&(!this.handTarget.neitral&&this.handTarget.fatherFraction.union!==this.fatherFraction.union)){
	luchnik=3;
	//console.log(this.handTarget);
	}
*/

          //console.log(luchnik);

          ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          this.finish = this.handTarget.cell;
          this.sosFin = this.handTarget.cell;

          getWay(arg, 350, 500, this.handTarget, luchnik);

          let iCanGet = this.iCanGet;
          this.iCanGet = false;

          //console.log(iCanGet);

          if (
            !iCanGet ||
            ((!luchnik || luchnik === 2) && this.handTarget.isBlocked())
          ) {
            //console.log("nenenene");

            if (this.way.length) {
              this.handCell = this.way[0]; //console.log("go")

              if (this.way.length > 3) {
                this.clickSave = false;
              }
            } else {
              this.handCell = this.handTarget.cell;

              this.clickSave = false;
            }

            this.handTarget = 0;
            //console.log("oh");
            //console.log(iCanGet);
          }
        }
      }

      //console.log(this.iFight);

      if (this.iFight) {
        if (
          this.handTarget.neitral ||
          this.handTarget.fatherFraction.union === this.fatherFraction.union
        ) {
          this.handTarget = 0;
          this.iFight = false;
        }

        if (this.iGetMyCell && !this.stopTroll) {
          if (this.iDoTaktTimer === 100000) {
            this.iDoTaktTimer = 0;
          }

          //iStand
          //console.log(this.iDoTakt);

          if (this.iDoTaktTimer % 4 === 0) {
            this.iDoTakt++;
          }

          if (this.iDoTakt === 4) {
            //pausa=1;

            //x,y,type,target,power

            if (!this.axe) {
              this.axeInitialization(
                this.handTarget,
                "dragoonFire",
                this.cell.unit
              );
              //pausa=1
              //	this.axeInitialization(this.handTarget,"orc_ballista",this.cell.unit);
              //let axe=new Axes(this.firePointX,this.firePointY,"cannon_tower",undefined,this.attack,this.cell.unit,conor,xy);
              this.axe = true;
              this.tyuk = true;

              if (
                this.handTarget.unitStatus === "life" &&
                !this.handTarget.warrior &&
                !this.handTarget.alarmTimer
              ) {
                this.handTarget.alarmTimer = 500;
                this.handTarget.agressor = this.cell.dragoon;
              }
            }
          }

          if (this.iDoTakt === 5) {
            this.axe = false;
            //this.iFight=false;
            this.animTimer = 100;
            this.stopTroll = this.holdTroll;
            //this.cellUpdate();

            this.iDoTakt = 0;

            //	if(this.handTarget.unitStatus==="building"&&this.handTarget.buildready<this.handTarget.hpfull&&this.handTarget.buildready>0){
            //this.handTarget.buildready-=15;
            //	}

            //else  if(this.handTarget.hp>0&&this.handTarget.cell){
            //this.handTarget.hp-=15;

            //			};

            //if(this.handTarget.unitStatus==="life"){	if(this.handTarget&&this.handTarget.fatherFraction.activeUnits.indexOf(this.handTarget)===-1){this.handTarget.fatherFraction.activeUnits.push(this.handTarget);};};
            //if(this.handTarget.unitStatus==="building"){	if(this.handTarget&&this.handTarget.fatherFraction.activeBuildings.indexOf(this.handTarget)===-1){this.handTarget.fatherFraction.activeBuildings.push(this.handTarget);};};
          }
          this.iDoTaktTimer++;

          return;
        }
      }

      if (
        isBlocked &&
        this.stepTakt < 1 &&
        this.stepTakt >= 0 &&
        !this.iFight &&
        this.handTarget
      ) {
        this.handTarget = 0;
        this.way = [];
        this.handCell = 0;
      } //////new!!!!?????
    }

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      this.fatherFraction.control === "comp" &&
      !this.iFight &&
      !this.target &&
      //this.readyToOut&&
      this.ii_saveCell &&
      !this.handTarget &&
      !this.way.length &&
      !this.handCell
    ) {
      let a = this.ii_saveCell.x - this.cell.x;
      let b = this.ii_saveCell.y - this.cell.y;

      let c = Math.sqrt(a * a + b * b);

      if (c > 0) {
        this.clickSave = new ClickSave(0, this.ii_saveCell);

        //console.log(this.persolalNumber);
      }

      if (c <= 250) {
        this.ii_saveCell = 0;
      }

      //console.log(this.persolalNumber);
    }

    this.iNeedTarget = false;

    //console.log(this.persolalNumber);

    //console.log(this.finish);
    //pausa=1;
    //console.log(this.animys);

    this.goWayDrag(this.cell.dragoon);

    //console.log(this.x);
    //console.log(this.cell.x);

    return;
  } else if (this.type === "rizar") {
    //magickTarget
    //animY
    //iStand
    //hp
    ///////////////////////////////////////////////////////////////////////////////////////////
    //this.attack=this.baseAttack*this.fatherFraction.dopNoFlyAttack;
    //this.panzer=this.basePanzer*this.fatherFraction.dopNoFlyPanzer;

    //this.level=1+(this.fatherFraction.dopNoFlyAttack_level)+
    //(this.fatherFraction.dopNoFlyPanzer_level);

    /*
if(this.fatherFraction.canMagick){
		this.mana=(floorGlobalTimer-this.manaTimer)*25;
		}
		else{this.mana=0;};
*/

    //if(this.mana>100){this.mana=100;};

    ///////////////////////////////////////////////////////////////////////////////////////////

    if (this.hp <= 0) {
      this.hp = 0;
      this.target = "dead";
    }
    //this.target="dead";
    //iStand
    if (this.target === "dead") {
      this.magickTarget = false;
      this.iDoTaktTimer = -1;
      this.iDoTakt = 0;
      //this.myJoube=0;
      this.iFight = false;
      this.way = [];
      this.speed = 0;
      this.updateSpeed();
      this.target = 0;
      this.handTarget = 0;
      this.animys = [];

      this.distroyTimer--;

      if (this.distroyTimer === 992) {
        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );
        }

        //if(this.fatherFraction.peoples.indexOf(this.cell.unit)!==-1){this.fatherFraction.peoples.splice(this.fatherFraction.peoples.indexOf(this.cell.unit),1)};
        //if(this.fatherFraction.rizars.indexOf(this.cell.unit)!==-1){this.fatherFraction.rizars.splice(this.fatherFraction.rizars.indexOf(this.cell.unit),1)};
        if (this.fatherFraction.selectUnits.indexOf(this.cell.unit) !== -1) {
          this.fatherFraction.selectUnits.splice(
            this.fatherFraction.selectUnits.indexOf(this.cell.unit),
            1
          );
        }
        //if(this.fatherFraction.control==="comp"&&this.fatherFraction.freeRizzars.indexOf(this.cell.unit)!==-1){this.fatherFraction.freeRizzars.splice(this.fatherFraction.freeRizzars.indexOf(this.cell.unit),1)};
        this.readyToOut = true;

        this.cell.pen.push(this.cell.unit);
        this.cell.free = true;
        this.cell.unit = 0;
      }

      if (this.distroyTimer === 0) {
        this.cell.pen.splice(this.cell.pen.indexOf(arg), 1);
        this.cell = 0;
        this.target = 0;
        this.stepTakt = 0;
      }

      //console.log("pizdez");

      return;
    }

    //console.log(!this.iFight&&!this.isBlocked()&&this.stopGetTarget===true);

    if (this.stepTakt < 1 && this.stepTakt >= 0 && !this.iFight) {
      if (this.target && (this.target.hp <= 0 || !this.target.cell)) {
        this.target = 0;
        //this.iFight=false;
        this.iDoTakt = 0;

        //this.handCell=this.target.cell;
        //this.way="go";
      } else if (
        this.handTarget &&
        (this.handTarget.hp <= 0 || !this.handTarget.cell)
      ) {
        ///*

        if (this.fatherFraction.control === "comp") {
          this.handCell = this.handTarget.cell;
          this.way = "go";

          this.handTarget = 0;
          //this.iFight=false;
          this.iDoTakt = 0;
        } else {
          if (
            this.memHT &&
            this.memHT.persolalNumber === this.handTarget.persolalNumber
          ) {
            this.handTarget = 0;
            this.way = [];
            this.clickSave = false;
            this.iDoTakt = 0;
          } else {
            this.handCell = this.handTarget.cell;
            this.way = "go";

            this.handTarget = 0;
            //this.iFight=false;
            this.iDoTakt = 0;
          }
        }
      }
    }

    //this.memHT=false;

    if (this.fatherFraction.control === "comp") {
      this.dash = 1000;
    } // ii

    //////////////////////////////////////////
    ///////////////////////////////////////////////

    //if(this.fatherFraction.control==="comp"&&this.stepTakt<1&&this.stepTakt>=0&&this.iDoTakt===0){

    // if(this.fatherFraction.freeRizzars.indexOf(this.cell.unit)!==-1){this.fatherFraction.freeRizzars.splice(this.fatherFraction.freeRizzars.indexOf(this.cell.unit),1);};

    //};
    //else if(this.fatherFraction.control==="comp"&&!this.handCell&&!this.handTarget&&this.stepTakt<1&&this.stepTakt>=0&&this.iDoTakt===0){

    // if(this.fatherFraction.freeMechniks.indexOf(this.cell.unit)===-1){this.fatherFraction.freeMechniks.push(this.cell.unit);};

    //};

    let isBlocked = this.isBlocked();

    ///*

    if (this.magickTarget) {
      //pausa=1;

      //if(!this.fatherFraction.attack){console.log(this.magickTarget.timer);pausa=1;};//

      this.magickTarget.timer--;

      this.iFight = true;

      if (this.magickTarget.timer <= 30) {
        if (this.iDoTaktTimer === 100000) {
          this.iDoTaktTimer = 0;
        }

        if (this.iDoTaktTimer % 4 === 0 && this.iDoTakt <= 3) {
          this.iDoTakt++;
        }

        if (this.iDoTakt === 3 && this.magickTarget.target.hp > 0) {
          this.moveVektor = this.getFightVector(this.magickTarget.target);

          if (this.fatherFraction.nation === "orc") {
            this.magickTarget.target.rage = 1500;
          } else {
            this.magickTarget.target.hp = this.magickTarget.target.hpfull;

            this.magickTarget.target.hp_up.push({ timer: 20, animX: 0 });

            this.tyuk_rage = true;
          }

          this.mana = 0;
          if (this.doMagick) {
            this.magick = false;
            this.way = [];
            this.doMagick = false;
            this.handTarget = 0;
          }

          if (!this.magickTarget.target.active) {
            this.fatherFraction.activeUnits.push(this.magickTarget.target);
            this.magickTarget.target.active = true;
          }
          //if(this.fatherFraction.activeUnits.indexOf(this.magickTarget)===-1){
          //	this.fatherFraction.activeUnits.push(this.magickTarget.target);
          //	this.magickTarget.active=true;
          //	}
          //indexOf

          //console.log(this.magickTarget.timer);
          //pausa=1;
        }
        //console.log(this.iDoTakt);//pausa=1;

        this.iDoTaktTimer++;
      } else {
        if (this.magickTarget.timer <= 45) {
          this.iDoTakt = 1;
        }
      }

      if (!this.magickTarget.timer) {
        this.magickTarget = false;
        //this.manaTimer=floorGlobalTimer;
        this.iFight = false;
        this.iDoTakt = 0;
        this.doMagick = false;
        //console.log("l,l,l,l,l,l");
      }

      //console.log(this.magickTarget.timer);
      return;
    }

    //*/

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      this.iDoTakt === 0 &&
      !this.iFight
    ) {
      //isBlocked=this.isBlocked();

      /////////////////////////////////
      /////////////////////////////////

      if (this.doMagick && !this.magickTarget) {
        if (
          !this.doMagick.cell ||
          this.doMagick.hp <= 0 ||
          !this.magick ||
          this.target ||
          (!this.handTarget &&
            get_distanse_on_lineyka(this.cell, 50, this.doMagick.cell, 50) >
              150) ||
          this.hold_position ||
          (this.handTarget &&
            this.handTarget.persolalNumber !== this.doMagick.persolalNumber)
        ) {
          this.doMagick = false;
        }
      }

      ///*

      if (this.mana >= 100) {
        if (
          (this.fatherFraction.control === "comp" && this.animys.length) ||
          this.doMagick
        ) {
          if (this.fatherFraction.nation === "orc") {
            if (this.fatherFraction.control === "comp") {
              for (let i = this.vertikal - 1; i <= this.vertikal + 1; i++) {
                for (let k = this.horizont - 1; k <= this.horizont + 1; k++) {
                  let cell;

                  if (gameFielg[i] && gameFielg[i][k]) {
                    cell = gameFielg[i][k];
                  }

                  if (
                    cell &&
                    cell.unit &&
                    cell.unit.gabarit &&
                    cell.unit.gabarit === 50 &&
                    cell.unit.persolalNumber !== this.persolalNumber &&
                    !cell.unit.neitral &&
                    cell.unit.fatherFraction.fraction ===
                      this.fatherFraction.fraction &&
                    cell.unit.warrior &&
                    cell.unit.unitStatus === "life" &&
                    cell.unit.hp > 0 &&
                    !cell.unit.rage
                  ) {
                    this.magickTarget = {
                      target: gameFielg[i][k].unit,
                      timer: 50,
                    };
                    this.tyuk_rage = true;
                    //this.iDoTakt=0;

                    //console.log(this.magickTarget.target)//
                    //pausa=1;
                    break;
                  }
                }
              }
            } else if (this.doMagick) {
              if (
                get_distanse_on_lineyka(
                  this.cell,
                  50,
                  this.doMagick.cell,
                  50
                ) <= 150
              ) {
                this.magickTarget = { target: this.doMagick, timer: 50 };

                this.tyuk_rage = true;
                //console.log("here");
              }
            }
          } else {
            if (this.fatherFraction.nation === "h") {
              if (this.fatherFraction.control === "comp") {
                for (let i = this.vertikal - 1; i <= this.vertikal + 1; i++) {
                  for (let k = this.horizont - 1; k <= this.horizont + 1; k++) {
                    let cell;

                    if (gameFielg[i] && gameFielg[i][k]) {
                      cell = gameFielg[i][k];
                    }

                    if (
                      cell &&
                      cell.unit &&
                      cell.unit.gabarit &&
                      cell.unit.gabarit === 50 &&
                      cell.unit.persolalNumber !== this.persolalNumber &&
                      !cell.unit.neitral &&
                      cell.unit.fatherFraction.fraction ===
                        this.fatherFraction.fraction &&
                      // &&gameFielg[i][k].unit.warrior
                      cell.unit.unitStatus === "life" &&
                      cell.unit.hp > 0 &&
                      // &&!gameFielg[i][k].unit.rage
                      (cell.unit.hp * 100) / cell.unit.hpfull <= 33
                    ) {
                      this.magickTarget = {
                        target: cell.unit,
                        timer: 50,
                      };
                      //this.iDoTakt=0;

                      //console.log(this.magickTarget.target)//
                      //pausa=1;
                      break;
                    }
                  }
                }
              } else if (this.doMagick) {
                if (
                  get_distanse_on_lineyka(
                    this.cell,
                    50,
                    this.doMagick.cell,
                    50
                  ) <= 150
                ) {
                  this.magickTarget = {
                    target: this.doMagick,
                    timer: 50,
                  };
                }
              }
            }
          }

          if (this.magickTarget) {
            this.x = this.cell.x;
            this.y = this.cell.y;

            this.iStand = true; //?

            this.moveVektor = this.getFightVector(this.magickTarget.target);

            //pausa=1;

            return;
          }
        }
      }

      //this.doMagick=false;

      this.magickTarget = false;

      //ddd

      //*/
      ////////////////////////////////
      /////////////////////////////////

      let hDis2 = false;

      if (this.clickSave.handTarget) {
        let a = this.clickSave.handTarget.x - this.x;
        let b = this.clickSave.handTarget.y - this.y;

        hDis2 = Math.sqrt(a * a + b * b);
      }

      //console.log(isBlocked)

      if (
        this.clickSave &&
        (!isBlocked || (isBlocked && hDis2 && hDis2 < 80))
      ) {
        if (this.clickSave.handCell) {
          this.target = 0;
          this.handTarget = 0;
          this.iDoTakt = 0;
          this.stepTakt = 0;
          this.handCell = this.clickSave.handCell;
          this.way = "go";

          this.stopGetTarget = 50;

          if (this.ii_back) {
            this.stopGetTarget = this.ii_back;
          }

          //if(this.clickSave.wait){this.ii_saveCell=this.cell;};
          //if(this.fatherFraction.control==="comp"){this.stopGetTarget=50;};
        } else if (
          this.clickSave.handTarget &&
          (!this.handTarget ||
            this.clickSave.handTarget.persolalNumber !==
              this.handTarget.persolalNumber)
        ) {
          this.target = 0;
          this.handTarget = this.clickSave.handTarget;
          this.iDoTakt = 0;
          this.stepTakt = 0;
          this.handCell = 0;
          this.stopGetTarget = 50;

          if (this.fatherFraction.control === "player") {
            if (this.magick && this.magick_ok(this.clickSave.handTarget)) {
              //this.magickTarget=this.clickSave.handTarget;

              this.doMagick = this.handTarget;
            }
          }

          //if(this.fatherFraction.control==="comp"){this.stopGetTarget=50;};
          //if(this.clickSave.wait){this.ii_saveCell=this.cell;};
        }

        /*	
	
	if(this.target){
		
		if(this.clickSave.handCell&&!isBlocked){
			
			this.stopGetTarget=50;
			this.target=0;
			this.handCell=this.clickSave.handCell;
			this.way="go";
			
			
			}
			else if(this.clickSave.handTarget){//console.log("ok");
				
			this.stopGetTarget=50;
			this.target=0;
			this.handTarget=this.clickSave.handTarget;
			this.way=[];
			//this.handCell=0;
			this.targetCell=false;
			};
		
	}
else if(this.handTarget){
	
	//if(this.persolalNumber===10532&&this.clickSave&&this.clickSave.handCell){console.log("hm?");};
	
	
if(this.clickSave.handCell&&!isBlocked){
			
			this.stopGetTarget=50;
			this.handTarget=0;
			this.handCell=this.clickSave.handCell;
			this.way="go";
			
			
			}
			else if(this.clickSave.handTarget&&this.clickSave.handTarget.persolalNumber!==this.handTarget.persolalNumber
			){//console.log("ok");
				
			this.stopGetTarget=50;
			//this.handTarget=0;
			this.handTarget=this.clickSave.handTarget;
			this.way=[];
			//this.handCell=0;
			this.targetCell=false;
			};	
	
}
else{
	
	
	

if(this.clickSave.handTarget){
	
this.stopGetTarget=50;
			//this.handTarget=0;
			this.handTarget=this.clickSave.handTarget;
			this.way=[];	
	     this.handCell=0;
		 this.targetCell=false;
		 
}
else if(this.clickSave.handCell){
	
	
	//if(this.persolalNumber===10532){console.log("hm?");};
			
			this.stopGetTarget=50;
			//this.handTarget=0;
			this.handCell=this.clickSave.handCell;
			this.way="go";
			
			
			};
		 
};	
	
	
	
//console.log(this.handTarget.unitName);	
*/
      }

      let del = false;

      if (
        this.fatherFraction.control === "player" &&
        this.clickSave.handTarget
      ) {
        let a = this.handTarget.damagePointX - this.damagePointX;
        let b = this.handTarget.damagePointY - this.damagePointY;

        let c = Math.sqrt(a * a + b * b);

        if (c <= 250) {
          del = true;
        }
      }

      if (this.clickSave && this.clickSave.hold) {
        this.clickSave.hold--;
      }

      if ((this.clickSave && !this.clickSave.hold) || del) {
        this.clickSave = false;
      }

      /////////////////////////////////////////////////
      /////////////////////////////////////////////////

      let hDis = false;

      if (this.handTarget) {
        hDis = this.checkGetHandTarget(true);
      }

      //

      if (
        this.stopGetTarget === 0 &&
        this.stepTakt < 1 &&
        this.stepTakt >= 0 &&
        (!this.target || (this.target && !this.checkGetTarget())) &&
        !hDis //!!!!!!!!!!?????????????
      ) {
        for (let i = 0; i < this.cell.iContaktWith.length; i++) {
          if (
            !this.cell.iContaktWith[i].father.neitral &&
            this.cell.iContaktWith[i].father.fatherFraction.union !==
              this.fatherFraction.union &&
            this.cell.iContaktWith[i].father.warrior &&
            this.cell.iContaktWith[i].father.hp > 0
          ) {
            this.handTarget = 0; //gameFielg[i][k].unit;
            this.handCell = 0;
            this.target = this.cell.iContaktWith[i].father;
            this.way = [];
            this.targetCell = false;
            this.clickSave = false;

            //if(this.fatherFraction.control==="comp"){console.log("act");};
          }
        }
      }
    }

    //
    //if(this.stopGetTarget===50){console.log("vot");};
    if (this.stopGetTarget) {
      this.stopGetTarget--;
    }
    //if(this.iGoBack){this.iGoBack--;};

    //////////////////////////////////////////////////////////////////////////////// new!!!!
    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      !this.iFight //&&!this.iGoBack
    ) {
      for (let i = 0; i < this.animys.length; i++) {
        let u = this.animys[i];

        let c;
        if (u && u.damagePointX) {
          let a = u.damagePointX - this.damagePointX;
          let b = u.damagePointY - this.damagePointY;

          c = Math.sqrt(a * a + b * b);
        }
        /*
if(this.fatherFraction.control==="comp"&&c<=this.dash&&this.animys[i].warrior&&!this.target){
	
	this.handCell=0;
	this.handTarget=0;
	this.way=[];
	//console.log("oklll");
};	
//*/
        if (
          !c ||
          c > this.dash ||
          !u.cell ||
          u.hp <= 0 ||
          !u.cell.continent ||
          u.cell.continent !== this.cell.continent ||
          u.sweeme
        ) {
          this.animys.splice(i, 1);
          i--;
        }
      }
    }
    /////////////////////////////////////////////////////////////////////////////////////

    // ii

    if (
      this.fatherFraction.control === "comp" &&
      this.animys.length &&
      !this.stopGetTarget
    ) {
      this.handCell = 0;
      this.handTarget = 0;
    }

    // ii

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      ((!this.handCell && !this.handTarget) || this.iNeedTarget) &&
      this.stopGetTarget === 0
    ) {
      //if(this.fatherFraction.control==="comp"&&!this.target&&this.animys.length){console.log("kkkkk");	};

      let min = [];

      //if(this.fatherFraction.fraction==="redOrcs"){console.log(this.iFight);};

      let dis;

      if (this.target) {
        let a = this.target.damagePointX - this.damagePointX;
        let b = this.target.damagePointY - this.damagePointY;

        dis = Math.sqrt(a * a + b * b);
      }

      if (
        !this.iFight &&
        (!this.target || (this.target && dis > 120) || !this.target.warrior)
      ) {
        //////////////////////////

        //let min=[];

        let basickMass;

        let life = [];
        let warrior = [];
        let tower = [];
        let els = [];

        for (let i = 0; i < this.animys.length; i++) {
          let u = this.animys[i];

          if (!u.isBlocked(this.cell.unit)) {
            if (u.type === "tower") {
              tower.push(this.animys[i]);
            } else if (u.warrior) {
              warrior.push(u);
            } else if (u.unitStatus === "life") {
              life.push(u);
            } else {
              els.push(u);
            }
          }
        }

        if (tower.length) {
          basickMass = tower;
        } else if (warrior.length) {
          basickMass = warrior;
        } else if (life.length) {
          basickMass = life;
        } else {
          basickMass = els;
        }

        for (let i = 0; i < basickMass.length; i++) {
          let a = basickMass[i].damagePointX - this.damagePointX;
          let b = basickMass[i].damagePointY - this.damagePointY;

          let c = Math.sqrt(a * a + b * b);

          if (
            (!min.length || c < min[0]) &&
            c <= this.dash &&
            basickMass[i].hp > 0 &&
            basickMass[i].cell
          ) {
            min = [c, basickMass[i]];
          }
        }

        /////////////////////////

        /*		
	
for(let i=0;i<this.animys.length;i++){
	
	let a=this.animys[i].damagePointX-this.damagePointX;
	let b=this.animys[i].damagePointY-this.damagePointY;
	
	let c=Math.sqrt(a*a+b*b);
	
	//this.target=this.animys[i];
	
	if((!min.length||c<min[0])&&c<=this.dash&&this.animys[i].hp>0&&this.animys[i].cell&&
	!this.animys[i].isBlocked(this.cell.unit)
	
){
		min=[c,this.animys[i]];
		};
	
	
};

*/

        if (
          (this.target &&
            min.length &&
            this.target.persolalNumber !== min[1].persolalNumber) ||
          !this.target
        ) {
          this.targetCell = false;
        } ///!!!!!!!!!!!!!!!!?????????????????

        if (min.length) {
          if (
            this.fatherFraction.control === "comp" &&
            !this.ii_attack &&
            !this.handCell &&
            !this.handTarget &&
            !this.way.length &&
            !this.ii_saveCell
          ) {
            this.ii_saveCell = this.cell;
            this.comeWithMee(min[1]);
          }

          this.target = min[1];
          this.handCell = 0;
          this.handTarget = 0;
          //this.way=[];
          this.clickSave = false;
        } else {
          this.target = 0;
        }
      }

      //console.log(this.iGetTarget);
      if (this.target) {
        // this.targetCell=this.target.cell.persolalNumber;

        if (!this.target.warrior) {
          for (let i = 0; i < this.cell.iContaktWith.length; i++) {
            if (
              !this.cell.iContaktWith[i].father.neitral &&
              this.cell.iContaktWith[i].father.fatherFraction.union !==
                this.fatherFraction.union &&
              this.cell.iContaktWith[i].father.warrior &&
              this.cell.iContaktWith[i].father.hp > 0
            ) {
              this.handTarget = 0; //gameFielg[i][k].unit;
              this.handCell = 0;
              this.target = this.cell.iContaktWith[i].father;
              this.way = [];
              this.targetCell = false;
              this.clickSave = false;
            }
          }

          //this.target=gameFielg[i][k].unit;
          //this.targetCell=false;/////////////////////////////////////////////////////////??????????????????????????????????
        }

        //let a=this.target.x-this.x;
        //let b=this.target.y-this.y;

        //let c=Math.sqrt(a*a+b*b);

        //if(c<=Math.sqrt(50*50+50*50)){
        if (!this.iFight && this.target.hp > 0 && this.target.cell) {
          this.iGetTarget = this.checkGetTarget();
        }
        //};

        if (this.iGetTarget) {
          ////////////////////////////////////////////////////////////peon

          this.peonGo(this.target);

          ////////////////////////////////////////////////////////////peon

          this.clickSave = false;

          this.moveVektor = this.getFightVector(this.target);

          //console.log(this.moveVektor);

          this.way = [];
          //};

          //if(this.iGetMyCell){
          this.iFight = true;

          //};
        } else if (
          !this.hold_position &&
          !isBlocked &&
          !this.iFight &&
          this.target &&
          !this.target.isBlocked(this.cell.unit) &&
          (this.targetCell !== this.target.cell.persolalNumber ||
            !this.way.length ||
            (this.way.length && !this.way[this.way.length - 1].free))
        ) {
          /*	
let alienWay=[];

if(
this.way.length&&!this.way[this.way.length-1].free
&&this.way[this.way.length-1].unit
&&this.way[this.way.length-1].unit.fatherFraction.union===this.fatherFraction.union
&&this.way[this.way.length-1].unit.way.length>=3
){
	
for(let i=this.way[this.way.length-1].unit.way.length-1;i>0;i--){
	
gameFielg[this.way[this.way.length-1].unit.way[i].vertikal][this.way[this.way.length-1].unit.way[i].horizont].free=false;

alienWay.push(gameFielg[this.way[this.way.length-1].unit.way[i].vertikal][this.way[this.way.length-1].unit.way[i].horizont]);
	
	
if(alienWay.length>=5){break;};	
};	


	
};	
	
*/

          this.targetCell = this.target.cell.persolalNumber;

          let noFree = 1000;

          this.finish = this.target.cell;
          this.sosFin = this.target.cell;
          //getWay(this.cell.unit,noFree,2000);

          /*		
let deep;

if(dis<=150){deep=10;}

	else if(dis<=300){
		deep=20;
		}
else if(dis>300&&deep<500){
	deep=30;
}
else{
	
	deep=50;
	
};		
	deep=1000;	
		
*/
          let deep = 10000;

          getWay(arg, noFree, deep, this.target);

          /*		 
	for(let i=0;i<alienWay.length;i++){
	
	if(!gameFielg[alienWay[i].vertikal][alienWay[i].horizont].unit){
		gameFielg[alienWay[i].vertikal][alienWay[i].horizont].free=true;
	};
	
};	 
	*/
          //console.log("???");
        }

        this.iGetTarget = false;

        if (this.iFight) {
          if (this.iGetMyCell) {
            if (this.iDoTaktTimer === 100000) {
              this.iDoTaktTimer = 0;
            }

            //iStand
            //console.log(this.iDoTakt);

            if (this.iDoTaktTimer % 4 === 0) {
              this.iDoTakt++;
            }

            let strike;

            if (this.fatherFraction.nation === "orc") {
              if (this.iDoTakt === 3) {
                strike = true;
              }
            } else {
              if (this.iDoTakt === 4) {
                strike = true;
              }
            }

            if (strike && !this.bom) {
              //pausa=1;
              let hp;

              let attack = this.attack * rage;
              this.tyuk = true;

              if (
                this.target.unitStatus === "building" &&
                this.target.buildready < this.target.hpfull &&
                this.target.buildready > 0
              ) {
                hp = this.target.buildready;

                this.target.buildready -=
                  attack - (attack * this.target.panzer) / 100;
              } else if (this.target.hp > 0 && this.target.cell) {
                hp = this.target.hp;

                this.target.hp -= attack - (attack * this.target.panzer) / 100;

                //console.log(this.attack-((this.attack*this.target.panzer)/100));
              }
              //indexOf
              if (this.target.unitStatus === "life") {
                ////////////////////
                if (title.style && hp && hp > 0 && this.target.hp <= 0) {
                  this.fatherFraction.kills++;
                }
                ///////////////////////

                if (!this.target.warrior && !this.target.alarmTimer) {
                  this.target.alarmTimer = 500;
                  this.target.agressor = this.cell.unit;
                }

                if (this.target && !this.target.active) {
                  this.target.fatherFraction.activeUnits.push(this.target);
                  this.target.active = true;
                }
              }
              if (this.target.unitStatus === "building") {
                ////////////////////
                if (
                  title.style &&
                  hp &&
                  hp > 0 &&
                  (this.target.hp <= 0 || this.target.buildready <= 0)
                ) {
                  this.fatherFraction.razings++;
                }
                ///////////////////////

                if (!this.target.alarmTimer) {
                  this.target.alarmTimer = 500;
                  this.target.agressor = this.cell.unit;
                }

                if (
                  this.target &&
                  this.target.fatherFraction.activeBuildings.indexOf(
                    this.target
                  ) === -1
                ) {
                  this.target.fatherFraction.activeBuildings.push(this.target);
                }
              }

              this.bom = true;
              //pausa=1;
            }

            if (this.iDoTakt === 5) {
              this.iFight = false;
              this.animTimer = 100;
              this.bom = false;
              //this.cellUpdate();

              this.iDoTakt = 0;

              //pausa=1
            }
            this.iDoTaktTimer++;

            return;
          }
        }
      }
    } else if (this.handTarget && this.stepTakt < 1 && this.stepTakt >= 0) {
      //this.target=0;

      //console.log("hand");

      //this.target=this.handTarget;

      //	if(this.persolalNumber===1433&&this.handTarget.unitStatus==="building"){
      //	console.log(this.handTarget.buildready);
      //	}

      /*	
if((this.handTarget.hp<=0||!this.handTarget.cell||this.handTarget.buildready<=0||
!this.handTarget)&&!this.iFight
){this.handTarget=0;this.way=[];this.clickSave=false;};	
*/

      ///*
      //console.log(this.handTarget.unitName);

      if (!this.iFight && this.handTarget) {
        this.iGetTarget = this.checkGetHandTarget();
      }
      //};

      //if(this.handTarget.unitName==="townHoll"){
      //pausa=1;

      //console.log(this.iGetTarget);
      //};
      //*/

      if (this.iGetTarget) {
        this.memHT = this.handTarget;

        ////////////////////////////////////////////////////////////peon

        this.peonGo(this.handTarget);

        ////////////////////////////////////////////////////////////peon

        this.clickSave = false;

        this.moveVektor = this.getFightVector(this.handTarget);

        //console.log(this.moveVektor);

        //this.stopGetTarget=0;

        if (
          this.handTarget.neitral ||
          this.handTarget.fatherFraction.union === this.fatherFraction.union
        ) {
          this.handTarget = 0;
          this.way = [];
          this.clickSave = false;
          //console.log("ok");
        } else {
          //if(!this.iFight){
          this.way = [];
          //};

          //if(this.iGetMyCell){
          this.iFight = true;
          //this.stopGetTarget=2;
          //};
          this.clickSave = false;
        }
      }

      ///*
      else if (
        !this.iFight &&
        this.handTarget &&
        (this.targetCell !== this.handTarget.cell.persolalNumber ||
          (this.way.length && !this.way[this.way.length - 1].free) ||
          !this.way.length)
      ) {
        // console.log("ok");
        /*
let alienWay=[];

if(
this.way.length&&!this.way[this.way.length-1].free
&&this.way[this.way.length-1].unit
&&this.way[this.way.length-1].unit.fatherFraction.union===this.fatherFraction.union
&&this.way[this.way.length-1].unit.way.length>=3
){
	
for(let i=this.way[this.way.length-1].unit.way.length-1;i>0;i--){
	
gameFielg[this.way[this.way.length-1].unit.way[i].vertikal][this.way[this.way.length-1].unit.way[i].horizont].free=false;

alienWay.push(gameFielg[this.way[this.way.length-1].unit.way[i].vertikal][this.way[this.way.length-1].unit.way[i].horizont]);
	
	
if(alienWay.length>=5){break;};	
};	


	
};

*/

        this.targetCell = this.handTarget.cell.persolalNumber;

        noFree = 1000;

        //if(this.fatherFraction.control==="comp"){noFree=6000;};

        //let optimalContaktCell=this.getOptimalContaktCell();

        //console.log(this.target);
        this.finish = this.handTarget.cell; //this.target.cell;
        this.sosFin = this.handTarget.cell; //this.target.cell;

        this.iCanGet = false;
        //deep

        getWay(arg, noFree, glob_deep, this.handTarget);

        //console.log("way")

        /*
for(let i=0;i<alienWay.length;i++){
	
	if(!gameFielg[alienWay[i].vertikal][alienWay[i].horizont].unit){
		gameFielg[alienWay[i].vertikal][alienWay[i].horizont].free=true;
	};
	
};
*/

        ///*

        /*	
for(let i=0;i<this.handTarget.contaktCells.length;i++){
	
	if(this.way.length&&this.way[0].horizont===this.handTarget.contaktCells[i].horizont&&
	this.way[0].vertikal===this.handTarget.contaktCells[i].vertikal
	){
		
	iCanGet=true;	
	break;	
	};
	
};
*/
        //console.log(this.handTarget)
        //console.log(this.way.length)

        if (!this.iCanGet) {
          if (this.fatherFraction.control === "player") {
            if (!this.way.length) {
              this.handCell = this.handTarget.cell;

              this.clickSave = false;
              this.handTarget = 0;
              //this.target=0;
              this.targetCell = false;
            } else {
              this.handCell = this.way[0];
              this.handTarget = 0;
              //this.target=0;
              this.targetCell = false;

              if (this.way.length > 1) {
                this.clickSave = false;
              }
            }
          }

          //console.log("neeee");
        } else {
          this.iGetTarget = this.checkGetHandTarget();

          if (this.iGetTarget) {
            if (
              this.handTarget.neitral ||
              this.handTarget.fatherFraction.union === this.fatherFraction.union
            ) {
              this.handTarget = 0;
              this.way = [];
              this.clickSave = false;
              //console.log("ok");
            } else {
              this.way = [];
              this.iFight = true;
              this.iGetTarget = false;
              this.clickSave = false;
              //this.stopGetTarget=2;
            }
          }
        }

        //*/

        //console.log("ok");
        /*	 
		 			let noFree=[];


for(let l=this.vertikal-7;l<this.vertikal+7;l++){
	
	for(let m=this.horizont-7;m<this.horizont+7;m++){
	
if(gameFielg[l]&&gameFielg[l][m]&&!gameFielg[l][m].free){	
		noFree.push(gameFielg[l][m]);
};
		
	};
	
};
	
	
	this.finish=this.handTarget.cell;
		getWay(this.cell.unit,noFree,2000);
		 
		 
		 
		 
	*/
      }

      //	*/
    }

    //if(this.fatherFraction.fraction==="blackOrcs"&&this.target){console.log("okokok");};

    this.iGetTarget = 0;

    if (this.iFight) {
      if (this.iGetMyCell) {
        if (this.iDoTaktTimer === 100000) {
          this.iDoTaktTimer = 0;
        }

        //iStand
        //console.log(this.iDoTakt);

        if (this.iDoTaktTimer % 4 === 0) {
          this.iDoTakt++;
        }

        let strike;

        if (this.fatherFraction.nation === "orc") {
          if (this.iDoTakt === 3) {
            strike = true;
          }
        } else {
          if (this.iDoTakt === 4) {
            strike = true;
          }
        }

        if (strike && !this.bom) {
          let hp;

          let attack = this.attack * rage;
          this.tyuk = true;

          if (
            this.handTarget.unitStatus === "building" &&
            this.handTarget.buildready < this.handTarget.hpfull &&
            this.handTarget.buildready > 0
          ) {
            hp = this.handTarget.buildready;

            this.handTarget.buildready -=
              attack - (attack * this.handTarget.panzer) / 100;
          } else if (this.handTarget.hp > 0 && this.handTarget.cell) {
            hp = this.handTarget.hp;

            this.handTarget.hp -=
              attack - (attack * this.handTarget.panzer) / 100;
          }
          //indexOf
          if (this.handTarget.unitStatus === "life") {
            ////////////////////
            if (title.style && hp && hp > 0 && this.handTarget.hp <= 0) {
              this.fatherFraction.kills++;
            }
            ///////////////////////

            if (!this.handTarget.warrior && !this.handTarget.alarmTimer) {
              this.handTarget.alarmTimer = 500;
              this.handTarget.agressor = this.cell.unit;
            }

            if (this.handTarget && !this.handTarget.active) {
              this.handTarget.fatherFraction.activeUnits.push(this.handTarget);
              this.handTarget.active = true;
            }
          }
          if (
            this.handTarget.unitStatus === "building" &&
            !this.handTarget.neitral
          ) {
            ////////////////////
            if (
              title.style &&
              hp &&
              hp > 0 &&
              (this.handTarget.hp <= 0 || this.handTarget.buildready <= 0)
            ) {
              this.fatherFraction.razings++;
            }
            ///////////////////////

            if (!this.handTarget.alarmTimer) {
              this.handTarget.alarmTimer = 500;
              this.handTarget.agressor = this.cell.unit;
            }

            if (
              this.handTarget &&
              this.handTarget.fatherFraction.activeBuildings.indexOf(
                this.handTarget
              ) === -1
            ) {
              this.handTarget.fatherFraction.activeBuildings.push(
                this.handTarget
              );
            }
          }
          this.bom = true;
        }

        if (this.iDoTakt === 5) {
          this.iFight = false;
          this.animTimer = 100;
          this.bom = false;
          //this.cellUpdate();

          this.iDoTakt = 0;
        }
        this.iDoTaktTimer++;

        return;
      }
    }

    ///*

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      this.fatherFraction.control === "comp" &&
      !this.iFight &&
      !this.target &&
      //this.readyToOut&&
      this.ii_saveCell &&
      !this.handTarget &&
      !this.way.length &&
      !this.handCell
    ) {
      let a = this.ii_saveCell.x - this.cell.x;
      let b = this.ii_saveCell.y - this.cell.y;

      let c = Math.sqrt(a * a + b * b);

      if (c > 50) {
        this.clickSave = new ClickSave(0, this.ii_saveCell);

        //console.log(this.persolalNumber);
      }

      if (c <= 250) {
        this.ii_saveCell = 0;
      }

      //console.log(this.persolalNumber);
    }

    this.iNeedTarget = false;

    //*/
  } else if (this.type === "ballista") {
    //ii_attack

    ///////////////////////////////////////////////////////////////////////////////////////////
    //this.attack=this.baseAttack*this.fatherFraction.dopBallista;

    //this.level=1+(this.fatherFraction.dopBallista_level);
    ///////////////////////////////////////////////////////////////////////////////////////////

    if (this.iDoTakt !== 4) {
      this.axe = false;
    }

    if (this.hp <= 0) {
      this.hp = 0;
      this.target = "dead";
    }
    //this.target="dead";
    //iStand
    if (this.target === "dead") {
      this.iDoTaktTimer = -1;
      this.iDoTakt = 0;
      //this.myJoube=0;
      this.iFight = false;
      this.way = [];
      this.speed = 0;
      this.updateSpeed();
      this.target = 0;
      this.handTarget = 0;
      this.animys = [];

      this.distroyTimer--;

      if (this.distroyTimer === 492) {
        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );
        }

        //if(this.fatherFraction.peoples.indexOf(this.cell.unit)!==-1){this.fatherFraction.peoples.splice(this.fatherFraction.peoples.indexOf(this.cell.unit),1)};
        //if(this.fatherFraction.ballistas.indexOf(this.cell.unit)!==-1){this.fatherFraction.ballistas.splice(this.fatherFraction.ballistas.indexOf(this.cell.unit),1)};
        if (this.fatherFraction.selectUnits.indexOf(this.cell.unit) !== -1) {
          this.fatherFraction.selectUnits.splice(
            this.fatherFraction.selectUnits.indexOf(this.cell.unit),
            1
          );
        }
        //if(this.fatherFraction.control==="comp"&&this.fatherFraction.freeBallistas.indexOf(this.cell.unit)!==-1){this.fatherFraction.freeBallistas.splice(this.fatherFraction.freeBallistas.indexOf(this.cell.unit),1)};
        this.readyToOut = true;

        this.cell.pen.push(this.cell.unit);
        this.cell.free = true;
        this.cell.unit = 0;
      }

      if (this.distroyTimer === 0) {
        this.cell.pen.splice(this.cell.pen.indexOf(arg), 1);
        this.cell = 0;
        this.target = 0;
        this.stepTakt = 0;
      }

      //console.log("pizdez");

      return;
    }

    if (this.fatherFraction.control === "comp") {
      this.dash = 1000;
    } // ii

    /*
for(let i=0;i<this.animys.length;i++){

if(this.animys[i].type===1){console.log("east");};	
	
};
*/

    if (this.stopTroll) {
      this.stopTroll--;
      this.iFight = false;
      return;
    }

    if (!this.stopTakt && !this.iDoTakt) {
      this.animY = 0;
    }

    //////////////////////////////////////////
    ///////////////////////////////////////////////

    /*
else if(this.fatherFraction.control==="comp"&&!this.handCell&&!this.handTarget&&this.stepTakt<1&&this.stepTakt>=0&&this.iDoTakt===0){
	
  if(this.fatherFraction.freeLuchniks.indexOf(this.cell.unit)===-1){this.fatherFraction.freeLuchniks.push(this.cell.unit);};	
	
};
*/
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    let isBlocked = false;

    if (this.stepTakt < 1 && this.stepTakt >= 0 && !this.iFight) {
      if (
        this.target &&
        (this.target.hp <= 0 ||
          !this.target.cell ||
          this.target.buildready <= 0 ||
          !this.target.visible)
      ) {
        this.target = 0;
        this.iFight = false;
        this.iDoTakt = 0;
        this.way = [];
      } else if (
        this.handTarget &&
        (this.handTarget.hp <= 0 ||
          !this.handTarget.cell ||
          this.handTarget.buildready <= 0 ||
          !this.handTarget.visible)
      ) {
        if (this.handTarget.visible) {
          this.handCell = this.handTarget.cell;
        }

        this.handTarget = 0;
        this.iFight = false;
        this.iDoTakt = 0;
        //this.way=[];
      }

      isBlocked = this.isBlocked();

      //console.log(isBlocked);

      ///*
      let hDis2 = false;

      if (this.clickSave.handTarget && isBlocked) {
        if (
          !this.clickSave.handTarget.neitral &&
          this.clickSave.handTarget.fatherFraction.union !==
            this.fatherFraction.union
        ) {
          let a = this.clickSave.handTarget.damagePointX - this.damagePointX;
          let b = this.clickSave.handTarget.damagePointY - this.damagePointY;

          hDis2 = Math.sqrt(a * a + b * b);
        }
      }
      //*/

      if (
        this.clickSave &&
        (!isBlocked || (isBlocked && hDis2 && hDis2 <= this.seeing))
      ) {
        if (this.clickSave.handCell && !isBlocked) {
          this.handTarget = 0;
          this.target = 0;
          this.handCell = this.clickSave.handCell;
          this.way = "go";
          this.stopGetTarget = 50;

          if (this.ii_back) {
            this.stopGetTarget = this.ii_back;
          }

          //if(this.clickSave.wait){this.ii_saveCell=this.cell;};
        } else if (
          this.clickSave.handTarget &&
          (!this.handTarget ||
            this.clickSave.handTarget.persolalNumber !==
              this.handTarget.persolalNumber)
        ) {
          if (
            (this.clickSave.handTarget.cell.continent &&
              this.clickSave.handTarget.cell.continent ===
                this.cell.continent) ||
            (!this.clickSave.handTarget.neitral &&
              this.clickSave.handTarget.fatherFraction.union !==
                this.fatherFraction.union &&
              checkAliens(this.cell.unit, this.clickSave.handTarget) &&
              this.clickSave.handTarget.visible)
          ) {
            this.handTarget = this.clickSave.handTarget;
            this.target = 0;
            this.handCell = 0;
            this.stopGetTarget = 50;
            this.way = [];
            this.targetCell = false;

            //if(this.clickSave.wait){this.ii_saveCell=this.cell;};

            //console.log("ok");
          }

          //console.log("ok");
        }

        /*	
	if(this.target){
		
		if(this.clickSave.handCell&&!isBlocked){
			
			this.stopGetTarget=50;
			this.target=0;
			this.handCell=this.clickSave.handCell;
			this.way="go";
			
			console.log("i gooooo");
			
			}
			else if(this.clickSave.handTarget){//console.log("ok");
				
			this.stopGetTarget=50;
			this.target=0;
			this.handTarget=this.clickSave.handTarget;
			this.way=[];
			//this.handCell=0;
			this.targetCell=false;
			};
		
	}
else if(this.handTarget){
	
	
if(this.clickSave.handCell&&!isBlocked){
			
			this.stopGetTarget=50;
			this.handTarget=0;
			this.handCell=this.clickSave.handCell;
			this.way="go";
			
			
			}
			else if(this.clickSave.handTarget&&this.clickSave.handTarget.persolalNumber!==this.handTarget.persolalNumber
			){//console.log("ok");
				
			this.stopGetTarget=50;
			//this.handTarget=0;
			this.handTarget=this.clickSave.handTarget;
			this.way=[];
			//this.handCell=0;
			this.targetCell=false;
			};	
	
}
else{
	
//this.stopGetTarget=50;
			//this.handTarget=0;
			this.handTarget=this.clickSave.handTarget;
			this.way=[];	
	     this.handCell=0;
		 this.targetCell=false;
};	
	
	
	
//console.log(this.handTarget.unitName);	
*/
      }

      let del = false;
      ///*
      if (
        this.fatherFraction.control === "player" &&
        this.clickSave.handTarget
      ) {
        let a = this.handTarget.damagePointX - this.damagePointX;
        let b = this.handTarget.damagePointY - this.damagePointY;

        let c = Math.sqrt(a * a + b * b);

        if (c <= 250) {
          del = true;
        }
      }
      //*/

      if (this.clickSave && this.clickSave.hold) {
        this.clickSave.hold--;
      }

      if ((this.clickSave && !this.clickSave.hold) || del) {
        this.clickSave = false;
      }

      /////////////////////////////////////////////////
      /////////////////////////////////////////////////
    }

    //

    //if(this.handTarget){console.log("ok");};

    if (this.stopGetTarget) {
      this.stopGetTarget--;
    }

    /////////////////////////////////////////////////// new!!!

    let warrior = false;

    if (this.stepTakt < 1 && this.stepTakt >= 0 && !this.iFight) {
      /*
let thc;

if(this.handTarget){
	
    let hta=this.handTarget.damagePointX-this.damagePointX;
	let htb=this.handTarget.damagePointY-this.damagePointY;	

thc=Math.sqrt(hta*hta+htb*htb);

};
*/

      for (let i = 0; i < this.animys.length; i++) {
        let c;

        if (this.animys[i] && this.animys[i].damagePointX) {
          let a = this.animys[i].damagePointX - this.damagePointX;
          let b = this.animys[i].damagePointY - this.damagePointY;

          c = Math.sqrt(a * a + b * b);
        }
        /*
if(
//(this.fatherFraction.control==="comp"&&c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&(this.handCell||this.handTarget))||(c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&this.handCell)
this.fatherFraction.control==="player"&&
(
(this.handCell&&c<=this.seeing&&this.animys[i].warrior&&this.animys[i].hp>0)
||
(thc&&thc>this.seeing&&c<=this.seeing&&this.animys[i].warrior&&this.animys[i].hp>0)
)

){
	
	//let oh=(c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&this.handCell);
	
	//console.log("ok");
	warrior=true;
	this.handTarget=0;
	this.handCell=0;
	this.way=[];
	
	
	
	};	
*/
        if (
          c &&
          this.target &&
          this.animys[i].persolalNumber === this.target.persolalNumber &&
          c > this.dash
        ) {
          this.target = 0;
          this.way = [];
        }

        /*
	if(this.animys[i].type===1){
		console.log("delete");
	console.log("dash : "+this.dash);
	console.log("c : "+c);
	pausa=1;
	};
	*/
        if (
          !c ||
          !this.animys[i] ||
          c > this.dash ||
          !this.animys[i].cell ||
          this.animys[i].hp <= 0 ||
          !this.animys[i].visible ||
          ((!this.animys[i].cell.continent ||
            (this.animys[i].cell.continent &&
              this.animys[i].cell.continent !== this.cell.continent)) &&
            !checkAliens(this.cell.unit, this.animys[i]))
        ) {
          //if(this.fatherFraction.selectUnits.indexOf(this.cell.unit)!==-1&&c>this.dash){console.log("c : "+c);};

          this.animys.splice(i, 1);
          i--;
        }
      }
    }

    // ii
    ///*

    //let stopBack=false;

    if (
      this.fatherFraction.control === "comp" &&
      this.animys.length &&
      !this.ii_back
    ) {
      this.handCell = 0;
      this.handTarget = 0;
      //stopBack=true;
    }
    //*/

    // ii

    ///////////////////////////////////////////////////////

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      ((!this.handCell && !this.handTarget) || this.iNeedTarget) &&
      //||(this.fatherFraction.control==="comp"&&(this.handCell||this.handTarget)&&!this.iFight)

      this.stopGetTarget === 0
    ) {
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      //this.stepTakt<1&&this.stepTakt>=0&&!this.handCell&&!this.handTarget&&this.stopGetTarget===0

      if (!this.iFight) {
        /////////////////////////

        let min = [];

        let basickMass;

        let life = [];
        let warrior = [];
        let tower = [];
        let els = [];

        for (let i = 0; i < this.animys.length; i++) {
          if (this.animys[i].type === "tower") {
            tower.push(this.animys[i]);
          } else if (this.animys[i].warrior) {
            warrior.push(this.animys[i]);
          } else if (this.animys[i].unitStatus === "life") {
            life.push(this.animys[i]);
          } else {
            els.push(this.animys[i]);
          }
        }

        if (tower.length) {
          basickMass = tower;
        } else if (warrior.length) {
          basickMass = warrior;
        } else if (life.length) {
          basickMass = life;
        } else {
          basickMass = els;
        }

        for (let i = 0; i < basickMass.length; i++) {
          let a = basickMass[i].damagePointX - this.damagePointX;
          let b = basickMass[i].damagePointY - this.damagePointY;

          let c = Math.sqrt(a * a + b * b);

          if (
            (!min.length || c < min[0]) &&
            c <= this.dash &&
            basickMass[i].hp > 0 &&
            basickMass[i].cell
          ) {
            min = [c, basickMass[i]];
          }
        }

        /*	
	
for(let i=0;i<this.animys.length;i++){
	
	let a=this.animys[i].damagePointX-this.damagePointX;
	let b=this.animys[i].damagePointY-this.damagePointY;
	
	let c=Math.sqrt(a*a+b*b);
	
	//this.target=this.animys[i];
	///*
	if((!min.length||c<min[0])&&
	((c<=this.dash&&this.animys[i].hp>0&&this.animys[i].cell&&!warrior)||(warrior&&c<=this.dash&&this.animys[i].hp>0&&this.animys[i].warrior))
	
	//&&!this.animys[i].isBlocked(this.cell.unit)
	
){
		min=[c,this.animys[i]];
		};
	

	
};


*/

        if (
          (this.target &&
            min.length &&
            this.target.persolalNumber !== min[1].persolalNumber) ||
          !this.target
        ) {
          this.targetCell = false;
        } ///!!!!!!!!!!!!!!!!?????????????????

        if (min.length) {
          if (
            this.fatherFraction.control === "comp" &&
            !this.ii_attack &&
            !this.handCell &&
            !this.handTarget &&
            !this.way.length &&
            !this.target
          ) {
            //this.ii_saveCell=this.cell;
            this.comeWithMee(min[1]);
          }

          this.target = min[1];
          this.handCell = 0;
          this.handTarget = 0;
          //this.way=[];
          this.clickSave = false;
        } else {
          this.target = 0;
        }
      } else if (this.iFight) {
        if (this.iGetMyCell && !this.stopTroll) {
          if (this.iDoTaktTimer === 100000) {
            this.iDoTaktTimer = 0;
          }

          //iStand
          //console.log(this.iDoTakt);

          if (this.iDoTaktTimer % 4 === 0) {
            this.iDoTakt++;
          }

          if (this.iDoTakt === 4) {
            //pausa=1;
            //console.log("fffff");
            //x,y,type,target,power

            if (!this.axe) {
              this.tyuk = true;

              if (this.fatherFraction.nation === "orc") {
                this.axeInitialization(
                  this.target,
                  "orc_ballista",
                  this.cell.unit
                );
              } else {
                this.axeInitialization(this.target, "ballista", this.cell.unit);
              }

              this.axe = true;

              if (
                this.target.unitStatus === "life" &&
                !this.target.warrior &&
                !this.target.alarmTimer
              ) {
                this.target.alarmTimer = 500;
                this.target.agressor = this.cell.unit;
              }
            }
          }

          if (this.iDoTakt === 5) {
            this.axe = false;
            //this.iFight=false;
            this.animTimer = 100;
            this.stopTroll = this.holdTroll;
            //this.cellUpdate();

            this.iDoTakt = 0;

            //if(this.target.unitStatus==="building"&&this.target.buildready<this.target.hpfull&&this.target.buildready>0){
            //this.target.buildready-=15;
            //}

            //else  if(this.target.hp>0&&this.target.cell){
            //this.target.hp-=15;

            ///			};

            //if(this.target.unitStatus==="life"){	if(this.target&&this.target.fatherFraction.activeUnits.indexOf(this.target)===-1){this.target.fatherFraction.activeUnits.push(this.target);};};
            //if(this.target.unitStatus==="building"){	if(this.target&&this.target.fatherFraction.activeBuildings.indexOf(this.target)===-1){this.target.fatherFraction.activeBuildings.push(this.target);};};
          }
          this.iDoTaktTimer++;

          return;
        }
      }

      if (
        !this.iFight &&
        this.target &&
        this.target.hp > 0 &&
        this.target.cell
      ) {
        this.iGetTarget = this.checkGetTarget();
      }

      //console.log(this.iGetTarget);

      if (this.iGetTarget) {
        this.peonGo(this.target);

        this.iFight = true;
        this.iGetTarget = false;

        this.moveVektor = this.getFightVector(this.target);
        this.getFirePoint();
        //console.log(this.moveVektor);
        this.way = [];
        this.clickSave = false;
      } else {
        //console.log(isBlocked);

        if (
          !this.hold_position &&
          !isBlocked &&
          !this.iFight &&
          this.target &&
          (this.targetCell !== this.target.cell.persolalNumber ||
            !this.way.length ||
            (this.way.length && !this.way[this.way.length - 1].free))
        ) {
          this.targetCell = this.target.cell.persolalNumber;

          let noFree = 1000;

          this.finish = this.target.cell;
          this.sosFin = this.target.cell;
          //getWay(this.cell.unit,noFree,2000);

          /*	
	
	 let dis;
 
if(this.target){	
	let a=this.target.damagePointX-this.damagePointX;
	let b=this.target.damagePointY-this.damagePointY;
	
	dis=Math.sqrt(a*a+b*b);
};


	
		
let deep;

	if(dis<=300){
		deep=400;
		}
else if(dis>300&&deep<500){
	deep=600;
}
else{
	
	deep=1000;
	
};		
*/

          let deep = 10000;
          //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //dlya luchnik
          /*
let luchnik=undefined;


if(this.target.unitStatus==="life"){luchnik=1;};
*/

          let luchnik = undefined;

          if (!this.target.myCells || !this.target.myCells.length) {
            luchnik = 1;
          } else if (this.target.myCells && this.target.myCells.length) {
            luchnik = 3;
            //console.log(this.handTarget);
          }

          //console.log(luchnik);

          ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          //if(this.target.sweeme){deep=1000;};

          getWay(arg, noFree, deep, this.target, luchnik);
        }
      }
    } else if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      !this.handCell &&
      !this.target &&
      this.handTarget
    ) {
      // console.log(this.handTarget);

      if (!this.iFight && this.handTarget.hp > 0 && this.handTarget.cell) {
        this.iGetTarget = this.checkGetHandTarget();

        //console.log("ok");
      }

      if (this.iGetTarget) {
        //console.log(this.iGetTarget)

        if (
          !this.handTarget.neitral &&
          this.handTarget.fatherFraction.union !== this.fatherFraction.union
        ) {
          this.peonGo(this.handTarget);

          this.iFight = true;
          this.clickSave = false;

          this.iGetTarget = false;

          this.moveVektor = this.getFightVector(this.handTarget);

          this.getFirePoint();
          //console.log(this.firePoint);
          this.way = [];
        } else {
          this.handTarget = 0;
          this.way = [];
          this.handCell = 0;
        }

        this.clickSave = false;
      } else {
        //console.log(this.handTarget);

        if (
          (!this.way.length || !this.way[this.way.length - 1].free) &&
          !this.iFight
        ) {
          let luchnik = undefined;

          if (
            (!this.handTarget.myCells || !this.handTarget.myCells.length) &&
            !this.handTarget.neitral &&
            this.handTarget.fatherFraction.union !== this.fatherFraction.union
          ) {
            luchnik = 1;
          } else if (
            (!this.handTarget.myCells || !this.handTarget.myCells.length) &&
            (this.handTarget.neitral ||
              this.handTarget.fatherFraction.union ===
                this.fatherFraction.union)
          ) {
            luchnik = 2;
            //console.log(this.handTarget);
          } else if (
            this.handTarget.myCells &&
            this.handTarget.myCells.length &&
            (this.handTarget.neitral ||
              this.handTarget.fatherFraction.union ===
                this.fatherFraction.union)
          ) {
            luchnik = undefined;
            //console.log(this.handTarget);
          } else if (
            this.handTarget.myCells &&
            this.handTarget.myCells.length &&
            !this.handTarget.neitral &&
            this.handTarget.fatherFraction.union !== this.fatherFraction.union
          ) {
            luchnik = 3;
            //console.log(this.handTarget);
          }

          //console.log(luchnik);

          ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          this.finish = this.handTarget.cell;
          this.sosFin = this.handTarget.cell;

          /*		
		let a=this.handTarget.damagePointX-this.damagePointX;
		let b=this.handTarget.damagePointY-this.damagePointY;
		
		let c=Math.sqrt(a*a+b*b);
		
		
	let deep=2000;

///*
 if(c<500){
	 deep=500;
	 }
else if(c<=1000){
	deep=1000;
}
//*/

          let deep = 10000;
          //console.log(deep);

          getWay(arg, 350, glob_deep, this.handTarget, luchnik);

          let iCanGet = this.iCanGet;
          this.iCanGet = false;

          //console.log(iCanGet);

          if (
            !iCanGet ||
            ((!luchnik || luchnik === 2) && this.handTarget.isBlocked())
          ) {
            //console.log("nenenene");

            if (this.way.length) {
              this.handCell = this.way[0]; //console.log("go")

              if (this.way.length > 3) {
                this.clickSave = false;
              }
            } else {
              this.handCell = this.handTarget.cell;

              this.clickSave = false;
            }

            this.handTarget = 0;
            //console.log("oh");
            //console.log(iCanGet);
          }
        }
      }

      //console.log(this.iFight);

      if (this.iFight) {
        if (
          this.handTarget.neitral ||
          this.handTarget.fatherFraction.union === this.fatherFraction.union
        ) {
          this.handTarget = 0;
          this.iFight = false;
        }

        if (this.iGetMyCell && !this.stopTroll) {
          if (this.iDoTaktTimer === 100000) {
            this.iDoTaktTimer = 0;
          }

          //iStand
          //console.log(this.iDoTakt);

          if (this.iDoTaktTimer % 4 === 0) {
            this.iDoTakt++;
          }

          if (this.iDoTakt === 4) {
            //pausa=1;

            //x,y,type,target,power

            if (!this.axe) {
              this.tyuk = true;

              if (this.fatherFraction.nation === "orc") {
                this.axeInitialization(
                  this.handTarget,
                  "orc_ballista",
                  this.cell.unit
                );
              } else {
                this.axeInitialization(
                  this.handTarget,
                  "ballista",
                  this.cell.unit
                );
              }

              //this.axeInitialization(this.handTarget,"orc_ballista",this.cell.unit);
              //let axe=new Axes(this.firePointX,this.firePointY,"cannon_tower",undefined,this.attack,this.cell.unit,conor,xy);
              this.axe = true;

              if (
                !this.handTarget.warrior &&
                this.handTarget.unitStatus === "life" &&
                !this.handTarget.alarmTimer
              ) {
                this.handTarget.alarmTimer = 500;
                this.handTarget.agressor = this.cell.unit;
              }
            }
          }

          if (this.iDoTakt === 5) {
            this.axe = false;
            //this.iFight=false;
            this.animTimer = 100;
            this.stopTroll = this.holdTroll;
            //this.cellUpdate();

            this.iDoTakt = 0;

            //	if(this.handTarget.unitStatus==="building"&&this.handTarget.buildready<this.handTarget.hpfull&&this.handTarget.buildready>0){
            //this.handTarget.buildready-=15;
            //	}

            //else  if(this.handTarget.hp>0&&this.handTarget.cell){
            //this.handTarget.hp-=15;

            //			};

            //if(this.handTarget.unitStatus==="life"){	if(this.handTarget&&this.handTarget.fatherFraction.activeUnits.indexOf(this.handTarget)===-1){this.handTarget.fatherFraction.activeUnits.push(this.handTarget);};};
            //if(this.handTarget.unitStatus==="building"){	if(this.handTarget&&this.handTarget.fatherFraction.activeBuildings.indexOf(this.handTarget)===-1){this.handTarget.fatherFraction.activeBuildings.push(this.handTarget);};};
          }
          this.iDoTaktTimer++;

          return;
        }
      }

      if (
        isBlocked &&
        this.stepTakt < 1 &&
        this.stepTakt >= 0 &&
        !this.iFight &&
        this.handTarget
      ) {
        this.handTarget = 0;
        this.way = [];
        this.handCell = 0;
      } //////new!!!!?????
    }

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      this.fatherFraction.control === "comp" &&
      !this.iFight &&
      !this.target &&
      //this.readyToOut&&
      this.ii_saveCell &&
      !this.handTarget &&
      !this.way.length &&
      !this.handCell
    ) {
      let a = this.ii_saveCell.x - this.cell.x;
      let b = this.ii_saveCell.y - this.cell.y;

      let c = Math.sqrt(a * a + b * b);

      if (c > 0) {
        this.clickSave = new ClickSave(0, this.ii_saveCell);

        //console.log(this.persolalNumber);
      }

      if (c <= 250) {
        this.ii_saveCell = 0;
      }

      //console.log(this.persolalNumber);
    }

    this.iNeedTarget = false;
  } else if (this.type === 3) {
    //luchnik checkAliens

    ///////////////////////////////////////////////////////////////////////////////////////////
    //this.attack=this.baseAttack*this.fatherFraction.dopFlyAttack;
    //this.seeing=this.baseSeeing+this.fatherFraction.dopFlySee;

    //this.level=1+(this.fatherFraction.dopFlyAttack_level)+
    //(this.fatherFraction.dopFlySee_level);
    ///////////////////////////////////////////////////////////////////////////////////////////

    if (this.iDoTakt !== 4) {
      this.axe = false;
    }

    if (this.hp <= 0) {
      this.hp = 0;
      this.target = "dead";
    }
    //this.target="dead";
    //iStand
    if (this.target === "dead") {
      this.iDoTaktTimer = -1;
      this.iDoTakt = 0;
      //this.myJoube=0;
      this.iFight = false;
      this.way = [];
      this.speed = 0;
      this.updateSpeed();
      this.target = 0;
      this.handTarget = 0;
      this.animys = [];

      this.distroyTimer--;

      if (this.distroyTimer === 492) {
        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );
        }

        //if(this.fatherFraction.peoples.indexOf(this.cell.unit)!==-1){this.fatherFraction.peoples.splice(this.fatherFraction.peoples.indexOf(this.cell.unit),1)};
        //if(this.fatherFraction.luchniks.indexOf(this.cell.unit)!==-1){this.fatherFraction.luchniks.splice(this.fatherFraction.luchniks.indexOf(this.cell.unit),1)};
        if (this.fatherFraction.selectUnits.indexOf(this.cell.unit) !== -1) {
          this.fatherFraction.selectUnits.splice(
            this.fatherFraction.selectUnits.indexOf(this.cell.unit),
            1
          );
        }
        //if(this.fatherFraction.control==="comp"&&this.fatherFraction.freeLuchniks.indexOf(this.cell.unit)!==-1){this.fatherFraction.freeLuchniks.splice(this.fatherFraction.freeLuchniks.indexOf(this.cell.unit),1)};
        this.readyToOut = true;

        this.cell.pen.push(this.cell.unit);
        this.cell.free = true;
        this.cell.unit = 0;
      }

      if (this.distroyTimer === 0) {
        this.cell.pen.splice(this.cell.pen.indexOf(arg), 1);
        this.cell = 0;
        this.target = 0;
        this.stepTakt = 0;
      }

      //console.log("pizdez");

      return;
    }

    //blackBoock

    if (this.fatherFraction.control === "comp") {
      this.dash = 1000;
    } // ii

    /*
for(let i=0;i<this.animys.length;i++){

if(this.animys[i].type===1){console.log("east");};	
	
};
*/

    if (this.stopTroll) {
      this.stopTroll--;
      this.iFight = false;
      return;
    }

    //////////////////////////////////////////
    ///////////////////////////////////////////////

    /*
else if(this.fatherFraction.control==="comp"&&!this.handCell&&!this.handTarget&&this.stepTakt<1&&this.stepTakt>=0&&this.iDoTakt===0){
	
  if(this.fatherFraction.freeLuchniks.indexOf(this.cell.unit)===-1){this.fatherFraction.freeLuchniks.push(this.cell.unit);};	
	
};
*/
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    let isBlocked = false;

    if (this.stepTakt < 1 && this.stepTakt >= 0 && !this.iFight) {
      /*
if(this.fatherFraction.control==="player"&&this.hold_position){

if(this.clickSave&&this.clickSave.handTarget){	
this.clickSave=false;
}

//console.log(this.way.length);	
};
*/

      if (
        this.target &&
        (this.target.hp <= 0 ||
          !this.target.cell ||
          this.target.buildready <= 0 ||
          !this.target.visible)
      ) {
        this.target = 0;
        this.iFight = false;
        this.iDoTakt = 0;
        this.way = [];
      } else if (
        this.handTarget &&
        (this.handTarget.hp <= 0 ||
          !this.handTarget.cell ||
          this.handTarget.buildready <= 0 ||
          !this.handTarget.visible)
      ) {
        this.handCell = this.handTarget.cell;

        this.handTarget = 0;
        this.iFight = false;
        this.iDoTakt = 0;
        //this.way=[];
      }

      isBlocked = this.isBlocked();

      //console.log(isBlocked);

      ///*
      let hDis2 = false;

      if (this.clickSave.handTarget && isBlocked) {
        if (
          !this.clickSave.handTarget.neitral &&
          this.clickSave.handTarget.fatherFraction.union !==
            this.fatherFraction.union
        ) {
          let a = this.clickSave.handTarget.damagePointX - this.damagePointX;
          let b = this.clickSave.handTarget.damagePointY - this.damagePointY;

          hDis2 = Math.sqrt(a * a + b * b);
        }
      }
      //*/

      if (
        this.clickSave &&
        (!isBlocked || (isBlocked && hDis2 && hDis2 <= this.seeing))
      ) {
        if (this.clickSave.handCell && !isBlocked) {
          this.handTarget = 0;
          this.target = 0;
          this.handCell = this.clickSave.handCell;
          this.way = "go";
          this.stopGetTarget = 50;

          if (this.ii_back) {
            this.stopGetTarget = this.ii_back;
          }
        } else if (
          this.clickSave.handTarget &&
          (!this.handTarget ||
            this.clickSave.handTarget.persolalNumber !==
              this.handTarget.persolalNumber)
        ) {
          /////////////

          if (
            this.clickSave.handTarget.visible &&
            ((this.clickSave.handTarget.cell.continent &&
              this.clickSave.handTarget.cell.continent ===
                this.cell.continent) ||
              (!this.clickSave.handTarget.neitral &&
                this.clickSave.handTarget.fatherFraction.union !==
                  this.fatherFraction.union &&
                checkAliens(this.cell.unit, this.clickSave.handTarget)))
          ) {
            /*
if(

//(
(

!this.clickSave.handTarget.cell.continent
||
( this.clickSave.handTarget .cell.continent &&  this.clickSave.handTarget.cell.continent!==this.cell.continent  )
)

&&  !checkAliens(this.cell.unit,this.clickSave.handTarget) 
//)

){
	this.clickSave=0;
}
*/

            /////////////

            this.handTarget = this.clickSave.handTarget;
            this.target = 0;
            this.handCell = 0;
            this.stopGetTarget = 50;
            this.way = [];
            this.targetCell = false;

            //if(this.clickSave.wait){this.ii_saveCell=this.cell;};

            //console.log("ok");
          }
        }

        /*	
	if(this.target){
		
		if(this.clickSave.handCell&&!isBlocked){
			
			this.stopGetTarget=50;
			this.target=0;
			this.handCell=this.clickSave.handCell;
			this.way="go";
			
			console.log("i gooooo");
			
			}
			else if(this.clickSave.handTarget){//console.log("ok");
				
			this.stopGetTarget=50;
			this.target=0;
			this.handTarget=this.clickSave.handTarget;
			this.way=[];
			//this.handCell=0;
			this.targetCell=false;
			};
		
	}
else if(this.handTarget){
	
	
if(this.clickSave.handCell&&!isBlocked){
			
			this.stopGetTarget=50;
			this.handTarget=0;
			this.handCell=this.clickSave.handCell;
			this.way="go";
			
			
			}
			else if(this.clickSave.handTarget&&this.clickSave.handTarget.persolalNumber!==this.handTarget.persolalNumber
			){//console.log("ok");
				
			this.stopGetTarget=50;
			//this.handTarget=0;
			this.handTarget=this.clickSave.handTarget;
			this.way=[];
			//this.handCell=0;
			this.targetCell=false;
			};	
	
}
else{
	
//this.stopGetTarget=50;
			//this.handTarget=0;
			this.handTarget=this.clickSave.handTarget;
			this.way=[];	
	     this.handCell=0;
		 this.targetCell=false;
};	
	
	
	
//console.log(this.handTarget.unitName);	
*/
      }

      let del = false;
      ///*
      if (
        this.fatherFraction.control === "player" &&
        this.clickSave.handTarget
      ) {
        let a = this.handTarget.damagePointX - this.damagePointX;
        let b = this.handTarget.damagePointY - this.damagePointY;

        let c = Math.sqrt(a * a + b * b);

        if (c <= 250) {
          del = true;
        }
      }
      //*/

      if (this.clickSave && this.clickSave.hold) {
        this.clickSave.hold--;
      }

      if ((this.clickSave && !this.clickSave.hold) || del) {
        this.clickSave = false;
      }

      /////////////////////////////////////////////////
      /////////////////////////////////////////////////
    }

    //

    //if(this.handTarget){console.log("ok");};

    if (this.stopGetTarget) {
      this.stopGetTarget--;
    }

    /////////////////////////////////////////////////// new!!!

    let warrior = false;

    if (this.stepTakt < 1 && this.stepTakt >= 0 && !this.iFight) {
      let thc;

      if (this.handTarget) {
        let hta = this.handTarget.damagePointX - this.damagePointX;
        let htb = this.handTarget.damagePointY - this.damagePointY;

        thc = Math.sqrt(hta * hta + htb * htb);
      }

      for (let i = 0; i < this.animys.length; i++) {
        //if(!this.animys[i]){console.log(this.animys); pausa=1;};

        let c;

        if (this.animys[i] && this.animys[i].damagePointX) {
          let a = this.animys[i].damagePointX - this.damagePointX;
          let b = this.animys[i].damagePointY - this.damagePointY;

          c = Math.sqrt(a * a + b * b);
        }

        let animy;

        if (c) {
          animy = this.animys[i];
        }

        if (
          !animy ||
          c > this.dash ||
          !animy.cell ||
          animy.hp <= 0 ||
          !animy.visible ||
          ((!animy.cell.continent ||
            (animy.cell.continent &&
              animy.cell.continent !== this.cell.continent) ||
            (animy.fly && animy.cell.unit)) &&
            !checkAliens(this.cell.unit, animy))
        ) {
          /*
	if(this.animys[i].type===1){
		console.log("delete");
	console.log("dash : "+this.dash);
	console.log("c : "+c);
	pausa=1;
	};
	*/
          //console.log("doloy");
          //if(this.fatherFraction.selectUnits.indexOf(this.cell.unit)!==-1&&c>this.dash){console.log("c : "+c);};

          this.animys.splice(i, 1);
          i--;
        } else {
          if (
            //(this.fatherFraction.control==="comp"&&c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&(this.handCell||this.handTarget))||(c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&this.handCell)
            this.fatherFraction.control === "player" &&
            ((this.handCell &&
              c <= this.seeing &&
              this.animys[i].warrior &&
              this.animys[i].hp > 0) ||
              (thc &&
                thc > this.seeing &&
                c <= this.seeing &&
                this.animys[i].warrior &&
                this.animys[i].hp > 0)) &&
            !this.stopGetTarget
          ) {
            //let oh=(c<=this.dash&&this.animys[i].warrior&&!this.target&&this.animys[i].hp>0&&this.handCell);

            //console.log("ok");
            warrior = true;
            this.handTarget = 0;
            this.handCell = 0;
            this.way = [];
          }

          ///blackBoock

          //if(dlt){console.log("doloy");};

          //console.log(checkAliens(this.cell.unit,this.animys[i]))

          if (
            c &&
            this.target &&
            this.animys[i].persolalNumber === this.target.persolalNumber &&
            c > this.dash
          ) {
            this.target = 0;
            this.way = [];
          }
        }
      }

      if (
        this.fatherFraction.control === "comp" &&
        this.animys.length &&
        !this.stopGetTarget
      ) {
        this.handCell = 0;
        this.handTarget = 0;
      }
    }

    // ii
    ///*

    //let stopBack=false;

    //*/

    // ii

    ///////////////////////////////////////////////////////

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      ((!this.handCell && !this.handTarget) || this.iNeedTarget) &&
      //||(this.fatherFraction.control==="comp"&&(this.handCell||this.handTarget)&&!this.iFight)

      this.stopGetTarget === 0
    ) {
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      //this.stepTakt<1&&this.stepTakt>=0&&!this.handCell&&!this.handTarget&&this.stopGetTarget===0

      if (!this.iFight) {
        /////////////////////////

        let min = [];

        let basickMass;

        let life = [];
        let warrior = [];
        let tower = [];
        let els = [];

        for (let i = 0; i < this.animys.length; i++) {
          /*
	if(this.animys[i].type==="tower"){
		tower.push(this.animys[i]);
	}
	else
*/
          if (this.animys[i].warrior) {
            warrior.push(this.animys[i]);
          } else if (this.animys[i].unitStatus === "life") {
            life.push(this.animys[i]);
          } else {
            els.push(this.animys[i]);
          }
        }

        if (tower.length) {
          basickMass = tower;
        } else if (warrior.length) {
          basickMass = warrior;
        } else if (life.length) {
          basickMass = life;
        } else {
          basickMass = els;
        }

        for (let i = 0; i < basickMass.length; i++) {
          let a = basickMass[i].damagePointX - this.damagePointX;
          let b = basickMass[i].damagePointY - this.damagePointY;

          let c = Math.sqrt(a * a + b * b);

          if (
            (!min.length || c < min[0]) &&
            c <= this.dash &&
            basickMass[i].hp > 0 &&
            basickMass[i].cell
          ) {
            min = [c, basickMass[i]];
          }
        }

        /*	
	
for(let i=0;i<this.animys.length;i++){
	
	let a=this.animys[i].damagePointX-this.damagePointX;
	let b=this.animys[i].damagePointY-this.damagePointY;
	
	let c=Math.sqrt(a*a+b*b);
	
	//this.target=this.animys[i];
	///*
	if((!min.length||c<min[0])&&
	((c<=this.dash&&this.animys[i].hp>0&&this.animys[i].cell&&!warrior)||(warrior&&c<=this.dash&&this.animys[i].hp>0&&this.animys[i].warrior))
	
	//&&!this.animys[i].isBlocked(this.cell.unit)
	
){
		min=[c,this.animys[i]];
		};
	

	
};


*/

        if (
          (this.target &&
            min.length &&
            this.target.persolalNumber !== min[1].persolalNumber) ||
          !this.target
        ) {
          this.targetCell = false;
        } ///!!!!!!!!!!!!!!!!?????????????????

        if (min.length) {
          if (
            this.fatherFraction.control === "comp" &&
            !this.ii_attack &&
            !this.handCell &&
            !this.handTarget &&
            !this.way.length &&
            !this.target
          ) {
            //this.ii_saveCell=this.cell;
            this.comeWithMee(min[1]);
          }

          this.target = min[1];
          this.handCell = 0;
          this.handTarget = 0;
          //this.way=[];
          this.clickSave = false;
        } else {
          this.target = 0;
        }
      } else if (this.iFight) {
        if (this.iGetMyCell && !this.stopTroll) {
          if (this.iDoTaktTimer === 100000) {
            this.iDoTaktTimer = 0;
          }

          //iStand
          //console.log(this.iDoTakt);

          if (this.iDoTaktTimer % 4 === 0) {
            this.iDoTakt++;
          }

          if (this.iDoTakt === 4) {
            //pausa=1;

            //x,y,type,target,power

            if (!this.axe) {
              if (this.fatherFraction.nation === "h") {
                this.axeInitialization(this.target, "luk", this.cell.unit);
              } else {
                this.axeInitialization(this.target, "topor", this.cell.unit);
              }

              this.tyuk = true;
              this.axe = true;

              if (
                !this.target.warrior &&
                this.target.unitStatus === "life" &&
                !this.target.alarmTimer
              ) {
                this.target.alarmTimer = 500;
                this.target.agressor = this.cell.unit;
              }
            }
          }

          if (this.iDoTakt === 5) {
            this.axe = false;
            //this.iFight=false;
            this.animTimer = 100;
            this.stopTroll = this.holdTroll;
            //this.cellUpdate();

            this.iDoTakt = 0;

            //if(this.target.unitStatus==="building"&&this.target.buildready<this.target.hpfull&&this.target.buildready>0){
            //this.target.buildready-=15;
            //}

            //else  if(this.target.hp>0&&this.target.cell){
            //this.target.hp-=15;

            ///			};

            //if(this.target.unitStatus==="life"){	if(this.target&&this.target.fatherFraction.activeUnits.indexOf(this.target)===-1){this.target.fatherFraction.activeUnits.push(this.target);};};
            //if(this.target.unitStatus==="building"){	if(this.target&&this.target.fatherFraction.activeBuildings.indexOf(this.target)===-1){this.target.fatherFraction.activeBuildings.push(this.target);};};
          }
          this.iDoTaktTimer++;

          return;
        }
      }

      if (
        !this.iFight &&
        this.target &&
        this.target.hp > 0 &&
        this.target.cell
      ) {
        this.iGetTarget = this.checkGetTarget();
      }

      //console.log(this.iGetTarget);

      if (this.iGetTarget) {
        this.peonGo(this.target);

        this.iFight = true;
        this.iGetTarget = false;

        this.moveVektor = this.getFightVector(this.target);
        this.getFirePoint();
        //console.log(this.moveVektor);
        this.way = [];
        this.clickSave = false;
      } else {
        if (
          !this.hold_position &&
          !isBlocked &&
          !this.iFight &&
          this.target &&
          (this.targetCell !== this.target.cell.persolalNumber ||
            !this.way.length ||
            (this.way.length && !this.way[this.way.length - 1].free))
        ) {
          //console.log(this.hold_position);

          this.targetCell = this.target.cell.persolalNumber;

          let noFree = 1000;

          this.finish = this.target.cell;
          this.sosFin = this.target.cell;
          //getWay(this.cell.unit,noFree,2000);

          /*	
	
	 let dis;
 
if(this.target){	
	let a=this.target.damagePointX-this.damagePointX;
	let b=this.target.damagePointY-this.damagePointY;
	
	dis=Math.sqrt(a*a+b*b);
};
*/

          /*		
let deep;

	if(dis<=300){
		deep=300;
		}
else if(dis>300&&deep<500){
	deep=500;
}
else{
	
	deep=1000;
	
};		


if(!this.target.cell.continent||(this.target.cell.continent&&this.target.cell.continent!==this.cell.continent)){
	deep=100;
	//console.log("ok");
};
*/
          //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //dlya luchnik
          /*
let luchnik=undefined;


if(this.target.unitStatus==="life"){luchnik=1;};
*/
          let deep = 10000;

          let luchnik = undefined;

          if (!this.target.myCells || !this.target.myCells.length) {
            luchnik = 1;
          } else if (this.target.myCells && this.target.myCells.length) {
            luchnik = 3;
            //console.log(this.handTarget);
          }

          //console.log(luchnik);

          ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          getWay(arg, noFree, deep, this.target, luchnik);
        }
      }
    } else if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      !this.handCell &&
      !this.target &&
      this.handTarget
    ) {
      // console.log(this.handTarget);

      if (!this.iFight && this.handTarget.hp > 0 && this.handTarget.cell) {
        this.iGetTarget = this.checkGetHandTarget();

        //console.log("ok");
      }

      if (this.iGetTarget) {
        if (
          !this.handTarget.neitral &&
          this.handTarget.fatherFraction.union !== this.fatherFraction.union
        ) {
          this.peonGo(this.handTarget);

          this.iFight = true;
          this.clickSave = false;

          this.iGetTarget = false;

          this.moveVektor = this.getFightVector(this.handTarget);

          this.getFirePoint();
          //console.log(this.firePoint);
          this.way = [];
        } else {
          this.handTarget = 0;
          this.way = [];
          this.handCell = 0;
        }

        this.clickSave = false;
      } else {
        //console.log(this.handTarget);

        if (
          (!this.way.length || !this.way[this.way.length - 1].free) &&
          !this.iFight
        ) {
          let luchnik = undefined;

          if (
            (!this.handTarget.myCells || !this.handTarget.myCells.length) &&
            !this.handTarget.neitral &&
            this.handTarget.fatherFraction.union !== this.fatherFraction.union
          ) {
            luchnik = 1;
          } else if (
            (!this.handTarget.myCells || !this.handTarget.myCells.length) &&
            (this.handTarget.neitral ||
              this.handTarget.fatherFraction.union ===
                this.fatherFraction.union)
          ) {
            luchnik = 2;
            //console.log(this.handTarget);
          } else if (
            this.handTarget.myCells &&
            this.handTarget.myCells.length &&
            (this.handTarget.neitral ||
              this.handTarget.fatherFraction.union ===
                this.fatherFraction.union)
          ) {
            luchnik = undefined;
            //console.log(this.handTarget);
          } else if (
            this.handTarget.myCells &&
            this.handTarget.myCells.length &&
            !this.handTarget.neitral &&
            this.handTarget.fatherFraction.union !== this.fatherFraction.union
          ) {
            luchnik = 3;
            //console.log(this.handTarget);
          }

          //console.log("go");

          ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          this.finish = this.handTarget.cell;
          this.sosFin = this.handTarget.cell;

          /*		
		let a=this.handTarget.damagePointX-this.damagePointX;
		let b=this.handTarget.damagePointY-this.damagePointY;
		
		let c=Math.sqrt(a*a+b*b);
		
		
	let deep=2000;

///*
 if(c<500){
	 deep=500;
	 }
else if(c<=1000){
	deep=1000;
}
//*/
          let deep = 10000;

          //console.log(deep);

          getWay(arg, 350, glob_deep, this.handTarget, luchnik);

          let iCanGet = this.iCanGet;
          this.iCanGet = false;

          //console.log(iCanGet);

          if (
            !iCanGet ||
            ((!luchnik || luchnik === 2) && this.handTarget.isBlocked())
          ) {
            //console.log("nenenene");

            if (this.way.length) {
              this.handCell = this.way[0]; //console.log("go")

              if (this.way.length > 3) {
                this.clickSave = false;
              }
            } else {
              this.handCell = this.handTarget.cell;
              this.clickSave = false;
            }

            this.handTarget = 0;
            //console.log("oh");
            //console.log(iCanGet);
          }
        }
      }

      //console.log(this.iFight);

      if (this.iFight) {
        if (
          this.handTarget.neitral ||
          this.handTarget.fatherFraction.union === this.fatherFraction.union
        ) {
          this.handTarget = 0;
          this.iFight = false;
        }

        if (this.iGetMyCell && !this.stopTroll) {
          if (this.iDoTaktTimer === 100000) {
            this.iDoTaktTimer = 0;
          }

          //iStand
          //console.log(this.iDoTakt);

          if (this.iDoTaktTimer % 4 === 0) {
            this.iDoTakt++;
          }

          if (this.iDoTakt === 4) {
            //pausa=1;

            //x,y,type,target,power

            if (!this.axe) {
              //this.axeInitialization(this.handTarget,"topor",this.cell.unit);

              if (this.fatherFraction.nation === "h") {
                this.axeInitialization(this.handTarget, "luk", this.cell.unit);
              } else {
                this.axeInitialization(
                  this.handTarget,
                  "topor",
                  this.cell.unit
                );
              }

              this.tyuk = true;
              this.axe = true;

              if (
                !this.handTarget.warrior &&
                this.handTarget.unitStatus === "life" &&
                !this.handTarget.alarmTimer
              ) {
                this.handTarget.alarmTimer = 500;
                this.handTarget.agressor = this.cell.unit;
              }
            }
          }

          if (this.iDoTakt === 5) {
            this.axe = false;
            //this.iFight=false;
            this.animTimer = 100;
            this.stopTroll = this.holdTroll;
            //this.cellUpdate();

            this.iDoTakt = 0;

            //	if(this.handTarget.unitStatus==="building"&&this.handTarget.buildready<this.handTarget.hpfull&&this.handTarget.buildready>0){
            //this.handTarget.buildready-=15;
            //	}

            //else  if(this.handTarget.hp>0&&this.handTarget.cell){
            //this.handTarget.hp-=15;

            //			};

            //if(this.handTarget.unitStatus==="life"){	if(this.handTarget&&this.handTarget.fatherFraction.activeUnits.indexOf(this.handTarget)===-1){this.handTarget.fatherFraction.activeUnits.push(this.handTarget);};};
            //if(this.handTarget.unitStatus==="building"){	if(this.handTarget&&this.handTarget.fatherFraction.activeBuildings.indexOf(this.handTarget)===-1){this.handTarget.fatherFraction.activeBuildings.push(this.handTarget);};};
          }
          this.iDoTaktTimer++;

          return;
        }
      }

      if (
        isBlocked &&
        this.stepTakt < 1 &&
        this.stepTakt >= 0 &&
        !this.iFight &&
        this.handTarget
      ) {
        this.handTarget = 0;
        this.way = [];
        this.handCell = 0;
      } //////new!!!!?????
    }

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      this.fatherFraction.control === "comp" &&
      !this.iFight &&
      !this.target &&
      //this.readyToOut&&
      this.ii_saveCell &&
      !this.handTarget &&
      !this.way.length &&
      !this.handCell
    ) {
      let a = this.ii_saveCell.x - this.cell.x;
      let b = this.ii_saveCell.y - this.cell.y;

      let c = Math.sqrt(a * a + b * b);

      if (c > 0) {
        this.clickSave = new ClickSave(0, this.ii_saveCell);

        //console.log(this.persolalNumber);
      }

      if (c <= 250) {
        this.ii_saveCell = 0;
      }

      //console.log(this.persolalNumber);
    }

    this.iNeedTarget = false;
  } else if (this.type === 2) {
    ///////////////////////////////////////////////////////////////////////////////////////////
    //this.attack=this.baseAttack*this.fatherFraction.dopNoFlyAttack;
    //this.panzer=this.basePanzer*this.fatherFraction.dopNoFlyPanzer;

    //this.level=1+(this.fatherFraction.dopNoFlyAttack_level)+
    //(this.fatherFraction.dopNoFlyPanzer_level);
    ///////////////////////////////////////////////////////////////////////////////////////////

    if (this.hp <= 0) {
      this.hp = 0;
      this.target = "dead";
    }
    //this.target="dead";
    //iStand
    if (this.target === "dead") {
      this.iDoTaktTimer = -1;
      this.iDoTakt = 0;
      //this.myJoube=0;
      this.iFight = false;
      this.way = [];
      this.speed = 0;
      this.updateSpeed();
      this.target = 0;
      this.handTarget = 0;
      this.animys = [];

      this.distroyTimer--;

      if (this.distroyTimer === 492) {
        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );
        }

        //if(this.fatherFraction.peoples.indexOf(this.cell.unit)!==-1){this.fatherFraction.peoples.splice(this.fatherFraction.peoples.indexOf(this.cell.unit),1)};
        //if(this.fatherFraction.mechniks.indexOf(this.cell.unit)!==-1){this.fatherFraction.mechniks.splice(this.fatherFraction.mechniks.indexOf(this.cell.unit),1)};
        if (this.fatherFraction.selectUnits.indexOf(this.cell.unit) !== -1) {
          this.fatherFraction.selectUnits.splice(
            this.fatherFraction.selectUnits.indexOf(this.cell.unit),
            1
          );
        }
        //if(this.fatherFraction.control==="comp"&&this.fatherFraction.freeMechniks.indexOf(this.cell.unit)!==-1){this.fatherFraction.freeMechniks.splice(this.fatherFraction.freeMechniks.indexOf(this.cell.unit),1)};

        this.readyToOut = true;

        this.cell.pen.push(this.cell.unit);
        this.cell.free = true;
        this.cell.unit = 0;
      }

      if (this.distroyTimer === 0) {
        this.cell.pen.splice(this.cell.pen.indexOf(arg), 1);
        this.cell = 0;
        this.target = 0;
        this.stepTakt = 0;
      }

      //console.log("pizdez");

      return;
    }

    if (this.stepTakt < 1 && this.stepTakt >= 0 && !this.iFight) {
      if (this.target && (this.target.hp <= 0 || !this.target.cell)) {
        this.target = 0;
        //this.iFight=false;
        this.iDoTakt = 0;

        //this.handCell=this.target.cell;
        //this.way="go";
      } else if (
        this.handTarget &&
        (this.handTarget.hp <= 0 || !this.handTarget.cell)
      ) {
        ///*

        if (this.fatherFraction.control === "comp") {
          this.handCell = this.handTarget.cell;
          this.way = "go";

          this.handTarget = 0;
          //this.iFight=false;
          this.iDoTakt = 0;
        } else {
          if (
            this.memHT &&
            this.memHT.persolalNumber === this.handTarget.persolalNumber
          ) {
            this.handTarget = 0;
            this.way = [];
            this.clickSave = false;
            this.iDoTakt = 0;
          } else {
            this.handCell = this.handTarget.cell;
            this.way = "go";

            this.handTarget = 0;
            //this.iFight=false;
            this.iDoTakt = 0;
          }
        }
      }
    }

    if (this.fatherFraction.control === "comp") {
      this.dash = 1000;
    } // ii

    //////////////////////////////////////////
    ///////////////////////////////////////////////

    //else if(this.fatherFraction.control==="comp"&&!this.handCell&&!this.handTarget&&this.stepTakt<1&&this.stepTakt>=0&&this.iDoTakt===0){

    // if(this.fatherFraction.freeMechniks.indexOf(this.cell.unit)===-1){this.fatherFraction.freeMechniks.push(this.cell.unit);};

    //};

    let isBlocked = this.isBlocked();

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      this.iDoTakt === 0 &&
      !this.iFight
    ) {
      //isBlocked=this.isBlocked();

      let hDis2 = false;

      if (this.clickSave.handTarget) {
        let a = this.clickSave.handTarget.x - this.x;
        let b = this.clickSave.handTarget.y - this.y;

        hDis2 = Math.sqrt(a * a + b * b);
      }

      if (
        this.clickSave &&
        (!isBlocked || (isBlocked && hDis2 && hDis2 < 80))
      ) {
        if (this.clickSave.handCell) {
          this.target = 0;
          this.handTarget = 0;
          this.iDoTakt = 0;
          this.stepTakt = 0;
          this.handCell = this.clickSave.handCell;
          this.way = "go";

          this.stopGetTarget = 50;

          if (this.ii_back) {
            this.stopGetTarget = this.ii_back;
          } //

          //if(this.clickSave.wait){this.ii_saveCell=this.cell;};
          //if(this.fatherFraction.control==="comp"){this.stopGetTarget=50;};
        } else if (
          this.clickSave.handTarget &&
          (!this.handTarget ||
            this.clickSave.handTarget.persolalNumber !==
              this.handTarget.persolalNumber)
        ) {
          this.target = 0;
          this.handTarget = this.clickSave.handTarget;
          this.iDoTakt = 0;
          this.stepTakt = 0;
          this.handCell = 0;
          this.stopGetTarget = 50;

          //if(this.fatherFraction.control==="comp"){this.stopGetTarget=50;};
          //if(this.clickSave.wait){this.ii_saveCell=this.cell;};
        }

        /*	
	
	if(this.target){
		
		if(this.clickSave.handCell&&!isBlocked){
			
			this.stopGetTarget=50;
			this.target=0;
			this.handCell=this.clickSave.handCell;
			this.way="go";
			
			
			}
			else if(this.clickSave.handTarget){//console.log("ok");
				
			this.stopGetTarget=50;
			this.target=0;
			this.handTarget=this.clickSave.handTarget;
			this.way=[];
			//this.handCell=0;
			this.targetCell=false;
			};
		
	}
else if(this.handTarget){
	
	//if(this.persolalNumber===10532&&this.clickSave&&this.clickSave.handCell){console.log("hm?");};
	
	
if(this.clickSave.handCell&&!isBlocked){
			
			this.stopGetTarget=50;
			this.handTarget=0;
			this.handCell=this.clickSave.handCell;
			this.way="go";
			
			
			}
			else if(this.clickSave.handTarget&&this.clickSave.handTarget.persolalNumber!==this.handTarget.persolalNumber
			){//console.log("ok");
				
			this.stopGetTarget=50;
			//this.handTarget=0;
			this.handTarget=this.clickSave.handTarget;
			this.way=[];
			//this.handCell=0;
			this.targetCell=false;
			};	
	
}
else{
	
	
	

if(this.clickSave.handTarget){
	
this.stopGetTarget=50;
			//this.handTarget=0;
			this.handTarget=this.clickSave.handTarget;
			this.way=[];	
	     this.handCell=0;
		 this.targetCell=false;
		 
}
else if(this.clickSave.handCell){
	
	
	//if(this.persolalNumber===10532){console.log("hm?");};
			
			this.stopGetTarget=50;
			//this.handTarget=0;
			this.handCell=this.clickSave.handCell;
			this.way="go";
			
			
			};
		 
};	
	
	
	
//console.log(this.handTarget.unitName);	
*/
      }

      //console.log(this.target);// pausa=1;

      let del = false;

      if (
        this.fatherFraction.control === "player" &&
        this.clickSave.handTarget
      ) {
        let a = this.handTarget.damagePointX - this.damagePointX;
        let b = this.handTarget.damagePointY - this.damagePointY;

        let c = Math.sqrt(a * a + b * b);

        if (c <= 250) {
          del = true;
        }
      }

      if (this.clickSave && this.clickSave.hold) {
        this.clickSave.hold--;
      }

      if ((this.clickSave && !this.clickSave.hold) || del) {
        this.clickSave = false;
      }

      /////////////////////////////////////////////////
      /////////////////////////////////////////////////

      if (
        this.stopGetTarget === 0 &&
        (!this.target ||
          (this.target && !this.checkGetTarget()) ||
          !this.target.warrior)
      ) {
        for (let i = 0; i < this.cell.iContaktWith.length; i++) {
          if (
            !this.cell.iContaktWith[i].father.neitral &&
            !this.cell.iContaktWith[i].father.sweeme &&
            this.cell.iContaktWith[i].father.fatherFraction.union !==
              this.fatherFraction.union &&
            this.cell.iContaktWith[i].father.warrior &&
            this.cell.iContaktWith[i].father.hp > 0
          ) {
            this.handTarget = 0; //gameFielg[i][k].unit;
            this.handCell = 0;
            this.target = this.cell.iContaktWith[i].father;
            this.way = [];
            this.targetCell = false;
            this.clickSave = false;
          }
        }
      }
    }

    //
    //if(this.stopGetTarget===50){console.log("vot");};
    if (this.stopGetTarget) {
      this.stopGetTarget--;
    }
    //if(this.iGoBack){this.iGoBack--;};

    //////////////////////////////////////////////////////////////////////////////// new!!!!
    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      !this.iFight //&&!this.iGoBack
    ) {
      for (let i = 0; i < this.animys.length; i++) {
        let c;

        if (this.animys[i] && this.animys[i].damagePointX) {
          let a = this.animys[i].damagePointX - this.damagePointX;
          let b = this.animys[i].damagePointY - this.damagePointY;

          c = Math.sqrt(a * a + b * b);
        }
        /*
if(this.fatherFraction.control==="comp"&&c<=this.dash&&this.animys[i].warrior&&!this.target){
	
	this.handCell=0;
	this.handTarget=0;
	this.way=[];
	//console.log("ok");
};	
*/
        if (
          !c ||
          c > this.dash ||
          !this.animys[i].cell ||
          this.animys[i].hp <= 0 ||
          !this.animys[i].cell.continent ||
          this.animys[i].cell.continent !== this.cell.continent
        ) {
          this.animys.splice(i, 1);
          i--;
        }
      }
    }
    /////////////////////////////////////////////////////////////////////////////////////

    // ii

    if (
      this.fatherFraction.control === "comp" &&
      this.animys.length &&
      !this.ii_back
    ) {
      this.handCell = 0;
      this.handTarget = 0;
    }

    // ii

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      ((!this.handCell && !this.handTarget) || this.iNeedTarget) &&
      this.stopGetTarget === 0
    ) {
      let min = [];

      //if(this.fatherFraction.fraction==="redOrcs"){console.log(this.iFight);};

      let dis;

      if (this.target) {
        let a = this.target.damagePointX - this.damagePointX;
        let b = this.target.damagePointY - this.damagePointY;

        dis = Math.sqrt(a * a + b * b);
      }

      if (
        !this.iFight &&
        (!this.target || (this.target && dis > 120) || !this.target.warrior)
      ) {
        //////////////////////////

        //let min=[];

        let basickMass;

        let life = [];
        let warrior = [];
        let tower = [];
        let els = [];

        for (let i = 0; i < this.animys.length; i++) {
          if (!this.animys[i].isBlocked(this.cell.unit)) {
            if (this.animys[i].type === "tower") {
              tower.push(this.animys[i]);
            } else if (this.animys[i].warrior) {
              warrior.push(this.animys[i]);
            } else if (this.animys[i].unitStatus === "life") {
              life.push(this.animys[i]);
            } else {
              els.push(this.animys[i]);
            }
          }
        }

        if (tower.length) {
          basickMass = tower;
        } else if (warrior.length) {
          basickMass = warrior;
        } else if (life.length) {
          basickMass = life;
        } else {
          basickMass = els;
        }

        for (let i = 0; i < basickMass.length; i++) {
          let a = basickMass[i].damagePointX - this.damagePointX;
          let b = basickMass[i].damagePointY - this.damagePointY;

          let c = Math.sqrt(a * a + b * b);

          if (
            (!min.length || c < min[0]) &&
            c <= this.dash &&
            basickMass[i].hp > 0 &&
            basickMass[i].cell
          ) {
            min = [c, basickMass[i]];
          }
        }

        /////////////////////////

        /*		
	
for(let i=0;i<this.animys.length;i++){
	
	let a=this.animys[i].damagePointX-this.damagePointX;
	let b=this.animys[i].damagePointY-this.damagePointY;
	
	let c=Math.sqrt(a*a+b*b);
	
	//this.target=this.animys[i];
	
	if((!min.length||c<min[0])&&c<=this.dash&&this.animys[i].hp>0&&this.animys[i].cell&&
	!this.animys[i].isBlocked(this.cell.unit)
	
){
		min=[c,this.animys[i]];
		};
	
	
};

*/

        if (
          (this.target &&
            min.length &&
            this.target.persolalNumber !== min[1].persolalNumber) ||
          !this.target
        ) {
          this.targetCell = false;
        } ///!!!!!!!!!!!!!!!!?????????????????

        if (min.length) {
          if (
            this.fatherFraction.control === "comp" &&
            !this.ii_attack &&
            !this.handCell &&
            !this.handTarget &&
            !this.way.length &&
            !this.target
          ) {
            //this.ii_saveCell=this.cell;
            this.comeWithMee(min[1]);
          }

          this.target = min[1];
          this.handCell = 0;
          this.handTarget = 0;
          //this.way=[];
          this.clickSave = false;
        } else {
          this.target = 0;
        }
      }

      //console.log(this.iGetTarget);
      if (this.target) {
        // this.targetCell=this.target.cell.persolalNumber;

        if (!this.target.warrior) {
          for (let i = 0; i < this.cell.iContaktWith.length; i++) {
            if (
              !this.cell.iContaktWith[i].father.neitral &&
              this.cell.iContaktWith[i].father.fatherFraction.union !==
                this.fatherFraction.union &&
              this.cell.iContaktWith[i].father.warrior &&
              this.cell.iContaktWith[i].father.hp > 0
            ) {
              this.handTarget = 0; //gameFielg[i][k].unit;
              this.handCell = 0;
              this.target = this.cell.iContaktWith[i].father;
              this.way = [];
              this.targetCell = false;
              this.clickSave = false;
            }
          }

          //this.target=gameFielg[i][k].unit;
          //this.targetCell=false;/////////////////////////////////////////////////////////??????????????????????????????????
        }

        //let a=this.target.x-this.x;
        //let b=this.target.y-this.y;

        //let c=Math.sqrt(a*a+b*b);

        //if(c<=Math.sqrt(50*50+50*50)){
        if (!this.iFight && this.target.hp > 0 && this.target.cell) {
          this.iGetTarget = this.checkGetTarget();
        }
        //};

        if (this.iGetTarget) {
          ////////////////////////////////////////////////////////////peon

          this.peonGo(this.target);

          ////////////////////////////////////////////////////////////peon

          this.clickSave = false;

          this.moveVektor = this.getFightVector(this.target);

          //console.log(this.moveVektor);

          this.way = [];
          //};

          //if(this.iGetMyCell){
          this.iFight = true;

          //};
        } else if (
          !this.hold_position &&
          !isBlocked &&
          !this.iFight &&
          this.target &&
          !this.target.isBlocked(this.cell.unit) &&
          (this.targetCell !== this.target.cell.persolalNumber ||
            !this.way.length ||
            (this.way.length && !this.way[this.way.length - 1].free))
        ) {
          //console.log("way");

          this.targetCell = this.target.cell.persolalNumber;

          let noFree = 350;

          this.finish = this.target.cell;
          this.sosFin = this.target.cell;
          //getWay(this.cell.unit,noFree,2000);

          /*		
let deep;

	if(dis<=300){
		deep=400;
		}
else if(dis>300&&deep<500){
	deep=600;
}
else{
	
	deep=1000;
	
};		
	*/
          let deep = 10000;

          getWay(arg, noFree, deep, this.target);
        }

        this.iGetTarget = false;

        if (this.iFight) {
          if (this.iGetMyCell) {
            if (this.iDoTaktTimer === 100000) {
              this.iDoTaktTimer = 0;
            }

            //iStand
            //console.log(this.iDoTakt);

            if (this.iDoTaktTimer % 4 === 0) {
              this.iDoTakt++;
            }

            if (this.iDoTakt === 5) {
              let hp;

              this.iFight = false;
              this.animTimer = 100;

              //this.cellUpdate();

              this.iDoTakt = 0;

              let attack = this.attack * rage;
              this.tyuk = true;

              if (
                this.target.unitStatus === "building" &&
                this.target.buildready < this.target.hpfull &&
                this.target.buildready > 0
              ) {
                hp = this.target.buildready;

                this.target.buildready -=
                  attack - (attack * this.target.panzer) / 100;
              } else if (this.target.hp > 0 && this.target.cell) {
                hp = this.target.hp;

                this.target.hp -= attack - (attack * this.target.panzer) / 100;
              }
              //indexOf
              if (this.target.unitStatus === "life") {
                ////////////////////
                if (title.style && hp && hp > 0 && this.target.hp <= 0) {
                  this.fatherFraction.kills++;
                }
                ///////////////////////

                if (!this.target.warrior && !this.target.alarmTimer) {
                  this.target.alarmTimer = 500;
                  this.target.agressor = this.cell.unit;
                }

                if (this.target && !this.target.active) {
                  this.target.fatherFraction.activeUnits.push(this.target);
                  this.target.active = true;
                }
              }
              if (this.target.unitStatus === "building") {
                ////////////////////
                if (
                  title.style &&
                  hp &&
                  hp > 0 &&
                  (this.target.hp <= 0 || this.target.buildready <= 0)
                ) {
                  this.fatherFraction.razings++;
                }
                ///////////////////////

                if (!this.target.alarmTimer) {
                  this.target.alarmTimer = 500;
                  this.target.agressor = this.cell.unit;
                }

                if (
                  this.target &&
                  this.target.fatherFraction.activeBuildings.indexOf(
                    this.target
                  ) === -1
                ) {
                  this.target.fatherFraction.activeBuildings.push(this.target);
                }
              }
            }
            this.iDoTaktTimer++;

            return;
          }
        }
      }
    } else if (this.handTarget && this.stepTakt < 1 && this.stepTakt >= 0) {
      //this.target=0;

      //this.target=this.handTarget;

      //	if(this.persolalNumber===1433&&this.handTarget.unitStatus==="building"){
      //	console.log(this.handTarget.buildready);
      //	}
      /*
if((this.handTarget.hp<=0||!this.handTarget.cell||this.handTarget.buildready<=0||
!this.handTarget)
&&!this.iFight
){this.handTarget=0;this.way=[];};	
	*/

      ///*
      //console.log(this.handTarget.unitName);

      if (!this.iFight && this.handTarget) {
        this.iGetTarget = this.checkGetHandTarget();
      }
      //};

      //if(this.handTarget.unitName==="townHoll"){
      //pausa=1;

      //console.log(this.iGetTarget);
      //};
      //*/

      if (this.iGetTarget) {
        this.memHT = this.handTarget;

        ////////////////////////////////////////////////////////////peon

        this.peonGo(this.handTarget);

        ////////////////////////////////////////////////////////////peon

        this.clickSave = false;

        this.moveVektor = this.getFightVector(this.handTarget);

        //console.log(this.moveVektor);

        //this.stopGetTarget=0;

        if (
          this.handTarget.neitral ||
          this.handTarget.fatherFraction.union === this.fatherFraction.union
        ) {
          this.handTarget = 0;
          this.way = [];
          this.clickSave = false;
          //console.log("ok");
        } else {
          //if(!this.iFight){
          this.way = [];
          //};

          //if(this.iGetMyCell){
          this.iFight = true;
          //this.stopGetTarget=2;
          //};
          this.clickSave = false;
        }
      }

      ///*
      else if (
        !this.iFight &&
        this.handTarget &&
        (this.targetCell !== this.handTarget.cell.persolalNumber ||
          (this.way.length && !this.way[this.way.length - 1].free) ||
          !this.way.length)
      ) {
        // console.log("ok");

        this.targetCell = this.handTarget.cell.persolalNumber;

        noFree = 350;

        //deep

        //let optimalContaktCell=this.getOptimalContaktCell();

        //console.log(this.target);
        this.finish = this.handTarget.cell; //this.target.cell;
        this.sosFin = this.handTarget.cell; //this.target.cell;

        getWay(arg, noFree, glob_deep, this.handTarget);

        ///*
        let iCanGet = this.iCanGet;
        this.iCanGet = false;
        /*	
for(let i=0;i<this.handTarget.contaktCells.length;i++){
	
	if(this.way.length&&this.way[0].horizont===this.handTarget.contaktCells[i].horizont&&
	this.way[0].vertikal===this.handTarget.contaktCells[i].vertikal
	){
		
	iCanGet=true;	
	break;	
	};
	
};
*/
        if (!iCanGet) {
          if (!this.way.length) {
            this.handCell = this.handTarget.cell;

            this.handTarget = 0;
            //this.target=0;
            this.targetCell = false;

            this.clickSave = false;
          } else {
            this.handCell = this.way[0];
            this.handTarget = 0;
            //this.target=0;
            this.targetCell = false;

            if (this.way.length > 3) {
              this.clickSave = false;
            }
          }

          //console.log("neeee");
        } else {
          this.iGetTarget = this.checkGetHandTarget();

          if (this.iGetTarget) {
            if (
              this.handTarget.neitral ||
              this.handTarget.fatherFraction.union === this.fatherFraction.union
            ) {
              this.handTarget = 0;
              this.way = [];
              this.clickSave = false;
              //console.log("ok");
            } else {
              this.way = [];
              this.iFight = true;
              this.iGetTarget = false;
              this.clickSave = false;
              //this.stopGetTarget=2;
            }
          }
        }

        //*/

        //console.log("ok");
        /*	 
		 			let noFree=[];


for(let l=this.vertikal-7;l<this.vertikal+7;l++){
	
	for(let m=this.horizont-7;m<this.horizont+7;m++){
	
if(gameFielg[l]&&gameFielg[l][m]&&!gameFielg[l][m].free){	
		noFree.push(gameFielg[l][m]);
};
		
	};
	
};
	
	
	this.finish=this.handTarget.cell;
		getWay(this.cell.unit,noFree,2000);
		 
		 
		 
		 
	*/
      }

      //	*/
    }

    //if(this.fatherFraction.fraction==="blackOrcs"&&this.target){console.log("okokok");};

    this.iGetTarget = 0;

    if (this.iFight) {
      if (this.iGetMyCell) {
        if (this.iDoTaktTimer === 100000) {
          this.iDoTaktTimer = 0;
        }

        //iStand
        //console.log(this.iDoTakt);

        if (this.iDoTaktTimer % 4 === 0) {
          this.iDoTakt++;
        }

        if (this.iDoTakt === 5) {
          let hp;

          this.iFight = false;
          this.animTimer = 100;

          //this.cellUpdate();

          this.iDoTakt = 0;

          let attack = this.attack * rage;
          this.tyuk = true;

          if (
            this.handTarget.unitStatus === "building" &&
            this.handTarget.buildready < this.handTarget.hpfull &&
            this.handTarget.buildready > 0
          ) {
            hp = this.handTarget.buildready;

            this.handTarget.buildready -=
              attack - (attack * this.handTarget.panzer) / 100;
          } else if (this.handTarget.hp > 0 && this.handTarget.cell) {
            hp = this.handTarget.hp;

            this.handTarget.hp -=
              attack - (attack * this.handTarget.panzer) / 100;
          }
          //indexOf
          if (this.handTarget.unitStatus === "life") {
            ////////////////////
            if (title.style && hp && hp > 0 && this.handTarget.hp <= 0) {
              this.fatherFraction.kills++;
            }
            ///////////////////////

            if (!this.target.warrior && !this.target.alarmTimer) {
              this.target.alarmTimer = 500;
              this.target.agressor = this.cell.unit;
            }

            if (this.handTarget && !this.handTarget.active) {
              this.handTarget.fatherFraction.activeUnits.push(this.handTarget);
              this.handTarget.active = true;
            }
          }
          if (
            this.handTarget.unitStatus === "building" &&
            !this.handTarget.neitral
          ) {
            ////////////////////
            if (
              title.style &&
              hp &&
              hp > 0 &&
              (this.handTarget.hp <= 0 || this.handTarget.buildready <= 0)
            ) {
              this.fatherFraction.razings++;
            }
            ///////////////////////

            if (!this.handTarget.alarmTimer) {
              this.handTarget.alarmTimer = 500;
              this.handTarget.agressor = this.cell.unit;
            }

            if (
              this.handTarget &&
              this.handTarget.fatherFraction.activeBuildings.indexOf(
                this.handTarget
              ) === -1
            ) {
              this.handTarget.fatherFraction.activeBuildings.push(
                this.handTarget
              );
            }
          }
        }
        this.iDoTaktTimer++;

        return;
      }
    }

    ///*

    if (
      this.stepTakt < 1 &&
      this.stepTakt >= 0 &&
      !this.iFight &&
      !this.target &&
      //this.readyToOut&&
      this.ii_saveCell &&
      !this.handTarget &&
      !this.way.length &&
      !this.handCell
    ) {
      let a = this.ii_saveCell.x - this.cell.x;
      let b = this.ii_saveCell.y - this.cell.y;

      let c = Math.sqrt(a * a + b * b);

      if (c > 50) {
        this.clickSave = new ClickSave(0, this.ii_saveCell);

        //console.log(this.persolalNumber);
      }

      if (c <= 250) {
        this.ii_saveCell = 0;
      }

      //console.log(this.persolalNumber);
    }

    this.iNeedTarget = false;

    //*/

    //console.log(this.stopGetTarget);
  } else if (this.type === 1) {
    //cellUpdate

    //console.log(this.target);

    //getMinDistanse union isBlocked

    //*

    //if(this.persolalNumber===394){console.log(this.myJoube);};

    //if(this.iGetTarget&&this.iDoTakt===4&&this.cell&&this.myJoube==="i build"){this.cellUpdate();};

    //if(this.hp<=0){this.hp=0;this.target="dead";};
    //this.target="dead";
    //iStand
    if (this.hp <= 0) {
      this.hp = 0;
      this.target = "dead";

      this.iDoTaktTimer = -1;
      this.iDoTakt = 0;
      this.myJoube = 0;
      this.way = [];
      this.speed = 0;
      this.updateSpeed();

      this.distroyTimer--;

      if (this.distroyTimer === 492) {
        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );
        }

        //if(this.fatherFraction.peoples.indexOf(this.cell.unit)!==-1){this.fatherFraction.peoples.splice(this.fatherFraction.peoples.indexOf(this.cell.unit),1)};
        //if(this.fatherFraction.batraks.indexOf(this.cell.unit)!==-1){this.fatherFraction.batraks.splice(this.fatherFraction.batraks.indexOf(this.cell.unit),1)};
        //if(this.fatherFraction.freeBatraks.indexOf(this.cell.unit)!==-1){this.fatherFraction.freeBatraks.splice(this.fatherFraction.freeBatraks.indexOf(this.cell.unit),1)};
        //if(this.fatherFraction.batraksOnGolg.indexOf(this.cell.unit)!==-1){this.fatherFraction.batraksOnGolg.splice(this.fatherFraction.batraksOnGolg.indexOf(this.cell.unit),1)};
        //if(this.fatherFraction.batraksOnWood.indexOf(this.cell.unit)!==-1){this.fatherFraction.batraksOnWood.splice(this.fatherFraction.batraksOnWood.indexOf(this.cell.unit),1)};
        if (this.fatherFraction.selectUnits.indexOf(this.cell.unit) !== -1) {
          this.fatherFraction.selectUnits.splice(
            this.fatherFraction.selectUnits.indexOf(this.cell.unit),
            1
          );
        }
        this.readyToOut = true;

        this.cell.pen.push(this.cell.unit);
        this.cell.free = true;
        this.cell.unit = 0;
      }

      if (this.distroyTimer === 0) {
        this.cell.pen.splice(this.cell.pen.indexOf(arg), 1);
        this.cell = 0;
        this.target = 0;
        this.stepTakt = 0;
      }

      //console.log("pizdez");

      return;
    }

    //*/

    if ((this.x === this.cell.x && this.y === this.cell.y) || !this.cell) {
      this.iGetMyCell = true;
    }

    /////////////////////////////////////////////////////////////////////
    if (!this.cell) {
      this.iGetTarget = false;
      return;
    }

    if (this.waitTime && this.waitTime < 30) {
      this.waitTime--;
      return;
    }
    this.waitTime = 30;
    /////////////////////////////////////////////////////////////////////

    //if(this.iGetMyCell&&(this.x!==this.cell.x||this.y!==this.cell.y)){console.log("katastrofen!!!");};

    if (this.iDraw > 0) {
      this.iDraw--;
    }

    if (
      this.waitTime < 30 &&
      this.target &&
      (this.target.hp <= 0 || this.target.buildready <= 0) &&
      this.cell
    ) {
      this.target = 0;
      //this.fatherFraction

      //console.log("ok");

      this.speed = 2;
      this.updateSpeed();
    }

    if (this.stepTakt < 1 && this.stepTakt >= 0) {
      if (
        this.fatherFraction.control === "player" &&
        this.target &&
        this.iGetTarget &&
        this.target.buildready < this.target.hpfull &&
        this.target.buildready + 20 >= this.target.hpfull &&
        !this.target.voice_complite &&
        this.iDoTaktTimer % 4 === 0 &&
        this.iDoTakt === 4
      ) {
        this.target.voice_complite = true;

        this.voice = true;

        select_sound(this.cell.unit, "complite");
      }

      //////////////////////////////////////////
      /////////////////////////////////////////////

      if (this.iDoTakt === 0) {
        if (this.clickSave && this.cell && this.waitTime === 30) {
          if (this.clickSave.handCell) {
            if (
              !this.clickSave.handCell.continent ||
              this.clickSave.handCell.continent !== this.cell.continent
            ) {
              this.clickSave = 0;
            } else {
              this.target = 0;
              this.way = "go";
              this.handCell = this.clickSave.handCell;
              this.iGetTarget = false;
              this.myJoube = 0;
              this.iGoBuild = false;
            }
          } else if (this.clickSave.handTarget) {
            if (
              !this.clickSave.handTarget.cell.continent ||
              this.clickSave.handTarget.cell.continent !== this.cell.continent
            ) {
              this.clickSave = 0;
            } else {
              this.target = this.clickSave.handTarget;
              this.iGetTarget = false;
              this.myJoube = 0;
              this.iGoBuild = false;
              this.way = [];
            }
          }

          if (this.target && this.target.unitStatus === "life") {
            this.target = 0;
            this.way = "go";
            this.handCell = this.clickSave.handTarget.cell;
            this.iGetTarget = false;
            this.myJoube = 0;
            this.iGoBuild = false;
          }
        }

        this.clickSave = false;
      }

      if (
        this.handCell &&
        !this.handCell.free &&
        get_distanse_on_lineyka(this.cell, 50, this.handCell, 50) < 100
      ) {
        //console.log(get_distanse_on_lineyka(this.cell,50,this.handCell,50))

        this.handCell = 0;
        this.way = [];

        //this.target=0;
      }

      /////////////////////////////////////////////
      //////////////////////////////////////////////

      //if(	){
      //console.log("ok");
      //};

      if (
        this.saveX === this.x &&
        this.saveY === this.y &&
        this.myJoube !== "i build" &&
        this.cell
      ) {
        this.crashOut++;
      } else {
        this.crashOut = 0;
      }

      if (this.crashOut === 300) {
        this.target = 0;
        this.way = []; //console.log(this.persolalNumber+" ya otvis");
      }

      //if(this.crashOut>0){console.log("ojo");};

      this.saveX = this.x;
      this.saveY = this.y;

      //if(this.wood){this.target=0;return;};
      this.potentialTarget = 0;
      this.potentialWay = [];

      //if(this.info===10){console.log(arg);};
      //if(this.info){this.info--;};

      if (this.target) {
        if ((this.target.hp <= 0 || this.target.buildready <= 0) && this.cell) {
          this.target = 0;
          this.iGetTarget = false;
          this.iGoBuild = false;
          this.iDoTakt = 0;
          this.way = [];

          return;
          //console.log(this.cell.unit); pausa=1;
        } /////////////////??????new

        //if(this.holdToGo<10&&this.stepTakt!==0){console.log("ploho");};

        //////////////////////////////////////// kostyl protiv zameraniya

        /*


if(this.iGetTarget){
	this.holdToGo=10;	
	}
else{
	
	if(this.iStand){this.holdToGoMem++;}else{this.holdToGoMem=0;};
	
	
	if(this.holdToGoMem>500){console.log("kuku");this.target=0;this.holdToGoMem=0;return;};
	
};	
*/

        ////////////////////////////////////////

        //console.log("ok");

        ///////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////

        //this.myTargetCheck();

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //console.log(this.target.unitName);
        //if(this.persolalNumber===1433&&this.wood){console.log(this.target);};

        if (
          this.target.unitName === "barack" ||
          this.target.unitName === "kuznya" ||
          this.target.unitName === "ogreBase" ||
          this.target.unitName === "altar" ||
          this.target.unitName === "port" ||
          this.target.unitName === "oil_Ref" ||
          this.target.unitName === "foundry" ||
          this.target.unitName === "dragon_roost" ||
          this.target.unitName === "temple"
        ) {
          //

          if (!this.iGetTarget) {
            let valide = this.checkValideTarget();

            if (valide) {
              this.iGetTarget = this.checkGetTarget();

              if (this.iGetTarget) {
                this.way = [];
                //this.target.lesorub=arg;
              } else {
                if (!this.way.length || !this.way[this.way.length - 1].free) {
                  //console.log("way");

                  let iCanGet = this.getWayToTargetAndCheckGetting(arg);

                  if (!iCanGet) {
                    if (this.fatherFraction.control === "comp") {
                      this.cleared_way_ground();
                    } else {
                      //*
                      this.target.builders = [];

                      this.target = 0;
                      this.myJoube = 0;
                      this.way = [];
                      this.iGoBuild = false;
                      //*/
                    }
                  }

                  this.potentialTarget = 0;
                  this.potentialWay = [];
                }
              }
            } else {
              this.target = 0;

              this.way = [];
            }
          }

          if (this.iGetTarget) {
            //this.x=this.cell.x;this.y=this.cell.y;
            this.way = [];
          }

          if (
            (this.iGetTarget && this.iGetMyCell && this.target) ||
            this.myJoube === "i build"
          ) {
            if (
              this.target &&
              this.target.fatherFraction.control !== this.fatherFraction.control
            ) {
              this.target = 0;
              this.way = [];
              return;
            }

            if (
              (this.target.buildready < this.target.hpfull ||
                this.target.hp < this.target.hpfull) &&
              this.target.buildready > 0 &&
              this.target.hp > 0
            ) {
              this.myJoube = "i build";
              //this.moveVektor=this.saveMoveVektor;

              if (this.iDoTaktTimer === 100000) {
                this.iDoTaktTimer = 0;
              }

              //iStand
              //console.log(this.iDoTakt);

              if (this.iDoTaktTimer % 4 === 0) {
                this.iDoTakt++;
              }

              if (this.iDoTakt === 5) {
                this.iDoTakt = 0;

                if (this.target.buildready < this.target.hpfull) {
                  this.target.buildready += 20;
                } else if (this.target.hp < this.target.hpfull) {
                  this.target.hp += 20;
                }
              }
              this.iDoTaktTimer++;

              //console.log(this.iDoTakt);
            } else if (
              this.target &&
              this.target.buildready >= this.target.hpfull &&
              this.target.hp >= this.target.hpfull &&
              this.myJoube === "i build"
            ) {
              this.target.builders = [];

              this.target.buildready = this.target.hpfull;
              this.target.hp = this.target.hpfull;

              this.target = 0;
              this.myJoube = 0;
              this.iDoTakt = 0;
              this.iDoTaktTimer = -1;
              this.iGetTarget = false;
              this.animTimer = 0;
              this.iGoBuild = false;
            } else {
              this.target.hp = 0;
              this.target.buildready = 0;
              this.target = 0;
              this.myJoube = 0;
              this.iDoTakt = 0;
              this.iDoTaktTimer = -1;
              this.iGetTarget = false;
              this.animTimer = 0;
              this.iGoBuild = false;
            }
          }
        } else if (this.target.unitName === "lesopilka") {
          //console.log(this.cell.unit.target.unitName);pausa=true;

          if (!this.iGetTarget) {
            let valide = this.checkValideTarget();

            //console.log(valide);return

            if (valide) {
              //console.log(this.cell.unit.target.unitName);pausa=true;

              this.iGetTarget = this.checkGetTarget();

              if (this.iGetTarget) {
                this.way = [];
                //this.target.lesorub=arg;
                //this.moveVektor=
              } else {
                if (!this.way.length || !this.way[this.way.length - 1].free) {
                  //console.log("way");

                  let iCanGet = this.getWayToTargetAndCheckGetting(arg);

                  if (!iCanGet) {
                    if (this.fatherFraction.control === "comp") {
                      this.cleared_way_ground();
                    } else {
                      ///*
                      if (!this.iGoBuild) {
                        this.target = this.potentialTarget;
                        this.way = this.potentialWay;

                        this.finish = this.target.cell;
                        this.sosFin = this.target.cell;

                        if (this.target) {
                          this.iGetTarget = this.checkGetTarget();
                        }

                        if (this.iGetTarget) {
                          this.way = [];
                          //this.target.lesorub=arg;
                        }
                      } else {
                        this.target.builders = [];

                        this.target = 0;
                        this.myJoube = 0;
                        this.way = [];
                        this.iGoBuild = false;
                      }
                      //*/
                    }
                  } //

                  this.potentialTarget = 0;
                  this.potentialWay = [];
                }
              }
            } else {
              this.target = this.getTownH_or_Lesopilka(); //getMinDistanse(this.cell.unit,this.fatherFraction.townHolls);

              this.way = [];

              this.iGetTarget = false;
            }
          }

          if (this.iGetTarget) {
            this.x = this.cell.x;
            this.y = this.cell.y;
          }

          if (this.iGetTarget && this.iGetMyCell && this.target) {
            if (
              this.target.fatherFraction.control !== this.fatherFraction.control
            ) {
              this.target = 0;
              this.way = [];
            }
            //if(this.target.hp<=0||this.target.buildready<=0){this.target=0;this.myJoube=0;};

            if (
              this.target.hp < this.target.hpfull &&
              this.target.hp > 0 &&
              this.cell &&
              this.waitTime === 30 &&
              this.workTimeSahta === 100
            ) {
              this.myJoube = "i build";
              //this.moveVektor=this.saveMoveVektor;

              if (this.iDoTaktTimer === 100000) {
                this.iDoTaktTimer = 0;
              }

              //iStand
              //console.log(this.iDoTakt);

              if (this.iDoTaktTimer % 4 === 0) {
                this.iDoTakt++;
              }

              if (this.iDoTakt === 5) {
                this.iDoTakt = 0;

                this.target.hp += 20;
              }
              this.iDoTaktTimer++;

              return;
            }

            if (this.target.hp > this.target.hpfull) {
              this.target.hp = this.target.hpfull;
            }

            if (this.target.buildready < this.target.hpfull) {
              this.myJoube = "i build";
              //this.moveVektor=this.saveMoveVektor;

              if (this.iDoTaktTimer === 100000) {
                this.iDoTaktTimer = 0;
              }

              //iStand
              //console.log(this.iDoTakt);

              if (this.iDoTaktTimer % 4 === 0) {
                this.iDoTakt++;
              }

              if (this.iDoTakt === 5) {
                this.iDoTakt = 0;

                this.target.buildready += 20;
              }
              this.iDoTaktTimer++;

              //console.log(this.iDoTakt);
            } else if (
              this.target &&
              this.target.buildready >= this.target.hpfull &&
              this.myJoube === "i build"
            ) {
              this.target.builders = [];

              this.target.buildready = this.target.hpfull;
              //console.log(this.fatherFraction.buildingsInBuild[0].builders);

              //console.log(this.fatherFraction.buildingsInBuild);

              //if(!this.gold){
              this.target = 0;
              this.myJoube = 0;
              this.iDoTakt = 0;
              this.iDoTaktTimer = -1;
              this.iGetTarget = false;
              this.animTimer = 0;
              this.iGoBuild = false;
              //}
              //else{
              //	this.myJoube="shahter";

              //	};
            } else if (
              this.target &&
              this.target.buildready >= this.target.hpfull &&
              (this.wood || this.myJoube === "lesorub")

              //this.gold
            ) {
              //console.log(this.myJoube);
              //////////////////////////////////////////////////////////////

              if (this.target.workers.indexOf(arg) === -1 && this.hp > 0) {
                this.myJoube = "lesorub";

                for (let k = 0; k < this.contaktCells.length; k++) {
                  //if(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k])!==-1){
                  gameFielg[this.contaktCells[k].vertikal][
                    this.contaktCells[k].horizont
                  ].iContaktWith.splice(
                    gameFielg[this.contaktCells[k].vertikal][
                      this.contaktCells[k].horizont
                    ].iContaktWith.indexOf(this.contaktCells[k]),
                    1
                  );
                  //};
                }
                this.contaktCells = [];

                this.target.workers.push(arg);
                this.cell.unit = 0;
                this.cell.free = true;
                this.workTimeSahta--;
                this.way = [];
                this.cell = 0;
                //this.target.gold-=100;
                this.in_in = this.target;
                //this.way=[];wood
                //this.gold=0;
                if (
                  this.fatherFraction.activeBuildings.indexOf(this.target) ===
                  -1
                ) {
                  this.fatherFraction.activeBuildings.push(this.target);
                }

                this.wood = 0;

                this.fatherFraction.wood +=
                  100 + this.fatherFraction.lesopilkaBonusOnWood;
                this.fatherFraction.all_wood +=
                  100 + this.fatherFraction.lesopilkaBonusOnWood;
              } else if (this.workTimeSahta > 0) {
                if (this.target.workers.indexOf(arg) === 0) {
                  this.workTimeSahta--;
                }
              } else if (!this.workTimeSahta && this.waitTime === 30) {
                //console.log(this.townHolls[0]);
                // this.target.cellToOut

                let outCell = this.target.getOutCell();

                //console.log(this.waitTime);

                if (!outCell) {
                  outCell = this.target.extreamGetOutCell();
                }

                if (outCell) {
                  this.waitTime--;

                  //console.log(outCell.outPrioritet+" "+outCell.horizont);

                  this.cell = gameFielg[outCell.vertikal][outCell.horizont];

                  this.horizont = this.cell.horizont;
                  this.vertikal = this.cell.vertikal;
                  this.x = this.cell.x;
                  this.y = this.cell.y;
                  this.cell.unit = arg;
                  this.cell.free = false;

                  this.cellUpdate();
                  //this.animY=0;

                  this.moveVektor = outCell.moveVektorOut;

                  if (!this.moveVektor) {
                    this.moveVektor = "up";
                  }
                }
                //console.log(this.)

                //console.log(arg.horizont+" "+this.horizont)	;
              } else if (!this.workTimeSahta && this.waitTime < 30) {
                this.waitTime--;

                if (this.waitTime === 0) {
                  if (this.target.workers.length > 1) {
                    this.target.workers[
                      this.target.workers.indexOf(arg) + 1
                    ].workTimeSahta = 30; //////////////////////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                  }

                  this.target.workers.splice(
                    this.target.workers.indexOf(arg),
                    1
                  );

                  this.target = getMinDistanse(
                    arg,
                    allContinents[this.fatherFraction.continent].woods
                  );
                  this.myJoube = "lesorub";
                  this.iGetTarget = false;
                  this.workTimeSahta = 100;
                  this.waitTime = 30;
                  this.speed = 2;
                  this.updateSpeed();

                  //console.log(this.fatherFraction.gold);
                  //console.log(batrak.target);

                  //this.activeUnits.push(batrak);/////////////////////////////
                  //console.log(this.activeUnits[0]);

                  //console.log(this.freeBatraks.indexOf(batrak));

                  //if(this.freeBatraks.indexOf(batrak)!==-1){
                  //	this.freeBatraks.splice(this.freeBatraks.indexOf(batrak),1);
                  //};
                }
              }

              ////////////////////////////////////////////////////////
            }
          }
        } else if (this.target.unitName === "wood") {
          //cellUpdate

          //console.log("ok");

          if (this.wood) {
            //this.target=getMinDistanse(arg,this.fatherFraction.townHolls);
            this.target = this.getTownH_or_Lesopilka();
            this.myJoube = "lesorub";
            this.way = [];

            //this.prog(arg);

            return;
          }

          if (!this.iGetTarget) {
            let valide = this.checkValideTarget();

            //console.log(valide);

            if (valide) {
              this.iGetTarget = this.checkGetTarget();

              if (this.iGetTarget) {
                this.way = [];
                this.target.lesorub = arg;
              } else {
                if (!this.way.length || !this.way[this.way.length - 1].free) {
                  let iCanGet = this.getWayToTargetAndCheckGetting(arg);

                  if (!iCanGet) {
                    //console.log("way");

                    this.target = this.potentialTarget;
                    this.way = this.potentialWay;

                    this.finish = this.target.cell;
                    this.sosFin = this.target.cell;

                    if (this.target) {
                      this.iGetTarget = this.checkGetTarget();
                    }
                    //if(this.persolalNumber===1507){console.log(arg);console.log(this.way);console.log(this.target.isBlocked());console.log("tik "+tik);pausa=1;};

                    if (this.iGetTarget) {
                      this.way = [];
                      this.target.lesorub = arg;
                    }
                    //return;
                  }

                  this.potentialTarget = 0;
                  this.potentialWay = [];
                }
              }
            } else {
              this.target = getMinDistanse(
                this.cell.unit,
                allContinents[this.cell.continent].woods
              );

              this.way = [];

              this.iGetTarget = false;

              //this.prog(arg);

              //return;

              //////////////////////////////////

              /////////////////////////
            }
          }

          if (this.iGetTarget) {
            this.x = this.cell.x;
            this.y = this.cell.y;
          }

          if (
            (this.iGetTarget && this.iGetMyCell && this.target) ||
            this.myJoube === "i build"
          ) {
            if (freeLandObjects.indexOf(this.target) === -1) {
              freeLandObjects.push(this.target);
            }

            //if(this.myJoube!=="i build"){this.holdToGoMem++;}else{this.holdToGoMem=0;};
            //if(this.holdToGoMem>=2){this.holdToGoMem=0;console.log(arg);};

            //this.target.lesorub=arg;

            if (this.gold) {
              this.gold = 0;
            }

            this.myJoube = "i build";
            //this.moveVektor=this.saveMoveVektor;

            if (this.iDoTaktTimer === 100000) {
              this.iDoTaktTimer = 0;
            }

            //iStand
            //console.log(this.iDoTakt);

            if (this.iDoTaktTimer % 4 === 0) {
              if (this.iDoTakt === 3) {
                this.tyuk = true;
              }

              this.iDoTakt++;
            }

            if (this.iDoTakt === 5) {
              //this.tyuk=true;

              this.iDoTakt = 0;

              this.target.hp -= 20;

              this.target.vibro = 10;

              if (activeFreeLandObjects.indexOf(this.target) === -1) {
                activeFreeLandObjects.push(this.target);
              }
            }
            this.iDoTaktTimer++;

            //console.log(this.target.hp);

            if (this.target.hp <= 0) {
              this.target.cell.pen.push(this.target); // dlya otrisovki

              this.target.hp = 0;

              woods.splice(woods.indexOf(this.target), 1);

              //if(activeFreeLandObjects.indexOf(this.target)===-1){activeFreeLandObjects.push(this.target);};

              this.wood = 100;

              this.target = this.getTownH_or_Lesopilka(); //getMinDistanse(arg,this.fatherFraction.townHolls);/// poka tak

              this.myJoube = "lesorub";
              this.iGetTarget = false;
              this.workTimeSahta = 100;
              this.waitTime = 30;
              this.speed = 1.7;
              this.updateSpeed();

              //console.log(this.target);

              //return;
            }
          }
        } else if (
          this.target.unitName === "farm" ||
          this.target.unitName === "tower"
        ) {
          if (!this.iGetTarget) {
            let valide = this.checkValideTarget();

            //console.log(valide);

            if (valide) {
              this.iGetTarget = this.checkGetTarget();

              if (this.iGetTarget) {
                this.way = [];
                //this.target.lesorub=arg;
              } else {
                if (!this.way.length || !this.way[this.way.length - 1].free) {
                  //console.log("way");

                  let iCanGet = this.getWayToTargetAndCheckGetting(arg);

                  if (!iCanGet) {
                    if (this.fatherFraction.control === "comp") {
                      this.cleared_way_ground();
                    } else {
                      this.target.builders = [];

                      this.target = 0;
                      this.myJoube = 0;
                      this.way = [];
                      this.iGoBuild = false;
                    }
                  }

                  this.potentialTarget = 0;
                  this.potentialWay = [];
                }
              }
            } else {
              this.target = 0;

              this.way = [];
            }
          }

          if (this.iGetTarget) {
            //this.x=this.cell.x;this.y=this.cell.y;
            this.way = [];
          }

          if (
            (this.iGetTarget && this.iGetMyCell && this.target) ||
            this.myJoube === "i build"
          ) {
            if (
              this.target &&
              this.target.fatherFraction.control !== this.fatherFraction.control
            ) {
              this.target = 0;
              this.way = [];
            }

            if (
              this.target &&
              (this.target.buildready < this.target.hpfull ||
                this.target.hp < this.target.hpfull) &&
              this.target.buildready > 0 &&
              this.target.hp > 0
            ) {
              this.myJoube = "i build";
              //this.moveVektor=this.saveMoveVektor;

              if (this.iDoTaktTimer === 100000) {
                this.iDoTaktTimer = 0;
              }

              //iStand
              //console.log(this.iDoTakt);

              if (this.iDoTaktTimer % 4 === 0) {
                this.iDoTakt++;
              }

              if (this.iDoTakt === 5) {
                this.iDoTakt = 0;

                if (this.target.buildready < this.target.hpfull) {
                  this.target.buildready += 20;
                } else if (this.target.hp < this.target.hpfull) {
                  this.target.hp += 20;
                }
              }
              this.iDoTaktTimer++;

              //console.log(this.iDoTakt);
            } else if (
              this.target &&
              this.target.buildready >= this.target.hpfull &&
              this.target.hp >= this.target.hpfull &&
              this.myJoube === "i build"
            ) {
              this.target.builders = [];

              this.target.buildready = this.target.hpfull;
              this.target.hp = this.target.hpfull;

              this.target = 0;
              this.myJoube = 0;
              this.iDoTakt = 0;
              this.iDoTaktTimer = -1;
              this.iGetTarget = false;
              this.animTimer = 0;
              this.iGoBuild = false;
            } else {
              this.target.hp = 0;
              this.target.buildready = 0;
              this.target = 0;
              this.myJoube = 0;
              this.iDoTakt = 0;
              this.iDoTaktTimer = -1;
              this.iGetTarget = false;
              this.animTimer = 0;
              this.iGoBuild = false;
            }
          }
        } else if (this.target.unitName === "townHoll") {
          //if(this.persolalNumber===1433&&this.wood){console.log(this.cell.unit);};
          //if(this.iSee===0){console.log("ok");};

          if (!this.iGetTarget) {
            //if(!this.way.length){console.log("here");};

            let valide = this.checkValideTarget();

            //console.log(valide);

            if (valide) {
              this.iGetTarget = this.checkGetTarget();

              if (this.iGetTarget) {
                this.way = [];
                //this.target.lesorub=arg;
                //this.moveVektor=
              } else {
                if (!this.way.length || !this.way[this.way.length - 1].free) {
                  //console.log("way");

                  let iCanGet = this.getWayToTargetAndCheckGetting(arg);

                  if (!iCanGet) {
                    if (this.fatherFraction.control === "comp") {
                      this.cleared_way_ground();
                    } else {
                      if (!this.iGoBuild) {
                        this.target = this.potentialTarget;
                        this.way = this.potentialWay;

                        this.finish = this.target.cell;
                        this.sosFin = this.target.cell;

                        if (this.target) {
                          this.iGetTarget = this.checkGetTarget();
                        }

                        if (this.iGetTarget) {
                          this.way = [];
                          //this.target.lesorub=arg;
                        }
                      } else {
                        this.target.builders = [];

                        this.target = 0;
                        this.myJoube = 0;
                        this.way = [];
                        this.iGoBuild = false;
                      }
                    }
                  } //

                  this.potentialTarget = 0;
                  this.potentialWay = [];
                }
              }
            } else {
              this.target = getMinDistanse(
                this.cell.unit,
                this.fatherFraction.townHolls
              );

              this.way = [];

              this.iGetTarget = false;
            }
          }

          if (this.iGetTarget) {
            this.x = this.cell.x;
            this.y = this.cell.y;
          }

          if (this.iGetTarget && this.iGetMyCell && this.target) {
            if (
              this.target.fatherFraction.fraction !==
              this.fatherFraction.fraction
            ) {
              this.target = 0;
              this.way = [];
            }
            //if(this.target.hp<=0||this.target.buildready<=0){this.target=0;this.myJoube=0;};

            if (
              this.target.hp < this.target.hpfull &&
              this.target.hp > 0 &&
              this.cell &&
              this.waitTime === 30 &&
              this.workTimeSahta === 100
            ) {
              this.myJoube = "i build";
              //this.moveVektor=this.saveMoveVektor;

              if (this.iDoTaktTimer === 100000) {
                this.iDoTaktTimer = 0;
              }

              //iStand
              //console.log(this.iDoTakt);

              if (this.iDoTaktTimer % 4 === 0) {
                this.iDoTakt++;
              }

              if (this.iDoTakt === 5) {
                this.iDoTakt = 0;

                this.target.hp += 20;
              }
              this.iDoTaktTimer++;

              return;
            }

            if (this.target.hp > this.target.hpfull) {
              this.target.hp = this.target.hpfull;
            }

            if (this.target.buildready < this.target.hpfull) {
              this.myJoube = "i build";
              //this.moveVektor=this.saveMoveVektor;

              if (this.iDoTaktTimer === 100000) {
                this.iDoTaktTimer = 0;
              }

              //iStand
              //console.log(this.iDoTakt);

              if (this.iDoTaktTimer % 4 === 0) {
                this.iDoTakt++;
              }

              if (this.iDoTakt === 5) {
                this.iDoTakt = 0;

                this.target.buildready += 20;
              }
              this.iDoTaktTimer++;

              //console.log(this.iDoTakt);
            } else if (
              this.target &&
              this.target.buildready >= this.target.hpfull &&
              this.myJoube === "i build"
            ) {
              this.target.builders = [];

              this.target.buildready = this.target.hpfull;
              //console.log(this.fatherFraction.buildingsInBuild[0].builders);

              //console.log(this.fatherFraction.buildingsInBuild);

              //if(!this.gold){
              this.target = 0;
              this.myJoube = 0;
              this.iDoTakt = 0;
              this.iDoTaktTimer = -1;
              this.iGetTarget = false;
              this.animTimer = 0;
              this.iGoBuild = false;
              //}
              //else{
              //	this.myJoube="shahter";

              //	};
            } else if (
              this.target &&
              this.target.buildready >= this.target.hpfull &&
              (this.gold || this.wood)

              //this.gold
            ) {
              //console.log(this.myJoube);
              //////////////////////////////////////////////////////////////

              if (this.target.workers.indexOf(arg) === -1 && this.hp > 0) {
                for (let k = 0; k < this.contaktCells.length; k++) {
                  //if(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k])!==-1){
                  gameFielg[this.contaktCells[k].vertikal][
                    this.contaktCells[k].horizont
                  ].iContaktWith.splice(
                    gameFielg[this.contaktCells[k].vertikal][
                      this.contaktCells[k].horizont
                    ].iContaktWith.indexOf(this.contaktCells[k]),
                    1
                  );
                  //};
                }
                this.contaktCells = [];

                this.target.workers.push(arg);
                this.cell.unit = 0;
                this.cell.free = true;
                this.workTimeSahta--;
                this.way = [];
                this.cell = 0;
                this.in_in = this.target;
                //this.target.gold-=100;
                if (
                  this.fatherFraction.activeBuildings.indexOf(this.target) ===
                  -1
                ) {
                  this.fatherFraction.activeBuildings.push(this.target);
                }
                //this.way=[];

                if (this.wood) {
                  this.fatherFraction.wood +=
                    100 + this.fatherFraction.lesopilkaBonusOnWood;
                  this.fatherFraction.all_wood +=
                    100 + this.fatherFraction.lesopilkaBonusOnWood;
                  this.wood = 0;
                  this.myJoube = "lesorub";
                } else {
                  this.gold = 0;
                  this.fatherFraction.gold +=
                    100 + this.fatherFraction.fractionLevelBonusOnGold;
                  this.fatherFraction.all_gold +=
                    100 + this.fatherFraction.fractionLevelBonusOnGold;
                  this.myJoube = "shahter";
                }
              } else if (this.workTimeSahta > 0) {
                if (this.target.workers.indexOf(arg) === 0) {
                  this.workTimeSahta--;
                }
              } else if (!this.workTimeSahta && this.waitTime === 30) {
                //console.log(this.townHolls[0]);return
                // this.target.cellToOut

                let outCell = this.target.getOutCell();

                //console.log(this.waitTime);

                if (!outCell) {
                  outCell = this.target.extreamGetOutCell();
                }

                if (outCell) {
                  this.waitTime--;

                  //console.log(outCell.outPrioritet+" "+outCell.horizont);

                  this.cell = gameFielg[outCell.vertikal][outCell.horizont];

                  this.horizont = this.cell.horizont;
                  this.vertikal = this.cell.vertikal;
                  this.x = this.cell.x;
                  this.y = this.cell.y;
                  this.cell.unit = arg;
                  this.cell.free = false;

                  this.cellUpdate();
                  //this.animY=0;

                  this.moveVektor = outCell.moveVektorOut;

                  if (!this.moveVektor) {
                    this.moveVektor = "up";
                  }
                }
                //console.log(this.)

                //console.log(arg.horizont+" "+this.horizont)	;
              } else if (!this.workTimeSahta && this.waitTime < 30) {
                this.waitTime--;

                if (this.waitTime === 0) {
                  if (this.target.workers.length > 1) {
                    this.target.workers[
                      this.target.workers.indexOf(arg) + 1
                    ].workTimeSahta = 30; //////////////////////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                  }

                  this.target.workers.splice(
                    this.target.workers.indexOf(arg),
                    1
                  );

                  if (this.myJoube === "shahter") {
                    this.myJoube = "shahter";
                    this.target = getMinDistanse(
                      arg,
                      allContinents[this.fatherFraction.continent].shahts
                    );
                    this.iGetTarget = false;
                    this.workTimeSahta = 100;
                    this.waitTime = 30;
                    this.speed = 2;
                    this.updateSpeed();
                    this.iSee = "no";
                  } else {
                    this.target = getMinDistanse(
                      arg,
                      allContinents[this.fatherFraction.continent].woods
                    );
                    this.myJoube = "lesorub";
                    this.iGetTarget = false;
                    this.workTimeSahta = 100;
                    this.waitTime = 30;
                    this.speed = 2;
                    this.updateSpeed();
                  }

                  //

                  //console.log(this.fatherFraction.gold);
                  //console.log(batrak.target);

                  //this.activeUnits.push(batrak);/////////////////////////////
                  //console.log(this.activeUnits[0]);

                  //console.log(this.freeBatraks.indexOf(batrak));

                  //if(this.freeBatraks.indexOf(batrak)!==-1){
                  //	this.freeBatraks.splice(this.freeBatraks.indexOf(batrak),1);
                  //};
                }
              }

              ////////////////////////////////////////////////////////
            }
          }
        } else if (this.target.unitName === "shahta") {
          //if(this.hp<=0){console.log("huynya");return};

          if (
            this.gold &&
            this.workTimeSahta === 100 &&
            this.waitTime === 30 &&
            this.cell
          ) {
            this.target = getMinDistanse(arg, this.fatherFraction.townHolls);
            this.myJoube = "shahter";
            this.way = [];

            //this.prog(arg);

            return;
          }

          if (!this.iGetTarget) {
            let valide = this.checkValideTarget();

            //console.log(valide);

            if (valide) {
              this.iGetTarget = this.checkGetTarget();

              if (this.iGetTarget) {
                this.way = [];
                //this.target.lesorub=arg;
              } else {
                if (!this.way.length || !this.way[this.way.length - 1].free) {
                  //console.log("way");
                  this.potentialTarget = 0;
                  this.potentialWay = [];

                  let iCanGet = this.getWayToTargetAndCheckGetting(arg);

                  if (!iCanGet) {
                    if (this.fatherFraction.control === "comp") {
                      this.cleared_way_ground();
                    } else {
                      this.target = this.potentialTarget;
                      this.way = this.potentialWay;

                      this.finish = this.target.cell;
                      this.sosFin = this.target.cell;

                      if (this.target) {
                        this.iGetTarget = this.checkGetTarget();
                      }

                      if (this.iGetTarget) {
                        this.way = [];
                        //this.target.lesorub=arg;
                      }
                    }
                  }

                  this.potentialTarget = 0;
                  this.potentialWay = [];
                }
              }
            } else {
              this.target = getMinDistanse(
                this.cell.unit,
                allContinents[this.fatherFraction.continent].shahts
              );

              this.way = [];

              this.iGetTarget = false;
            }
          }

          /*
if(this.target.unitName!=="shahta"){/////////////////////////  kostyl
	
	console.log(this.target);
	
	this.iGetTarget=false;
	this.target=getMinDistanse(this.cell.unit,shahts);	

this.way=[];	

//this.prog(arg);
		
	return;
	
	};///////////////////////////////////////////////////////////////////
	*/

          if (this.iGetTarget) {
            this.x = this.cell.x;
            this.y = this.cell.y;
          }

          if (this.iGetTarget && this.iGetMyCell && this.target) {
            if (!this.target.gold && this.target.workers.indexOf(arg) === -1) {
              this.target = 0;
              this.iGetTarget = false;
              //console.log("stop");

              return;
            }

            //console.log(this.workTimeSahta);

            if (
              this.target.workers.indexOf(arg) === -1 &&
              this.target.gold > 0
            ) {
              for (let k = 0; k < this.contaktCells.length; k++) {
                //if(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k])!==-1){
                gameFielg[this.contaktCells[k].vertikal][
                  this.contaktCells[k].horizont
                ].iContaktWith.splice(
                  gameFielg[this.contaktCells[k].vertikal][
                    this.contaktCells[k].horizont
                  ].iContaktWith.indexOf(this.contaktCells[k]),
                  1
                );
                //};
              }
              this.contaktCells = [];

              this.target.workers.push(arg);
              this.cell.unit = 0;
              this.cell.free = true;
              this.workTimeSahta--;
              this.target.gold -= 100;
              this.gold = 100;
              this.wood = 0;
              this.way = [];
              this.cell = 0;
              this.in_in = this.target;

              if (activeFreeLandObjects.indexOf(this.target) === -1) {
                activeFreeLandObjects.push(this.target);
              }

              return;

              //this.etHome=true;

              //if(activeFreeLandObjects.indexOf(this.target)===-1){

              //	activeFreeLandObjects.push(this.target);

              //};
            }
            ///*
            else if (this.workTimeSahta > 0) {
              if (this.target.workers.indexOf(arg) === 0) {
                this.workTimeSahta--;
              }
            } else if (!this.workTimeSahta && this.waitTime === 30) {
              //console.log(this.townHolls[0]);
              // this.target.cellToOut

              let outCell = this.target.getOutCell();

              //console.log(this.waitTime);
              if (!outCell) {
                outCell = this.target.extreamGetOutCell();
              }

              if (outCell) {
                this.waitTime--;

                //console.log(outCell.outPrioritet+" "+outCell.horizont);

                this.cell = gameFielg[outCell.vertikal][outCell.horizont];

                this.horizont = this.cell.horizont;
                this.vertikal = this.cell.vertikal;
                this.x = this.cell.x;
                this.y = this.cell.y;
                this.cell.unit = arg;
                this.cell.free = false;

                this.cellUpdate();
                //this.animY=525;

                this.moveVektor = outCell.moveVektorOut;

                if (!this.moveVektor) {
                  this.moveVektor = "up";
                }
              }
              //console.log(this.moveVektor)

              //console.log(arg.horizont+" "+this.horizont)	;
            } else if (!this.workTimeSahta && this.waitTime < 30) {
              this.waitTime--;

              if (this.waitTime === 0) {
                if (
                  this.target.gold === 0 &&
                  this.target.workers.length === 1 &&
                  this.target.hp > 0
                ) {
                  this.target.hp = 0;
                  activeFreeLandObjects.push(this.target);
                  //freeLandObjects.splice(freeLandObjects.indexOf(this.target),1);
                  //console.log("nononon");
                }

                if (this.target.workers.length > 1) {
                  this.target.workers[
                    this.target.workers.indexOf(arg) + 1
                  ].workTimeSahta = 30; ///////////////////////////////////////!!!!!!!!!!!!!!!!!!
                }

                this.target.workers.splice(this.target.workers.indexOf(arg), 1);

                this.target = getMinDistanse(
                  arg,
                  this.fatherFraction.townHolls
                ); //this.fatherFraction.townHolls[0];
                this.iGetTarget = false;
                this.workTimeSahta = 100;
                this.waitTime = 30;
                this.speed = 1.7;
                this.updateSpeed();
                this.iSee = "no";
              }
            }

            //*/
            //this.workTimeSahta--;
            //console.log(this.target.workers[0]);
          }
        } //shahta
      }

      this.nockNokc = false;
    }
  }

  //console.log(this.workTimeSahta)

  //if(this.info===10){console.log(arg);};

  if (this.iSee === 0) {
    this.iSee = 350;
  }
  if (this.iSee === "no") {
    this.iSee = 0;
  }

  //console.log("ok");

  this.goWay(arg);
  //this.iStand=false;

  //if(this.info===10){console.log(arg);};

  //if(this.nockNokc){this.iStand=true;};
  //this.nockNokc=false;
  //};
};

Unit.prototype.checkNextSweemeCell = function (cell) {
  let nextCell_ok = 0;

  //let alienWay=[];

  if (this.way.length) {
    let vertikal = this.way[this.way.length - 1].vertikal;
    let horizont = this.way[this.way.length - 1].horizont;

    for (let v = vertikal - 1; v <= vertikal; v++) {
      let brc;

      for (let h = horizont; h <= horizont + 1; h++) {
        if (
          gameFielg[v] &&
          gameFielg[v][h] &&
          gameFielg[v][h].water &&
          !gameFielg[v][h].vossalObj &&
          (!gameFielg[v][h].unit ||
            (gameFielg[v][h].unit &&
              gameFielg[v][h].unit.persolalNumber === this.persolalNumber))
        ) {
          nextCell_ok++;
        } else {
          brc = true;
          break;
        }
      }

      if (brc) {
        break;
      }
    }
  }

  return nextCell_ok;
};

Unit.prototype.checkNextDragCell = function () {
  let nextCell_ok = 0;

  //let alienWay=[];

  if (this.way.length) {
    let vertikal = this.way[this.way.length - 1].vertikal;
    let horizont = this.way[this.way.length - 1].horizont;

    for (let v = vertikal - 1; v <= vertikal; v++) {
      let brc;

      for (let h = horizont; h <= horizont + 1; h++) {
        if (
          gameFielg[v] &&
          gameFielg[v][h] &&
          (!gameFielg[v][h].dragoon ||
            (gameFielg[v][h].dragoon &&
              gameFielg[v][h].dragoon.persolalNumber === this.persolalNumber))
        ) {
          nextCell_ok++;
        } else {
          brc = true;
          break;
        }
      }

      if (brc) {
        break;
      }
    }
  }

  return nextCell_ok;
};

Water_sled.prototype.prog = function (mySelf, father) {
  this.timer++;

  if (this.father.type !== "turtle") {
    this.gabarit += 2;
  } else {
    this.gabarit += 1;
  }

  this.alf -= 0.015;

  if (this.timer % 3 === 0) {
    this.animY += 100;
    if (this.animY === 500) {
      this.animY = 0;
      this.animX += 100;
    }
  }

  if (this.timer === 60) {
    this.cell.water_sleds.splice(this.cell.water_sleds.indexOf(mySelf), 1);

    this.readyToOut = true;

    //console.log(this.alf);
  }
};

Water_sled.prototype.draw = function () {
  ctx.globalAlpha = this.alf;

  ctx.save();
  ctx.translate(this.x + removeX, this.y + removeY);
  ctx.rotate(this.conor);

  ctx.drawImage(
    water_sled,
    this.animX,
    this.animY,
    100,
    100,
    -this.gabarit / 2,
    -this.gabarit / 2,
    this.gabarit,
    this.gabarit
  );

  ctx.restore();
  //console.log(this.conor);
  ctx.globalAlpha = 1;
};

water_sled_create = function (father) {
  //let vertikal=father.y/50;
  //let horizont=(father.x+50)/50;

  let gabarit = 100;

  if (father.type === "turtle") {
    gabarit = 1;
  }

  let cell = father.cell; //gameFielg[vertikal][horizont];
  //type,cell,conor,x,y

  let obj = new Water_sled(
    1,
    cell,
    Math.atan2(father.vSp, father.gSp),
    father.x + 50,
    father.y,
    gabarit
  );

  obj.father = father;

  water_sleds.push(obj);

  cell.water_sleds.push(obj);

  obj.alf = 1;
};

Unit.prototype.ground_panick = function (agressor) {
  if (!agressor.cell) {
    return;
  }

  let cells = [];

  for (let i = this.vertikal - 3; i <= this.vertikal + 3; i++) {
    for (let k = this.horizont - 3; k <= this.horizont + 3; k++) {
      if (gameFielg[i] && gameFielg[i][k] && gameFielg[i][k].free) {
        cells.push(gameFielg[i][k]);
      }
    }
  }

  let max = [];

  for (let i = 0; i < cells.length; i++) {
    let dis = get_distanse_on_lineyka(
      agressor.cell,
      agressor.gabarit,
      cells[i],
      50
    );

    if (!max.length || max[0] < dis) {
      max = [dis, cells[i]];
    }
  }

  if (max.length && this.cell) {
    this.clickSave = new ClickSave(0, max[1]);

    if (this.warrior) {
      //this.ii_saveCell=this.born_cell;
    }

    if (!this.active) {
      this.fatherFraction.activeUnits.push(this.cell.unit);
      this.active = true;
    }
  }
};

Unit.prototype.sea_panick = function (agressor, born_cell) {
  if (!agressor || !agressor.cell) {
    return;
  }

  let cells = [];

  for (let i = this.vertikal - 10; i <= this.vertikal + 10; i++) {
    for (let k = this.horizont - 10; k <= this.horizont + 10; k++) {
      if (
        gameFielg[i] &&
        gameFielg[i][k] &&
        this.good_cell_for_ship(gameFielg[i][k])
      ) {
        cells.push(gameFielg[i][k]);
      }
    }
  }

  let max = [];

  for (let i = 0; i < cells.length; i++) {
    let dis = get_distanse_on_lineyka(
      agressor.cell,
      agressor.gabarit,
      cells[i],
      100
    );

    if (!max.length || max[0] < dis) {
      max = [dis, cells[i]];
    }
  }

  if (max.length && this.cell) {
    //console.log("go");

    this.clickSave = new ClickSave(0, max[1]);
    this.born_cell = max[1];

    if (this.warrior) {
      this.ii_saveCell = this.born_cell;
    }

    if (!this.active) {
      this.fatherFraction.activeUnits.push(this.cell.unit);
      this.active = true;
    }
  }
};

Unit.prototype.cleared_way_ground = function () {
  for (let i = this.vertikal - 3; i <= this.vertikal + 3; i++) {
    for (let k = this.horizont - 3; k <= this.horizont + 3; k++) {
      if (
        gameFielg[i] &&
        gameFielg[i][k] &&
        gameFielg[i][k].unit &&
        gameFielg[i][k].unit.cell &&
        gameFielg[i][k].unit.gabarit === 50 &&
        !gameFielg[i][k].unit.sweeme &&
        !gameFielg[i][k].unit.neitral &&
        gameFielg[i][k].unit.fatherFraction.fraction ===
          this.fatherFraction.fraction &&
        !gameFielg[i][k].unit.active
      ) {
        let unit = gameFielg[i][k].unit;

        if (unit && this.cell.unit) {
          unit.ground_panick(this.cell.unit);
        }
      }
    }
  }
};

Unit.prototype.cleared_way = function () {
  for (let i = this.vertikal - 6; i <= this.vertikal + 7; i++) {
    for (let k = this.horizont - 5; k <= this.horizont + 6; k++) {
      if (
        gameFielg[i] &&
        gameFielg[i][k] &&
        gameFielg[i][k].unit &&
        gameFielg[i][k].unit.cell &&
        gameFielg[i][k].unit.sweeme &&
        !gameFielg[i][k].unit.neitral &&
        gameFielg[i][k].unit.fatherFraction.fraction ===
          this.fatherFraction.fraction &&
        !gameFielg[i][k].unit.active &&
        gameFielg[i][k].unit.unitStatus === "life"
      ) {
        let unit = gameFielg[i][k].unit;

        if (this.cell.unit) {
          unit.sea_panick(this.cell.unit, true);
        }
      }
    }
  }
};

Unit.prototype.goWaySweeme = function (arg) {
  //speed

  if (this.stepTakt < 1 && this.stepTakt >= 0) {
    this.iGetMyCell = true;

    this.hotCell = this.cell;

    this.x = this.cell.x;
    this.y = this.cell.y;

    if (!this.way.length) {
      this.iStand = true;
    }

    if (this.iGetTarget) {
      this.way = [];
      this.stepTakt = 0;
      this.iStand = true;
      return;
    }

    //if(!this.handCell&&!this.target&&!this.handTarget){this.way=[];this.stepTakt=0;};

    //if(this.way!=="go"&&!this.way.length&&!this.target&&!this.handTarget){this.stopGetTarget=0;};

    let nextCell_ok;

    if (this.way !== "go") {
      nextCell_ok = this.checkNextSweemeCell();
    }

    //////////////////////////////////

    if (this.fatherFraction.control === "comp") {
      if (
        this.type !== "transport" &&
        this.way !== "go" &&
        this.way.length &&
        this.handCell &&
        nextCell_ok < 4 &&
        get_distanse_on_lineyka(this.cell, 100, this.handCell, 100) <= 1000
      ) {
        this.way = [];
        this.handCell = 0;

        //console.log("here");

        return;
      }
    }

    //////////////////////////////////////////////

    let deep = glob_deep;

    if (
      this.way === "go" ||
      (this.way.length &&
        (!nextCell_ok || nextCell_ok < 4) &&
        (!this.target ||
          this.type === "distroer" ||
          this.type === "linkor" ||
          this.type === "turtle") &&
        (!this.handTarget ||
          this.type === "oil_tanker" ||
          this.type === "distroer" ||
          this.type === "linkor" ||
          this.type === "turtle"))
      //&&this.handCell
    ) {
      //console.log("sdjfgidhf");

      //let a=Math.floor(Math.random()*2);

      //if(a){a=Math.floor(Math.random()*1000);};

      let noFree = 300; //+a;

      this.finish = this.spe; //this.way[0];
      this.sosFin = this.spe; //this.way[0];

      let res;

      if (this.way === "go") {
        if (this.target) {
          this.finish = this.target.cell;
          this.sosFin = this.target.cell;
          this.spe = this.target.cell;
          res = true;
        } else if (this.handCell) {
          this.finish = this.handCell;
          this.sosFin = this.handCell;
          this.spe = this.handCell;
          res = true;
        } else if (this.handTarget) {
          this.finish = this.handTarget.cell;
          this.sosFin = this.handTarget.cell;
          this.spe = this.handTarget.cell;
          res = true;
        }
      }

      this.way = [];
      ////*
      //console.log("hren");
      //getWay=function(arg,noFree,deep,target)
      // getVektors=function(arg,target,unit)

      //if(nextCell_ok<4){deep=1000;};

      if (
        this.spe &&
        get_distanse_on_lineyka(this.cell, 100, this.spe, 50) <= 500
      ) {
        deep = 200;
        //console.log(this.type);
      }

      let dis;

      if (this.handCell) {
        dis = get_distanse_on_lineyka(this.cell, 100, this.spe, 50);

        deep = Math.floor(dis) * 2;
      }

      /////////////////////////////////////////// trans

      if (this.fatherFraction.control === "comp") {
        if (this.type === "transport") {
          this.trans_can_get = false;
        }
        //console.log(this.trans_can_get);
      }

      ///////////////////////////

      if (this.finish && this.cell.unit) {
        getWay(this.cell.unit, noFree, deep);
      }

      //////////////////////////////////////	trans
      if (this.fatherFraction.control === "comp") {
        if (this.type === "transport") {
          if (!this.trans_can_get) {
            this.cleared_way();
          }
        } else if (this.type === "oil_tanker") {
          if (!this.tanker_iCanGet) {
            this.cleared_way();
            //console.log("ok");
          }
        }
        //console.log(this.trans_can_get);
      }
      //////////////////////////////////////

      //console.log("here");

      if (
        this.way.length &&
        this.way[this.way.length - 1].persolalNumber ===
          this.cell.persolalNumber
      ) {
        this.way = [];
      }
      if (this.type === "transport" && this.landing && !this.iCanGet) {
        this.landing = false;
      }

      this.iCanGet = false;

      if (res) {
        return;
      }

      //console.log(noFree.length);
    }

    if (
      this.way.length &&
      nextCell_ok === 4
      //&&this.checkValideFreeCell()
    ) {
      //if(this.type===2&&!this.way[this.way.length-1].free){console.log("ggggggggggggggggggggggggggggggggg");};
      //console.log(this.persolalNumber); pausa=1;

      //speed=this.speed-(this.speed*this.stepTakt);
      let speedKoof = 1 - this.stepTakt;

      //if(this.checkValideFreeCell()){

      this.iGetMyCell = false;

      this.iStand = false;

      //this.getGsp_Vsp();

      this.updateSpeed();
      this.getGsp_Vsp();

      for (let v = this.vertikal - 1; v <= this.vertikal; v++) {
        for (let h = this.horizont; h <= this.horizont + 1; h++) {
          gameFielg[v][h].unit = false;
        }
      }

      this.cell = this.way[this.way.length - 1];
      //this.hotCell=this.cell;

      this.horizont = this.way[this.way.length - 1].horizont;
      this.vertikal = this.way[this.way.length - 1].vertikal;

      for (let v = this.vertikal - 1; v <= this.vertikal; v++) {
        for (let h = this.horizont; h <= this.horizont + 1; h++) {
          gameFielg[v][h].unit = arg;
        }
      }

      this.way.pop();

      /*
	this.cell.unit=0;	
	this.cell.free=true;	
	this.cell=this.way[this.way.length-1];
	this.horizont=this.way[this.way.length-1].horizont;
	this.vertikal=this.way[this.way.length-1].vertikal;
    this.cell.unit=arg;
	this.cell.free=false;
	this.way.pop();
*/

      //this.damagePointX=this.cell.x+50;
      //this.damagePointY=this.cell.y;

      //if(this.cell){
      this.cellUpdate(); //////////////////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      //};
      ///

      ///

      this.x += this.gSp * speedKoof;
      this.y += this.vSp * speedKoof;

      let a = this.cell.x - this.x;
      let b = this.cell.y - this.y;

      let c = Math.sqrt(a * a + b * b);

      this.stepTakt = c / this.speed;

      //}
    } else if (!this.way.length) {
      this.stepTakt = 0;
      //this.way=[];
      this.finish = 0;

      this.iStand = true;
    }
  } else {
    //if(!this.target){
    //this.holdToGo=10;
    //}
    //else{this.holdToGo=0;this.iStand=true;};

    //console.log((Math.floor(this.stepTakt)*10))
    //if(this.type!=="turtle"||(this.draw_visible))
    if (Math.floor(this.stepTakt) % 5 === 0) {
      water_sled_create(arg);
    }

    this.x += this.gSp;
    this.y += this.vSp;

    this.iStand = false;
    this.iGetMyCell = false;

    this.stepTakt--;

    //if(!this.way.length&&this.stepTakt<=0){this.stepTakt=0;this.finish=0;};

    //console.log("ok");
  }

  //if(!this.way.length&&this.stepTakt<=0){this.finish=0;console.log("ok");};

  //console.log(this.way);
  //if(fractions[0].activeUnits[0]){
  //console.log(this.way.length);
  //};
};

Unit.prototype.goWayDrag = function (arg) {
  if (this.stepTakt < 1 && this.stepTakt >= 0) {
    this.iGetMyCell = true;

    //this.hotCell=this.cell;

    this.x = this.cell.x;
    this.y = this.cell.y;

    if (!this.way.length) {
      this.iStand = true;
    }

    if (this.iGetTarget) {
      this.way = [];
      this.stepTakt = 0;
      this.iStand = true;
      return;
    }

    //if(!this.handCell&&!this.target&&!this.handTarget){this.way=[];this.stepTakt=0;};

    //if(this.way!=="go"&&!this.way.length&&!this.target&&!this.handTarget){this.stopGetTarget=0;};

    let nextCell_ok = this.checkNextDragCell();

    if (
      (this.way.length &&
        (!nextCell_ok || nextCell_ok < 4) &&
        !this.target &&
        !this.handTarget) ||
      //&&this.handCell
      this.way === "go"
    ) {
      //console.log("sdjfgidhf");

      //let a=Math.floor(Math.random()*2);

      //if(a){a=Math.floor(Math.random()*1000);};

      let noFree = 1000; //+a;

      this.finish = this.way[0];
      this.sosFin = this.way[0];

      if (this.way === "go") {
        this.finish = this.handCell;
        this.sosFin = this.handCell;
      }

      this.way = [];
      ////*
      //console.log("hren");
      //getWay=function(arg,noFree,deep,target)
      // getVektors=function(arg,target,unit)

      getWay(this.cell.dragoon, noFree, 500);

      //console.log(noFree.length);
    }

    if (
      this.way.length &&
      nextCell_ok === 4
      //&&this.checkValideFreeCell()
    ) {
      //if(this.type===2&&!this.way[this.way.length-1].free){console.log("ggggggggggggggggggggggggggggggggg");};

      //speed=this.speed-(this.speed*this.stepTakt);
      let speedKoof = 1 - this.stepTakt;

      //if(this.checkValideFreeCell()){

      this.iGetMyCell = false;

      this.iStand = false;

      this.getGsp_Vsp();

      for (let v = this.vertikal - 1; v <= this.vertikal; v++) {
        for (let h = this.horizont; h <= this.horizont + 1; h++) {
          gameFielg[v][h].dragoon = false;
        }
      }

      this.cell = this.way[this.way.length - 1];

      this.horizont = this.way[this.way.length - 1].horizont;
      this.vertikal = this.way[this.way.length - 1].vertikal;

      for (let v = this.vertikal - 1; v <= this.vertikal; v++) {
        for (let h = this.horizont; h <= this.horizont + 1; h++) {
          gameFielg[v][h].dragoon = arg;
        }
      }

      this.way.pop();

      /*
	this.cell.unit=0;	
	this.cell.free=true;	
	this.cell=this.way[this.way.length-1];
	this.horizont=this.way[this.way.length-1].horizont;
	this.vertikal=this.way[this.way.length-1].vertikal;
    this.cell.unit=arg;
	this.cell.free=false;
	this.way.pop();
*/

      this.damagePointX = this.cell.x + 50;
      this.damagePointY = this.cell.y;

      //if(this.cell){
      this.cellUpdate(); //////////////////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      //};
      ///

      ///

      this.x += this.gSp * speedKoof;
      this.y += this.vSp * speedKoof;

      let a = this.cell.x - this.x;
      let b = this.cell.y - this.y;

      let c = Math.sqrt(a * a + b * b);

      this.stepTakt = c / this.speed;

      //}
    } else if (!this.way.length) {
      this.stepTakt = 0;
      //this.way=[];
      this.finish = 0;

      this.iStand = true;
    }
  } else {
    //if(!this.target){
    //this.holdToGo=10;
    //}
    //else{this.holdToGo=0;this.iStand=true;};

    this.x += this.gSp;
    this.y += this.vSp;

    this.iStand = false;
    this.iGetMyCell = false;

    this.stepTakt--;

    //if(!this.way.length&&this.stepTakt<=0){this.stepTakt=0;this.finish=0;};

    //console.log("ok");
  }

  //if(!this.way.length&&this.stepTakt<=0){this.finish=0;console.log("ok");};

  //console.log(this.way);
  //if(fractions[0].activeUnits[0]){
  //console.log(this.way.length);
  //};
};

Unit.prototype.goWay = function (arg) {
  //if(this.iFight){console.log("ok");};handTarget target console.log(this.stopGetTarget);

  //contaktCells
  //let speed=this.speed;

  //console.log("ok");glob_deep iContaktWith
  //iStand

  if (this.stepTakt < 1 && this.stepTakt >= 0) {
    this.iGetMyCell = true;

    this.hotCell = this.cell;

    this.x = this.cell.x;
    this.y = this.cell.y;

    if (this.need_return) {
      this.need_return = false;
      return;
    }

    if (!this.way.length) {
      this.iStand = true;
    }

    if (this.iGetTarget) {
      this.way = [];
      this.stepTakt = 0;
      this.iStand = true;
      return;
    }

    //stopGetTarget

    //console.log(this.way.length);

    //this.nockNokc=true;
    //this.moveVektor=0;

    //if(this.way.length&&!this.way[this.way.length-1].free&&this.way[this.way.length-1].persolalNumber===this.cell.persolalNumber){this.way.pop();};
    /*
if(
((this.way.length===1&&!this.way[this.way.length-1].free)||!this.way.length)&&
!this.target&&!this.handTarget&&this.handCell
){
	this.way=[];
	this.handCell=0;
	};
*/

    //if(!this.handCell&&!this.target&&!this.handTarget){this.way=[];this.stepTakt=0;};

    if (
      ((this.fatherFraction.control === "player" && !this.hold_position) ||
        this.fatherFraction.control === "comp") &&
      !this.handCell &&
      !this.target &&
      !this.handTarget
    ) {
      this.way = [];
      this.stepTakt = 0;
    }

    //if(this.way!=="go"&&!this.way.length&&!this.target&&!this.handTarget&&!this.ii_back){this.stopGetTarget=0;console.log("hreeeee");};

    if (
      ((this.way.length &&
        !this.way[this.way.length - 1].free &&
        !this.target &&
        !this.handTarget &&
        this.handCell) ||
        this.way === "go") &&
      !this.iWaitMyBros
    ) {
      this.way = [];

      //console.log("sdjfgidhf");

      //let a=Math.floor(Math.random()*2);

      //if(a){a=Math.floor(Math.random()*1000);};

      let noFree = 350;

      this.finish = this.handCell;
      this.sosFin = this.handCell;
      ////*
      //console.log("hren");
      //getWay=function(arg,noFree,deep,target)
      // getVektors=function(arg,target,unit)

      let deep = glob_deep;

      let dis;

      if (this.handCell) {
        dis = get_distanse_on_lineyka(this.cell, 50, this.handCell, 50);
      }

      ///*
      if (this.ii_saveCell && !this.animys.length && this.handCell) {
        //deep=5000;

        //if(dis<=400){deep=500;};

        this.ii_saveCell_reset++;
      }
      //*/

      if (this.ii_saveCell_reset >= 100 || this.animys.length) {
        this.ii_saveCell_reset = 0;
        this.ii_saveCell = false;

        //console.log("VAZHNO");
      }

      if (this.handCell) {
        deep = Math.floor(dis) * 2;
      }

      if (this.revers) {
        deep = 50000;
      }

      getWay(this.cell.unit, noFree, deep);

      //if(this.warrior){console.log(this.way.length)};
      ////////////////////////////////////////

      ///////////////////////////////////////////////////////////
    }

    if (
      this.way.length &&
      this.way[this.way.length - 1].free &&
      this.checkValideFreeCell()
    ) {
      //if(this.type===2&&!this.way[this.way.length-1].free){console.log("ggggggggggggggggggggggggggggggggg");};

      //speed=this.speed-(this.speed*this.stepTakt);
      let speedKoof = 1 - this.stepTakt;

      //if(this.checkValideFreeCell()){

      this.iGetMyCell = false;

      this.iStand = false;

      this.getGsp_Vsp();

      this.cell.unit = 0;
      this.cell.free = true;
      this.cell = this.way[this.way.length - 1];
      this.horizont = this.way[this.way.length - 1].horizont;
      this.vertikal = this.way[this.way.length - 1].vertikal;
      this.cell.unit = arg;
      this.cell.free = false;
      this.way.pop();

      if (
        (this.type === 1 ||
          this.type === 2 ||
          this.type === 3 ||
          this.type === "ballista" ||
          this.type === "rizar") &&
        this.cell
      ) {
        this.damagePointX = this.cell.x + 25;
        this.damagePointY = this.cell.y + 25;
      }

      if (this.cell) {
        this.cellUpdate(); //////////////////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      }
      ///

      ///

      this.x += this.gSp * speedKoof;
      this.y += this.vSp * speedKoof;

      let a = this.cell.x - this.x;
      let b = this.cell.y - this.y;

      let c = Math.sqrt(a * a + b * b);

      this.stepTakt = c / this.speed;

      //}
    } else if (!this.way.length) {
      this.stepTakt = 0;
      //this.way=[];
      this.finish = 0;

      this.iStand = true;
    }
  } else {
    //if(!this.target){
    //this.holdToGo=10;
    //}
    //else{this.holdToGo=0;this.iStand=true;};

    this.x += this.gSp;
    this.y += this.vSp;

    this.iStand = false;
    this.iGetMyCell = false;

    this.stepTakt--;

    //if(!this.way.length&&this.stepTakt<=0){this.stepTakt=0;this.finish=0;};

    //console.log("ok");
  }

  //if(!this.way.length&&this.stepTakt<=0){this.finish=0;console.log("ok");};

  //console.log(this.way);
  //if(fractions[0].activeUnits[0]){
  //console.log(this.way.length);
  //};
  /*
if(this.ii_saveCell&&!this.handCell&&!this.target&&!this.handTarget&&!this.way.length){
	//console.log(this.cell.unit);// pausa=1;
	this.spedr=true;
}
else {this.spedr=false;};
*/
};

Unit.prototype.getGsp_Vsp = function () {
  let cell = this.way[this.way.length - 1];

  if (cell.vertikal === this.vertikal && cell.horizont === this.horizont + 1) {
    this.gSp = this.rightGSP;
    this.vSp = this.rightVSP;

    this.moveVektor = "right";
  } else if (
    cell.vertikal === this.vertikal + 1 &&
    cell.horizont === this.horizont + 1
  ) {
    this.gSp = this.right_DownGSP;
    this.vSp = this.right_DownVSP;

    this.moveVektor = "right_Down";
  } else if (
    cell.vertikal === this.vertikal + 1 &&
    cell.horizont === this.horizont
  ) {
    this.gSp = this.downGSP;
    this.vSp = this.downVSP;

    this.moveVektor = "down";
  } else if (
    cell.vertikal === this.vertikal + 1 &&
    cell.horizont === this.horizont - 1
  ) {
    this.gSp = this.down_LeftGSP;
    this.vSp = this.down_LeftVSP;

    this.moveVektor = "down_Left";
  } else if (
    cell.vertikal === this.vertikal &&
    cell.horizont === this.horizont - 1
  ) {
    this.gSp = this.leftGSP;
    this.vSp = this.leftVSP;

    this.moveVektor = "left";
  } else if (
    cell.vertikal === this.vertikal - 1 &&
    cell.horizont === this.horizont - 1
  ) {
    this.gSp = this.left_UpGSP;
    this.vSp = this.left_UpVSP;

    this.moveVektor = "left_Up";
  } else if (
    cell.vertikal === this.vertikal - 1 &&
    cell.horizont === this.horizont
  ) {
    this.gSp = this.upGSP;
    this.vSp = this.upVSP;

    this.moveVektor = "up";
  } else if (
    cell.vertikal === this.vertikal - 1 &&
    cell.horizont === this.horizont + 1
  ) {
    this.gSp = this.up_RightGSP;
    this.vSp = this.up_RightVSP;

    this.moveVektor = "up_Right";
  }
};

/*
Unit.prototype.getWayLength=function(){
	
	this.wayLength=0;
	
	for(let i=0;i<this.way.length;i++){
		
this.wayLength+=this.way[i].g;		
		
		
	};
	
	
};
*/
const infoAndControl = function (unitIndex) {
  //// ochen syroe

  if (this.unitName === "shahta") {
    ctx.textBaseline = "top";
    ctx.textAlign = "left";
    ctx.font = "50px Areal";
    ctx.fillStyle = "red";

    ctx.fillText(this.unitName, 730, 100);

    ctx.font = "20px Areal";

    ctx.fillText("gold : " + this.gold, 730, 160);
  } else if (this.unitStatus === "life") {
    if (this.unitName === "peon") {
      ctx.textBaseline = "top";
      ctx.textAlign = "left";
      ctx.font = "50px Areal";
      ctx.fillStyle = "red";

      ctx.fillText(this.unitName, 730, 100);
    }
  }
};

LandObj.prototype.infoAndControl = infoAndControl;
Unit.prototype.infoAndControl = infoAndControl;

//////////////////////////////////////////////  II

Fraction.prototype.ii_panick = function () {
  for (let i = 0; i < this.inPanick.length; i++) {
    let u = this.inPanick[i];

    if (u.panick.timer === 100) {
      let max = [];

      for (let ver = u.vertikal - 5; ver <= u.vertikal + 5; ver++) {
        for (let hor = u.horizont - 5; hor <= u.horizont + 5; hor++) {
          if (
            gameFielg[ver] &&
            gameFielg[ver][hor] &&
            gameFielg[ver][hor].free
          ) {
            let a = u.panick.agressor.vertikal - ver;
            let b = u.panick.agressor.horizont - hor;

            let c = Math.sqrt(a * a + b * b);

            if (!max.length || c > max[0]) {
              max = [c, gameFielg[ver][hor]];
            }
          }
        }
      }

      if (max.length) {
        u.clickSave = new ClickSave(0, max[1]);
        if (u.fatherFraction.activeUnits.indexOf(u) === -1) {
          u.fatherFraction.activeUnits.push(u);
        }
      }

      u.panick.timer--;

      //console.log("u.horizont : "+u.horizont);
      //console.log("u.vertikal : "+u.vertikal);
      //console.log(max[1]);
    } else if (u.panick.timer) {
      u.panick.timer--;

      if (!u.panick.timer && u.hp > 0) {
        u.ii_saveCell = u.panick.startCell;
        if (u.fatherFraction.activeUnits.indexOf(u) === -1) {
          u.fatherFraction.activeUnits.push(u);
        }
      }
    }

    if (!u.panick.timer || u.target || u.handTarget || u.hp <= 0) {
      u.panick = false;

      this.inPanick.splice(i, 1);
      i--;
    }
  }
};

Fraction.prototype.attack_revers = function () {
  //splice clickSave

  for (let j = 0; j < this.revers.length; j++) {
    let ret = this.revers[j];

    if (ret.holdTimer) {
      ret.holdTimer--;
      return;
    }

    if (ret && !ret.warriors.length && !ret.transports.length) {
      this.revers.splice(j, 1);
      j--;
    } else {
      for (let i = 0; i < ret.warriors.length; i++) {
        let obj = ret.warriors[i];

        if (obj) {
          let del = false;

          if (
            obj.cell &&
            obj.cell.continent === ret.my_continent
            //&&
            //obj.ii_attack
          ) {
            obj.handCell = 0;
            obj.handTarget = 0;
            obj.way = [];
            obj.ii_saveCell = obj.born_cell;
            obj.ii_attack = false;
            obj.revers = true;
            del = true;

            if (!obj.active) {
              this.activeUnits.push(obj);
              obj.active = true;
            }
          }

          if (obj.hp <= 0 || del) {
            ret.warriors.splice(i, 1);
            i--;

            break;
          }
        }
      }

      ///*
      if (!ret.evacuation) {
        ret.evacuation = true;
        ret.on_evacuation = [];

        for (let i = 0; i < ret.warriors.length; i++) {
          ret.on_evacuation.push(ret.warriors[i]);
        }
      }
      //*/

      if (ret.seaWay && !ret.groundWay) {
        for (let i = 0; i < ret.on_evacuation.length; i++) {
          if (!ret.on_evacuation[i].cell || ret.on_evacuation[i].hp <= 0) {
            ret.on_evacuation.splice(i, 1);
            i--;
          }
        }

        if (!ret.on_evacuation.length) {
          for (let i = 0; i < ret.transports.length; i++) {
            let obj = ret.transports[i];

            if (!obj.passagers.length || obj.hp <= 0) {
              obj.clickSave = new ClickSave(0, ret.start_point);

              if (!obj.active) {
                this.activeUnits.push(obj);
                obj.active = true;
              }

              ret.transports[i].in_attack = false;

              ret.transports.splice(i, 1);

              i--;
              //console.log("finish");
            }
          }

          for (let i = 0; i < ret.transports.length; i++) {
            let obj = ret.transports[i];

            if (obj.passagers.length) {
              if (obj.landing && obj.landing.iGetLand === ret.my_continent) {
                obj.passagers_out = true;
              } else if (!obj.way.length) {
                obj.clickSave = new ClickSave(0, ret.start_point);

                if (!obj.active) {
                  this.activeUnits.push(obj);
                  obj.active = true;
                }
              }
            }
          }
        } else if (!ret.transports.length) {
          for (let i = 0; i < this.transports.length; i++) {
            let obj = this.transports[i];

            if (
              !obj.passagers.length &&
              obj.hp > 0 &&
              obj.cell.sea === ret.seaWay
            ) {
              ret.transports.push(obj);
            }
          }
        } else {
          let on_boarding;

          for (let i = 0; i < ret.transports.length; i++) {
            let obj = ret.transports[i];

            if (
              obj.passagers.length &&
              (!obj.landing || (obj.landing && !obj.landing.iGetLand)) &&
              (!obj.way.length || obj.ii_way_status === "go war")
              //&&
              //	obj.stepTakt<1&&obj.stepTakt>=0
            ) {
              //console.log("ffffff "+obj.passagers[0].born_cell);

              obj.ii_way_status = false;

              obj.clickSave = new ClickSave(0, obj.passagers[0].born_cell);

              if (!obj.active) {
                this.activeUnits.push(obj);
                obj.active = true;
              }
            } else if (
              !obj.passagers.length &&
              (!obj.landing ||
                (obj.landing && !obj.landing.iGetLand) ||
                (obj.landing &&
                  obj.landing.iGetLand &&
                  obj.landing.iGetLand !== ret.continent)) &&
              (!obj.way.length || obj.ii_way_status === "go home") &&
              ret.on_evacuation.length
            ) {
              obj.ii_way_status = false;

              if (ret.on_evacuation.length) {
                obj.clickSave = new ClickSave(0, ret.on_evacuation[0].cell);
              }

              if (!obj.active) {
                this.activeUnits.push(obj);
                obj.active = true;
              }
            }
            //*
            else if (
              obj.landing &&
              obj.landing.iGetLand &&
              obj.landing.iGetLand === ret.continent &&
              ret.on_evacuation.length &&
              obj.passagers.length < 9 &&
              !on_boarding
            ) {
              on_boarding = obj;
            } else if (
              obj.landing &&
              obj.landing.iGetLand &&
              obj.landing.iGetLand === ret.continent &&
              (!ret.on_evacuation.length || obj.passagers.length === 9)
            ) {
              //console.log("go back")

              obj.clickSave = new ClickSave(0, ret.start_point);

              if (!obj.active) {
                this.activeUnits.push(obj);
                obj.active = true;
              }
            } else if (
              obj.landing &&
              obj.landing.iGetLand &&
              obj.landing.iGetLand === ret.my_continent
            ) {
              obj.passagers_out = true;
            }
            //*/
          } // for transport

          if (on_boarding) {
            //console.log("im ready");

            for (let i = 0; i < ret.on_evacuation.length; i++) {
              let unit = ret.on_evacuation[i];

              unit.ii_attack = false;

              if (
                !unit.way.length &&
                unit.hp > 0 &&
                unit.cell &&
                unit.cell.continent !== ret.my_continent &&
                !unit.target
              ) {
                unit.transport = on_boarding;
                unit.clickSave = new ClickSave(on_boarding, 0);

                if (!unit.active) {
                  this.activeUnits.push(unit);
                  unit.active = true;
                }

                //console.log("go_go");
              }
            }
          }
        } // esly est transport
      } else if (ret.groundWay) {
        ret.on_evacuation = [];

        for (let i = 0; i < ret.transports.length; i++) {
          let obj = ret.transports[i];

          if (!obj.passagers.length || obj.hp <= 0) {
            obj.clickSave = new ClickSave(0, ret.start_point);

            if (!obj.active) {
              this.activeUnits.push(obj);
              obj.active = true;
            }

            ret.transports.splice(i, 1);

            i--;
          }
        }

        for (let i = 0; i < ret.transports.length; i++) {
          let obj = ret.transports[i];

          if (obj.passagers.length) {
            if (obj.landing && obj.landing.iGetLand === ret.my_continent) {
              obj.passagers_out = true;
            } else if (!obj.way.length) {
              obj.clickSave = new ClickSave(0, ret.start_point);

              if (!obj.active) {
                this.activeUnits.push(obj);
                obj.active = true;
              }
            }
          }
        }
      }

      //if(!ret.transports.length){console.log("UH"); pausa=1;};
    }
  }
};

//dddd

Fraction.prototype.ii_attack = function (mySelf) {
  //ii_abort transport warriors_flot_reserv	objects_on_continents warriors_on_continents
  //iin ii_passagers	 ii_attack

  //console.log(this.attack.seaWay);	mana

  //if(this.fraction==="redOrcs"){console.log("ok");};

  if (!this.frandly_fractions.length && !this.animy_fractions.length) {
    for (let i = 0; i < fractions.length; i++) {
      if (this.fraction !== fractions[i].fraction) {
        if (fractions[i].union === this.union) {
          this.frandly_fractions.push(fractions[i]);
        } else {
          this.animy_fractions.push(fractions[i]);
        }
      }
    }
  }

  if (
    this.warriors.length >= this.ii_attack_number &&
    !this.attack &&
    ((this.startPoint.unit && this.startPoint.unit.gold >= 50000) ||
      this.gold >= 1000) &&
    this.canFarm
  ) {
    this.attack = new II_attack();
    this.attack.warriors_in_active = 0;
    this.attack.alive_warriors = [];
    this.attack.warriors_flot_reserv = 0;
    this.attack.memorial = 0;

    if (
      this.ii_attack_number <
      Math.floor(
        (this.createShablon.rizars +
          this.createShablon.mechniks +
          this.createShablon.luchniks +
          this.createShablon.ballistas) /
          1.4
      )
    ) {
      this.ii_attack_number += 5 + Math.floor(Math.random() * 4);

      this.createShablon.transports = Math.floor(this.ii_attack_number / 9) + 1;
    }
    //console.log("here");
    //pausa=1 splice ii_passagers
  }

  if (this.attack) {
    if (!this.attack.start_continent_warriors) {
      let max = [];

      for (let i = 1; i < this.warriors_on_continents.length; i++) {
        if (!max.length || max[0] < this.warriors_on_continents[i].length) {
          max = [this.warriors_on_continents[i].length, i];
        }
      }

      this.attack.start_continent_warriors = {
        continent: max[1],
        warriors: Math.floor(this.warriors_on_continents[max[1]].length / 2),
      };

      this.attack.start_point =
        this.warriors_on_continents[
          this.attack.start_continent_warriors.continent
        ][0].cell;

      //console.log(this.attack.start_continent_warriors);//pausa=1;

      return;
    }

    if (!this.attack.attack_target_fraction) {
      let ran = Math.floor(Math.random() * this.animy_fractions.length);

      this.attack.attack_target_fraction = this.animy_fractions[ran];

      ///console.log(this.attack.attack_target_fraction); pausa=1;

      if (
        (this.attack.attack_target_fraction &&
          !this.attack.attack_target_fraction.peoples.length &&
          !this.attack.attack_target_fraction.buildings.length) ||
        !this.attack.attack_target_fraction
      ) {
        this.attack = false;
        return;
      }

      let min = [];

      for (
        let i = 1;
        i < this.attack.attack_target_fraction.objects_on_continents.length;
        i++
      ) {
        if (
          (!min.length &&
            this.attack.attack_target_fraction.objects_on_continents[i].length >
              0) ||
          (min[0] >
            this.attack.attack_target_fraction.objects_on_continents[i]
              .length &&
            this.attack.attack_target_fraction.objects_on_continents[i].length >
              0)
        ) {
          min = [
            this.attack.attack_target_fraction.objects_on_continents[i].length,
            i,
          ];
        }
      }

      this.attack.attack_target_fraction_continent = min[1];

      //console.log(min[1])

      if (this.attack.attack_target_fraction_continent) {
        while (true) {
          let ran = Math.floor(
            Math.random() *
              this.attack.attack_target_fraction.objects_on_continents[
                this.attack.attack_target_fraction_continent
              ].length
          );

          this.attack.finish_cell =
            this.attack.attack_target_fraction.objects_on_continents[
              this.attack.attack_target_fraction_continent
            ][ran].cell;

          if (!this.attack.finish_cell.sea) {
            break;
          }
        }
      }
      //console.log(fractions.indexOf(this.attack.attack_target_fraction));
      //console.log(this.attack.attack_target_fraction_continent);pausa=1;

      return;
    }

    if (!this.attack.checkTypeAttack) {
      if (!this.attack.attack_target_fraction_continent) {
        this.attack = false;
        return;
      }

      this.attack.checkTypeAttack = true;

      this.attack.groundWay = true;

      if (
        this.attack.attack_target_fraction_continent !==
        this.attack.start_continent_warriors.continent
      ) {
        this.attack.groundWay = false;
      }

      for (
        let i = 0;
        i <
        allContinents[this.attack.attack_target_fraction_continent].my_seas
          .length;
        i++
      ) {
        for (
          let k = 0;
          k <
          allContinents[this.attack.start_continent_warriors.continent].my_seas
            .length;
          k++
        ) {
          if (
            allContinents[this.attack.attack_target_fraction_continent].my_seas[
              i
            ].length &&
            allContinents[this.attack.start_continent_warriors.continent]
              .my_seas[k].length
          ) {
            //if(this.objects_on_seas[i])

            let okTrans = false;

            for (let j = 0; j < this.objects_on_seas[i].length; j++) {
              if (this.objects_on_seas[i][j].type === "transport") {
                okTrans = true;
              }
            }

            if (okTrans) {
              this.attack.seaWay = i;
            }
          }
        }
      }

      //console.log(this.attack.seaWay);
      //console.log(this.attack.groundWay);pausa=1;
      return;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////// WAY !!!!!!!!!!!!!!!!!!!
    ///*
    if (this.attack.groundWay && !this.attack.obj) {
      this.attack.obj;

      if (this.attack.attack_target_fraction.townHolls.length) {
        this.attack.obj = this.attack.attack_target_fraction.townHolls[0];
      }

      if (
        !this.attack.obj &&
        this.attack.attack_target_fraction.buildings.length
      ) {
        this.attack.obj = this.attack.attack_target_fraction.buildings[0];
      } else {
        this.attack.obj =
          this.attack.attack_target_fraction.objects_on_continents[
            this.attack.attack_target_fraction_continent
          ][0];
      }

      if (this.attack.obj) {
        let cell;

        for (let i = 0; i < this.base_cells.length; i++) {
          let obj = this.base_cells[i];

          if (obj.free) {
            cell = obj;
            break;
          }
        }

        let unit = new Unit("rizar", 0, 0, 5, this.fraction, this.nation);

        unit.fatherFraction = mySelf;
        unit.cell = cell;
        unit.vertikal = cell.vertikal;
        unit.horizont = cell.horizont;
        unit.y = cell.y;
        unit.x = cell.x;
        cell.unit = unit;
        cell.free = false;

        //(arg,noFree,deep,target,luchnik,ii)

        unit.finish = this.attack.obj.cell;
        unit.handTarget = this.attack.obj;
        unit.iCanGet = false;

        getWay(unit, undefined, 50000, this.attack.obj, undefined, true);

        this.attack.ii_way = unit.way;

        let d = unit.way[0];

        //for(let i=0;i<this.attack.ii_way.length;i++){// dlya otrisovki

        //	ww.push(this.attack.ii_way[i]);
        //};

        for (let i = 0; i < this.attack.ii_way.length; i++) {
          this.attack.ii_way.splice(i, 30);
        }

        this.attack.ii_way.unshift(d);
        //ddd=this.attack.ii_way;

        for (let i = 0; i < this.attack.ii_way.length; i++) {
          let obj = this.attack.ii_way[i];

          for (let v = obj.vertikal - 5; v <= obj.vertikal + 5; v++) {
            for (let h = obj.horizont - 5; h <= obj.horizont + 5; h++) {
              if (gameFielg[v] && gameFielg[v][h]) {
                let cell = gameFielg[v][h];

                if (!cell.ii_fractions_way) {
                  cell.ii_fractions_way = [];

                  for (let j = 0; j < fractions.length; j++) {
                    cell.ii_fractions_way.push([]);
                  }
                }

                if (!cell.ii_fractions_way[this.persolalNumber].length) {
                  cell.ii_fractions_way[this.persolalNumber] = {
                    fraction: this.persolalNumber,
                    index: i,
                  };
                  obj.ii_cells.push(cell);
                }
              }
            }
          }
        }

        //ww=this.attack.ground_way_to;

        cell.unit = 0;
        cell.free = true;
      }
    }

    //*/
    ///////////////////////////////////////////////////////////////////////////////////

    if (!this.attack.seaWay && !this.attack.groundWay) {
      this.attack = false;
      return;
    } else {
      if (
        this.attack.groundWay &&
        (this.attack.attack_on ||
          !this.attack.seaWay ||
          !this.attack.transports.length)
      ) {
        if (
          this.attack.warriors_in_active + this.attack.warriors_flot_reserv <
          this.attack.start_continent_warriors.warriors
        ) {
          //console.log("i here");	pausa=1

          let warrior;

          for (
            let i =
              this.warriors_on_continents[
                this.attack.start_continent_warriors.continent
              ].length - 1;
            i >= 0;
            i--
          ) {
            let unit =
              this.warriors_on_continents[
                this.attack.start_continent_warriors.continent
              ][i];

            if (
              unit.hp > 0 &&
              unit.cell &&
              !unit.isBlocked() &&
              !unit.ii_attack && //||!unit.handCell
              !unit.target &&
              !unit.transport &&
              (!unit.way.length || unit.ii_saveCell) &&
              (unit.type !== "mag" || unit.mana === 100)
            ) {
              warrior = unit;

              break;
            }
          }

          //splice

          if (warrior) {
            this.attack.warriors_in_active++;
            this.attack.alive_warriors.push(warrior);

            warrior.ii_attack = true;

            warrior.ii_index = this.attack.ii_way.length - 1; ///////////////// WAY

            warrior.clickSave = new ClickSave(
              0,
              this.attack.ii_way[warrior.ii_index]
            );

            if (!warrior.active) {
              this.activeUnits.push(warrior);
              warrior.active = true;
            }

            //console.log(warrior.clickSave)
          }
        }
      }

      if (this.attack.seaWay) {
        //console.log("!!!!!!!!!!!!!!!");
        //console.log((this.attack.start_continent_warriors.warriors/2)/9);

        //this.attack.transports_on=true;
        //console.log("net");
        //pausa=1;

        for (let i = 0; i < this.transports.length; i++) {
          if (
            this.transports[i].cell.sea === this.attack.seaWay
            //&&
            //!this.transports[i].isBlockedShip()
          ) {
            let obj = this.transports[i];

            obj.passagers_out = false;

            if (
              !obj.in_attack //&&this.attack.transports.length<(this.attack.start_continent_warriors.warriors/2)/9
            ) {
              this.attack.transports.push(obj);
              obj.in_attack = true;
            }
          }
        }

        //if(!this.attack.transports.length){this.iNeedFlot_on_sea=this.attack.seaWay;this.attack.seaWay=false; return;};
        //console.log(this.attack.transports.length);

        if (this.attack.transports.length) {
          let for_passagers;

          for (let i = 0; i < this.attack.transports.length; i++) {
            if (this.attack.transports[i].hp <= 0) {
              this.attack.transports.splice(i, 1);
              i--;
            } else {
              if (this.attack.transports[i]) {
                if (
                  //this.attack.transports[i].ii_load_cell
                  //&&
                  //this.attack.transports[i].landing
                  //&&
                  //this.attack.transports[i].landing.iGetLand
                  this.attack.transports[i].ii_way_status === "go war" &&
                  this.attack.transports[i].passagers.length &&
                  //&&
                  //this.attack.transports[i].ii_load_cell!==this.attack.transports[i].cell
                  !this.attack.transports[i].way.length
                ) {
                  this.attack.transports[i].passagers_out = true;

                  //pausa=1;
                  //console.log("out");
                }

                if (
                  !this.attack.transports[i].passagers.length &&
                  !this.attack.transports[i].way.length &&
                  this.attack.transports[i].stepTakt < 1 &&
                  this.attack.transports[i].stepTakt >= 0 &&
                  (!this.attack.transports[i].landing ||
                    !this.attack.transports[i].landing.iGetLand ||
                    (this.attack.transports[i].landing.iGetLand &&
                      this.attack.transports[i].ii_way_status !== "go home"))
                ) {
                  //console.log("!!!!!!!!!!!!!!!"); // pausa=1;
                  //console.log("go " );pausa=1

                  let ran = Math.floor(
                    Math.random() *
                      this.attack.start_continent_warriors.warriors.length
                  );

                  this.attack.transports[i].clickSave = new ClickSave(
                    0,
                    this.attack.start_point
                  );

                  this.attack.transports[i].ii_way_status = "go home";

                  if (!this.attack.transports[i].active) {
                    this.activeUnits.push(this.attack.transports[i]);
                    this.attack.transports[i].active = true;
                  }
                } else if (
                  this.attack.transports[i].landing &&
                  this.attack.transports[i].landing.passagers_out_cells
                    .length &&
                  this.attack.transports[i].landing.iGetLand &&
                  this.attack.transports[i].landing.passagers_out_cells[0]
                    .continent ===
                    this.attack.start_continent_warriors.continent &&
                  this.attack.transports[i].passagers.length < 9 &&
                  this.attack.transports[i].hp > 0
                ) {
                  //console.log("i here");	pausa=1
                  //let summa=0;;

                  //for(let j=0;j<this.attack.transports.length;j++){
                  //	summa+=this.attack.transports[j].passagers.length;
                  //};

                  //if(summa<this.attack.start_continent_warriors.warriors.length){
                  for_passagers = this.attack.transports[i];
                  //};
                  this.attack.attack_on = true;
                  //break;
                }

                //console.log("hhhhhhhhhhhhhhhh");

                //if(this.attack.transports[i].persolalNumber===143){
                //console.log()
                //};

                if (
                  this.attack.transports[i].passagers.length &&
                  !this.attack.transports[i].ii_aliss &&
                  this.attack.transports[i].stepTakt < 1 &&
                  this.attack.transports[i].stepTakt >= 0 &&
                  (this.attack.transports[i].passagers.length === 9 ||
                    this.attack.transports[i].passagers.length >=
                      this.attack.start_continent_warriors.warriors ||
                    this.attack.warriors_in_active >=
                      this.attack.start_continent_warriors.warriors) &&
                  //this.attack.transports[i].passagers.length>this.attack.start_continent_warriors.warriors-this.attack.warriors_in_active
                  !this.attack.transports[i].way.length &&
                  (!this.landing ||
                    (this.landing && !this.landing.iGetLand) ||
                    (this.landing &&
                      !this.landing.iGetLand &&
                      this.attack.transports[i].ii_way_status !== "go war"))

                  /*

&&
(
!this.attack.transports[i].landing

||


!this.attack.transports[i].landing.iGetLand

||

(
this.attack.transports[i].landing.iGetLand
&&
this.attack.transports[i].ii_load_cell
&&
(this.attack.transports[i].ii_load_cell.persolalNumber===this.attack.transports[i].cell.persolalNumber)
)

||
(
this.attack.transports[i].landing.iGetLand
&&
this.attack.transports[i].landing.iGetLand!==this.attack.attack_target_fraction_continent
)


||(this.attack.transports[i].ii_way_status&&this.attack.transports[i].ii_way_status==="go home")

)

*/

                  //ii_load_cell

                  //&&
                  //(
                  //(this.attack.transports[i].tardetLandCell&&!this.attack.transports[i].cell.persolalNumber===this.attack.transports[i].tardetLandCell.persolalNumber)
                  //||
                  //(this.attack.transports[i].landing&&this.attack.transports[i].landing.landCells.length&&this.attack.transports[i].landing.landCells[0].continent===this.attack.start_continent_warriors.continent)
                  //)
                ) {
                  /*
if(this.attack.transports[i].landing&&this.attack.transports[i].landing.base_cell.continent===this.attack.attack_target_fraction_continent_peoples.continent){
	ran=this.attack.transports[i].landing.base_cell;
};
*/

                  //this.attack.attack_target_fraction_continent
                  //this.attack.attack_target_fraction

                  //this.attack.warriors_in_active+=this.attack.transports[i].passagers.length;

                  if (this.landing && this.landing.iGetLand) {
                    this.attack.warriors_flot_reserv -=
                      this.attack.transports[i].ii_passagers.length;
                  }

                  this.attack.transports[i].ii_passagers = [];
                  //this.attack.transports[i].ii_abort=this.attack.attack_target_fraction_continent;

                  this.attack.transports[i].clickSave = new ClickSave(
                    0,
                    this.attack.finish_cell
                  );

                  //console.log("here");

                  this.attack.transports[i].ii_way_status = "go war";

                  if (!this.attack.transports[i].active) {
                    this.activeUnits.push(this.attack.transports[i]);
                    this.attack.transports[i].active = true;
                  }

                  //console.log("???????????????");//	pausa=1;
                  /*
if(this.attack.transports[i].tardetLandCell&&this.attack.transports[i].cell.persolalNumber===this.attack.transports[i].tardetLandCell.persolalNumber){
	
	this.attack.transports[i].passagers_out=true;
	
};
*/
                }

                //ii_passagers/////////////////////

                for (
                  let k = 0;
                  k < this.attack.transports[i].ii_passagers.length;
                  k++
                ) {
                  if (
                    this.attack.transports[i].ii_passagers[k].hp <= 0 ||
                    this.attack.transports[i].ii_passagers[k].target ||
                    !this.attack.transports[i].ii_passagers[k].cell
                  ) {
                    this.attack.transports[i].ii_passagers[k].transport = false;
                    this.attack.transports[i].ii_passagers[k].ii_attack = false;

                    if (this.attack.transports[i].ii_passagers[k].target) {
                      this.attack.transports[i].ii_passagers[k].ii_saveCell =
                        this.attack.transports[i].ii_passagers[k].born_cell;
                    }

                    this.attack.transports[i].ii_passagers.splice(k, 1);
                    k--;
                  } else if (this.attack.transports[i].ii_passagers[k]) {
                    //if(!this.attack.transports[i].ii_passagers[k].cell){this.attack.transports[i].ii_passagers[k].transport=false;};

                    if (
                      (!this.attack.transports[i].ii_passagers[k].way.length ||
                        !this.attack.transports[i].ii_passagers[k].handCell) &&
                      this.attack.transports[i].ii_passagers[k].cell
                    ) {
                      //console.log("gogogogo");
                      this.attack.transports[i].ii_passagers[k].clickSave =
                        new ClickSave(this.attack.transports[i], 0);

                      if (!this.attack.transports[i].ii_passagers[k].active) {
                        this.activeUnits.push(
                          this.attack.transports[i].ii_passagers[k]
                        );
                        this.attack.transports[i].ii_passagers[k].active = true;
                      }
                    }
                  }
                }

                ////////////////////////////////

                if (
                  this.attack.transports[i].landing &&
                  this.attack.transports[i].landing.iGetLand
                ) {
                  //if(this.attack.transports[i].passagers.length===1){this.attack.transports[i].ii_load_cell=this.attack.transports[i].cell;};

                  if (!this.attack.transports[i].passagers.length) {
                    this.attack.transports[i].ii_load_cell = false;
                  }

                  if (this.attack.transports[i].passagers.length === 1) {
                    this.attack.transports[i].ii_load_cell =
                      this.attack.transports[i].cell;
                  }
                }
              }
            }
          } //for

          //console.log(this.attack.warriors_in_active<this.attack.start_continent_warriors.warriors)
          //if(for_passagers){console.log("go");};

          if (
            for_passagers &&
            this.attack.warriors_in_active <
              this.attack.start_continent_warriors.warriors
          ) {
            //console.log("i here");	//pausa=1

            let warrior;
            let units = [];

            for (
              let i =
                this.warriors_on_continents[
                  this.attack.start_continent_warriors.continent
                ].length - 1;
              i >= 0;
              i--
            ) {
              let unit =
                this.warriors_on_continents[
                  this.attack.start_continent_warriors.continent
                ][i];

              //console.log(for_passagers.landing.landCells[0].persolalNumber)

              if (
                unit.hp > 0 &&
                unit.cell &&
                (!unit.isBlocked() ||
                  unit.cell.persolalNumber ===
                    for_passagers.landing.landCells[0].persolalNumber ||
                  unit.cell.persolalNumber ===
                    for_passagers.landing.landCells[1].persolalNumber) &&
                !unit.ii_attack && //||!unit.handCell
                !unit.target &&
                (!unit.way.length || unit.ii_saveCell) &&
                (unit.type !== "mag" || unit.mana === 100)
              ) {
                /*
	warrior=unit;
	
	break;
	*/
                units.push(unit);
              }
            }

            let min;

            for (let i = 0; i < units.length; i++) {
              let dis = get_distanse_on_lineyka(
                for_passagers.landing.landCells[0],
                50,
                units[i].cell,
                50
              );

              if (!min || min[0] > dis) {
                min = [dis, units[i]];
              }
            }

            if (min) {
              warrior = min[1];
            }

            if (warrior && for_passagers.ii_passagers.length < 22) {
              warrior.way = [];
              warrior.clickSave = new ClickSave(for_passagers, 0);
              warrior.transport = for_passagers;
              warrior.ii_attack = true;

              if (warrior.transport.ii_passagers.indexOf(warrior) === -1) {
                warrior.transport.ii_passagers.push(warrior);

                this.attack.warriors_flot_reserv++;
              }

              if (!warrior.active) {
                this.activeUnits.push(warrior);
                warrior.active = true;
              }
            }
            //else{this.attack=false;};
          }
        }

        //console.log(this.attack.transports); pausa=1;
      }

      //alive_warriors

      if (
        this.attack.attack_target_fraction &&
        this.attack.attack_target_fraction.objects_on_continents &&
        this.attack.attack_target_fraction.objects_on_continents.length
      ) {
        for (let i = 0; i < this.attack.alive_warriors.length; i++) {
          let unit = this.attack.alive_warriors[i];

          if (
            unit.hp <= 0 ||
            (this.attack.groundWay && unit.type === "mag" && unit.mana < 100)
          ) {
            this.attack.memorial++;
            unit.ii_attack = false;
            this.attack.alive_warriors.splice(i, 1);
            i--;
          } else {
            if (
              unit.cell &&
              !unit.animys.length &&
              (!unit.way.length || !unit.active) &&
              (unit.type !== "mag" || unit.mana === 100)
            ) {
              if (!unit.ii_index) {
                ///////////////////// WAY

                if (
                  this.attack.attack_target_fraction.objects_on_continents[
                    this.attack.attack_target_fraction_continent
                  ] &&
                  this.attack.attack_target_fraction.objects_on_continents[
                    this.attack.attack_target_fraction_continent
                  ][0]
                ) {
                  unit.clickSave = new ClickSave(
                    this.attack.attack_target_fraction.objects_on_continents[
                      this.attack.attack_target_fraction_continent
                    ][0],
                    0
                  );
                }
              } else {
                unit.clickSave = new ClickSave(0, this.attack.ii_way[0]);
              }

              if (!unit.active) {
                this.activeUnits.push(unit);
                unit.active = true;
              }
            }
          }
        }

        //console.log("al : "+this.attack.alive_warriors.length);

        if (this.attack.alive_warriors.length) {
          this.attack.wor_control = true;
        }

        if (
          !this.attack.alive_warriors.length &&
          this.attack.wor_control &&
          (this.attack.attack_on || !this.attack.seaWay)
        ) {
          for (let i = 0; i < this.attack.transports.length; i++) {
            this.attack.transports[i].ii_way_status = false;
            this.attack.transports[i].in_attack = false;
          }

          //pausa=1;

          ///////////////////////////	WAY

          for (let i = this.attack.ii_way.length - 1; i >= 0; i--) {
            let obj = this.attack.ii_way[i];

            for (let k = 0; k < obj.ii_cells.length; k++) {
              let cell = obj.ii_cells[k];

              cell.ii_fractions_way[this.persolalNumber] = [];
            }
          }

          for (let i = 0; i < this.attack.alive_warriors.length; i++) {
            let warrior = this.attack.alive_warriors[i];

            warrior.ii_index = 0;
          }

          ///////////////////////////

          this.attack = false;
          return;
        }
      }
    }

    //////////////////////////////////////////////////// vyhod
    if (
      this.attack.alive_warriors &&
      !this.attack.alive_warriors.length &&
      !this.attack.transports.length
    ) {
      //pausa=1;

      ///////////////////////////	WAY

      for (let i = this.attack.ii_way.length - 1; i >= 0; i--) {
        let obj = this.attack.ii_way[i];

        for (let k = 0; k < obj.ii_cells.length; k++) {
          let cell = obj.ii_cells[k];

          cell.ii_fractions_way[this.persolalNumber] = [];
        }
      }

      for (let i = 0; i < this.attack.alive_warriors.length; i++) {
        let warrior = this.attack.alive_warriors[i];

        warrior.ii_index = 0;
      }

      ///////////////////////////

      this.attack = false;

      return;
    }

    //console.log(this.warriors_on_continents[this.attack.start_continent_warriors.continent].length/2);
    //console.log(this.attack.start_continent_warriors.warriors/2);
    //console.log(this.attack.start_continent_warriors.warriors/3);

    if (
      !this.attack.attack_target_fraction.objects_on_continents[
        this.attack.attack_target_fraction_continent
      ].length ||
      this.attack.start_continent_warriors.warriors / 10 >=
        this.attack.start_continent_warriors.warriors - this.attack.memorial ||
      this.warriors_on_continents[
        this.attack.start_continent_warriors.continent
      ].length /
        2 <=
        this.attack.start_continent_warriors.warriors / 2
    ) {
      //console.log("vse_2"); pausa=1;
      ///////////////////////////	WAY

      for (let i = this.attack.ii_way.length - 1; i >= 0; i--) {
        let obj = this.attack.ii_way[i];

        for (let k = 0; k < obj.ii_cells.length; k++) {
          let cell = obj.ii_cells[k];

          cell.ii_fractions_way[this.persolalNumber] = [];
        }
      }

      for (let i = 0; i < this.attack.alive_warriors.length; i++) {
        let warrior = this.attack.alive_warriors[i];

        warrior.ii_index = 0;
      }

      ///////////////////////////

      //pausa=1;

      let rev = new II_attack();

      rev.warriors = this.attack.alive_warriors;
      rev.my_continent = this.attack.start_continent_warriors.continent;
      rev.continent = this.attack.attack_target_fraction_continent;
      rev.groundWay = this.attack.groundWay;
      rev.seaWay = this.attack.seaWay;
      rev.holdTimer = 10;
      rev.start_point = this.attack.start_point;

      for (let i = 0; i < this.attack.transports.length; i++) {
        let obj = this.attack.transports[i];

        obj.landing = false;
        obj.in_attack = false;

        for (let k = 0; k < obj.ii_passagers.length; k++) {
          let unit = obj.ii_passagers[k];

          unit.handCell = 0;
          unit.way = [];
          unit.ii_saveCell = unit.born_cell;
          unit.transport = false;
          //console.log("ok");
        }

        obj.ii_passagers = [];
      }

      rev.transports = this.attack.transports;

      this.attack = false;

      this.revers.push(rev);

      //console.log(rev); pausa=1;
    }

    //////////////////////////////////////
  } //attack
  /*	
if(this.attack.start_continent_warriors){
console.log("warriors : "+this.attack.start_continent_warriors.warriors);
console.log("warriors_in_active : "+this.attack.warriors_in_active);
};
//*/
};

Fraction.prototype.ii_oil_control = function () {
  //myJoube

  if (!this.my_favarit_oil && this.sea) {
    //console.log(allSeas[this.sea]);
    let min = [];

    for (let i = 0; i < allSeas[this.sea].oils.length; i++) {
      /*	
let ok=0;	
	
	
for(let k=0;k<allSeas[this.sea].oils[i].cells.length;k++){
	
	if(!allSeas[this.sea].oils[i].cells[k].unit){ok++;};
	
};
*/

      let dis = get_distanse_on_lineyka(
        this.startPoint,
        50,
        allSeas[this.sea].oils[i].cell,
        100
      );

      if (allSeas[this.sea].oils[i].oil && (!min.length || min[0] > dis)) {
        min = [dis, allSeas[this.sea].oils[i]];
      }
    }

    if (min.length) {
      this.my_favarit_oil = min[1];
    }
  }

  /////////////////////////////

  if (
    this.my_favarit_oil_status === "need attack" &&
    this.sea &&
    !this.ships_for_clear.length
  ) {
    //console.log(this.warriors_on_seas)

    for (let i = 0; i < this.warriors_on_seas[this.sea].length; i++) {
      let obj = this.warriors_on_seas[this.sea][i];

      if (obj.hp > 0 && !obj.animys.length && !obj.isBlockedShip()) {
        this.ships_for_clear.push(obj);
      }
    }
    //console.log(this.my_favarit_oil_status);
  }

  for (let i = 0; i < this.ships_for_clear.length; i++) {
    let obj = this.ships_for_clear[i];

    if (
      obj.hp <= 0 ||
      this.my_favarit_oil_status !== "need attack" ||
      obj.animys.length
    ) {
      this.ships_for_clear.splice(i, 1);
      i--;
    } else {
      if (this.my_favarit_oil_status === "need attack") {
        obj.clickSave = new ClickSave(0, this.my_favarit_oil.cell);

        if (!obj.active) {
          this.activeUnits.push(obj);
          obj.active = true;
        }
        //console.log("go");
      }
    }
  }

  ///////////////////////////////

  if (this.my_favarit_oil) {
    if (!this.my_favarit_oil.oil) {
      this.my_favarit_oil = false;
    } else {
      if (
        this.my_favarit_oil.cell.unit &&
        this.my_favarit_oil.cell.unit.type === "oil_platform" &&
        this.my_favarit_oil.cell.unit.fatherFraction.fraction === this.fraction
      ) {
        this.my_favarit_oil_status = "in act";
      } else {
        for (let i = 0; i < this.my_favarit_oil.cells.length; i++) {
          if (
            this.my_favarit_oil.cells[i].unit &&
            this.my_favarit_oil.cells[i].unit.fatherFraction.union !==
              this.union
          ) {
            this.my_favarit_oil_status = "need attack";

            break;
          } else if (
            this.my_favarit_oil.cells[i].unit &&
            this.my_favarit_oil.cells[i].unit.fatherFraction.union ===
              this.union &&
            this.my_favarit_oil.cells[i].unit.fatherFraction.fraction !==
              this.fraction
          ) {
            this.my_favarit_oil_status = "closed";

            break;
          } else if (
            this.my_favarit_oil.cells[i].unit &&
            this.my_favarit_oil.cells[i].unit.fatherFraction.union ===
              this.union &&
            this.my_favarit_oil.cells[i].unit.fatherFraction.fraction ===
              this.fraction
          ) {
            this.my_favarit_oil_status = "need clear";

            break;
          } else {
            this.my_favarit_oil_status = "clear";
          }
        }
      }
    }
  }

  //console.log(this.my_favarit_oil_status);

  if (this.oil_tankers.length) {
    if (this.oil_Refs.length && this.oil_platforms.length) {
      for (let i = 0; i < this.oil_tankers.length; i++) {
        let obj = this.oil_tankers[i];

        //obj.clickSave=new ClickSave(this.oil_Refs[0],0);
        //	if(!obj.active){this.activeUnits.push(obj); obj.active=true;};

        if (!obj.way.length && !obj.iGetTarget && obj.cell && obj.iGetMyCell) {
          let min = [];

          for (let k = 0; k < this.oil_platforms.length; k++) {
            if (
              this.oil_platforms[k].hp > 0 &&
              this.oil_platforms[k].buildready ===
                this.oil_platforms[k].hpfull &&
              this.oil_platforms[k].cell.oil.oil
            ) {
              let dis = get_distanse_on_lineyka(
                obj.cell,
                100,
                this.oil_platforms[k],
                100
              );

              if (!min.length || min[0] > dis) {
                min = [dis, this.oil_platforms[k]];
              }
            }
            //console.log(this.oil_platforms[k].hp);
          }

          if (min.length && !obj.active) {
            obj.clickSave = new ClickSave(this.oil_Refs[0], 0);

            this.activeUnits.push(obj);
            obj.active = true;

            obj.hold_position = obj.fatherFraction.persolalNumber;
            //obj.goGroop_sweeme=true;
            //console.log("!!!!!!!!!!!!!!!!!");
          }
        }
      } // tanker for
    }

    if (
      (!this.oil_platforms.length ||
        (this.my_favarit_oil && this.my_favarit_oil_status === "clear")) &&
      this.gold > 1000 &&
      this.wood > 300
    ) {
      //console.log("act");	pausa=1;

      let oil_platform;

      let min = [];

      if (this.my_favarit_oil && this.my_favarit_oil_status === "clear") {
        min = [0, this.my_favarit_oil];

        //console.log("here");
      } else {
        for (let i = 0; i < allSeas[this.sea].oils.length; i++) {
          let ok = 0;

          for (let k = 0; k < allSeas[this.sea].oils[i].cells.length; k++) {
            if (!allSeas[this.sea].oils[i].cells[k].unit) {
              ok++;
            }
          }

          if (ok === 4) {
            let dis = get_distanse_on_lineyka(
              this.startPoint,
              50,
              allSeas[this.sea].oils[i].cell,
              100
            );

            if (
              allSeas[this.sea].oils[i].oil &&
              (!min.length || min[0] > dis)
            ) {
              min = [dis, allSeas[this.sea].oils[i]];
            }
          }
        }
      }

      if (min.length) {
        oil_platform = min[1];

        let obj = new LandObj(
          "oil_platform",
          oil_platform.horizont,
          oil_platform.vertikal,
          0,
          this.oil_tankers[0].fatherFraction
        );

        obj.cells = oil_platform.cells;
        obj.cell = gameFielg[oil_platform.vertikal][oil_platform.horizont];

        for (let i = 0; i < obj.cells.length; i++) {
          obj.cells[i].unit = obj;
        }

        this.buildings.push(obj);
        this.oil_platforms.push(obj);
        this.activeBuildings.push(obj);

        this.gold -= 1000;
        this.wood -= 300;
      }

      //console.log(oil_platform); pausa=1;
    }
    //console.log(this.oil_tankers[0].clickSave);
  }
};

Fraction.prototype.check_resurs = function () {
  if (this.woods_ok) {
    if (!this.resurs_timer) {
      let ok;

      for (
        let i = this.startPoint.vertikal - 100;
        i <= this.startPoint.vertikal + 100;
        i++
      ) {
        let brc;

        for (
          let k = this.startPoint.horizont - 100;
          k <= this.startPoint.horizont + 100;
          k++
        ) {
          if (
            gameFielg[i] &&
            gameFielg[i][k] &&
            gameFielg[i][k].unit &&
            gameFielg[i][k].unit.type === "wood" &&
            gameFielg[i][k].unit.cell.continent === this.continent
          ) {
            ok = true;
            brc = true;
            break;
          }
        }

        if (brc) {
          break;
        }
      }

      if (!ok) {
        this.woods_ok = false;
      }
    }

    this.resurs_timer++;

    if (this.resurs_timer === 100) {
      this.resurs_timer = 0;
    }
  }
};

Fraction.prototype.peon_managmant = function (prioritetToDo) {
  //console.log("batraks : "+this.batraks.length);
  //console.log("freeBatraks : "+this.freeBatraks.length); myJoube

  let on_gold;
  let on_wood;

  let koof = 2;

  if (this.gold > 10000) {
    if (prioritetToDo === "wood") {
      koof = 3;
    } else if (prioritetToDo === "gold") {
      koof = 1.5;
    }
  } else {
    koof = 1.5;
  }

  if (this.batraks.length > 1) {
    if (
      allContinents[this.continent].shahts.length &&
      allContinents[this.continent].woods.length
    ) {
      on_gold = Math.floor(this.batraks.length / koof);
      on_wood = this.batraks.length - on_gold;

      if (!this.woods_ok) {
        on_wood = 0;
        on_gold = this.batraks.length;
      }
    } else if (
      allContinents[this.continent].shahts.length &&
      (!allContinents[this.continent].woods.length || !this.woods_ok)
    ) {
      on_gold = this.batraks.length;
      on_wood = 0;
    } else if (
      !allContinents[this.continent].shahts.length &&
      allContinents[this.continent].woods.length
    ) {
      on_gold = 0;
      on_wood = this.batraks.length;

      if (!this.woods_ok) {
        on_wood = 0;
      }
    } else if (
      !allContinents[this.continent].shahts.length &&
      (!allContinents[this.continent].woods.length || !this.woods_ok)
    ) {
      return;
    }
  } else {
    if (prioritetToDo === "gold") {
      on_gold = 1;
      on_wood = 0;
    } else if (prioritetToDo === "wood") {
      on_gold = 0;
      on_wood = 1;
    }
  }

  //console.log(on_gold)

  /*
console.log("batraks : "+this.batraks.length);
console.log("gold : "+on_gold);
console.log("wood : "+on_wood);
console.log("!!!!!!!!!!!!!!!!!!!!");
*/

  for (let i = 0; i < this.batraks.length; i++) {
    let obj = this.batraks[i];

    if (on_gold > this.batraksOnGolg.length && obj.ii_personalFree) {
      this.batraksOnGolg.push(obj);
      obj.ii_personalFree = false;
      //console.log("in");
    } else if (on_wood > this.batraksOnWood.length && obj.ii_personalFree) {
      this.batraksOnWood.push(obj);
      obj.ii_personalFree = false;
      //console.log("in 2");
    }
  }

  /*
for(let i=0;i<this.freeBatraks.length;i++){
	
let obj=this.freeBatraks[i];
	
obj.active=false;
	
	
};
*/

  for (let i = 0; i < this.batraksOnGolg.length; i++) {
    let obj = this.batraksOnGolg[i];

    if (
      !obj ||
      obj.hp <= 0 ||
      obj.katastrofa ||
      (this.batraksOnGolg.length > on_gold &&
        !obj.gold &&
        //&&
        //obj.myJoube==="shahter"
        !obj.iGoBuild &&
        obj.workTimeSahta === 100 &&
        obj.waitTime === 30 &&
        obj.cell)
    ) {
      this.batraksOnGolg.splice(i, 1);
      i--;
      if (obj) {
        obj.ii_personalFree = true;
        obj.target = 0;
        obj.way = [];
        obj.iGetTarget = false;
      }
    } else {
      if (
        obj.workTimeSahta === 100 &&
        obj.waitTime === 30 &&
        obj.cell &&
        !obj.active &&
        !obj.target &&
        !this.nar
      ) {
        if (!obj.gold) {
          obj.target = getMinDistanse(
            obj,
            allContinents[this.continent].shahts
          );
        } else {
          obj.target = getMinDistanse(obj, this.townHolls);
        }

        //console.log("here");

        obj.myJoube = "shahter";

        this.activeUnits.push(obj);
        obj.active = true;
      }
    }
  }

  for (let i = 0; i < this.batraksOnWood.length; i++) {
    let obj = this.batraksOnWood[i];

    if (
      !obj ||
      obj.hp <= 0 ||
      obj.katastrofa ||
      (this.batraksOnWood.length > on_wood &&
        !obj.wood &&
        !obj.iGetTarget &&
        //&&
        //obj.myJoube==="shahter"
        //&&
        //!obj.iGoBuild

        !obj.iGoBuild &&
        obj.workTimeSahta === 100 &&
        obj.waitTime === 30 &&
        obj.cell)
    ) {
      this.batraksOnWood.splice(i, 1);
      i--;
      if (obj) {
        obj.ii_personalFree = true;
        obj.target = 0;
        obj.way = [];
        obj.iGetTarget = false;
      }
      //console.log("out");
    } else {
      //console.log(obj.persolalNumber);

      if (
        obj.workTimeSahta === 100 &&
        obj.waitTime === 30 &&
        obj.cell &&
        !obj.active &&
        !obj.target &&
        !this.nar
      ) {
        //go++;

        obj.target = getMinDistanse(obj, allContinents[this.continent].woods);

        obj.myJoube = "lesorub";

        this.activeUnits.push(obj);
        obj.active = true;
      }
    }
  }
};

let ccc = [];

Fraction.prototype.check_create_shablon = function () {
  let base_max = gameFielg.length * 7;

  if (this.createShablon.base_cells) {
    base_max = this.createShablon.base_cells;
  }

  let cells = [];
  let diss = [];

  let bu = [this.startPoint];

  //console.log(allContinents[this.startPoint.continent].cells)
  //while(true){

  //	for(let i)

  //};

  ///*
  for (
    let i = this.startPoint.vertikal - 50;
    i <= this.startPoint.vertikal + 50;
    i++
  ) {
    for (
      let k = this.startPoint.horizont - 50;
      k <= this.startPoint.horizont + 50;
      k++
    ) {
      let obj; //=gameFielg[i][k];

      if (gameFielg[i] && gameFielg[i][k]) {
        obj = gameFielg[i][k];
      }

      if (
        obj &&
        obj.continent &&
        obj.continent === this.startPoint.continent &&
        !obj.water_line &&
        !obj.stop_block &&
        !obj.fraction
      ) {
        diss.push(get_distanse_on_lineyka(this.startPoint, 50, obj, 50));

        cells.push(obj);
      }
    }
  }
  //*/
  //console.log(cells);
  //this.base_cells.push(this.startPoint); distroer
  //this.startPoint.fraction=this.fraction;
  //cells.splice(cells.indexOf(this.startPoint),1);

  while (true) {
    let min = [];

    for (let i = 0; i < diss.length; i++) {
      if (!min.length || min[0] > diss[i]) {
        min = [diss[i], i];
      }
    }

    diss.splice(min[1], 1);

    cells[min[1]].fraction = this.fraction;

    this.base_cells.push(cells[min[1]]);
    //ccc.push(cells[min[1]]);
    cells.splice(min[1], 1);

    let c = min[0];

    if (!diss.length || this.base_cells.length >= base_max) {
      break;
    }
  }

  if (this.master_shablon) {
    return;
  }

  //this.createShablon.flot=true;
  //this.createShablon.level=3;

  this.conturLineCells = [];

  for (let i = 0; i < this.base_cells.length; i++) {
    let obj = this.base_cells[i];

    let ok;

    for (let k = obj.vertikal - 1; k <= obj.vertikal + 1; k++) {
      for (let j = obj.horizont - 1; j <= obj.horizont + 1; j++) {
        let cell;

        if (gameFielg[k] && gameFielg[k][j]) {
          cell = gameFielg[k][j];
        }

        if (
          cell &&
          !cell.water_line &&
          (!cell.fraction || (cell.fraction && cell.fraction !== this.fraction))
        ) {
          ok = true;
        }
      }
    }

    if (ok) {
      this.conturLineCells.push(obj);
    }
  }

  //console.log(this.conturLineCells);
  //console.log(this.base_cells); pausa=1;

  let radius = 0;

  for (let i = 0; i < this.base_cells.length; i++) {
    let dis = get_distanse_on_lineyka(
      this.startPoint,
      50,
      this.base_cells[i],
      50
    );

    if (radius < dis) {
      radius = dis;
    }
  }

  //console.log(radius);

  let peoples;
  let farms;
  let baracks;
  let ogreBases;
  let altars;
  let towers;
  let kuznyas;
  let dragon_roosts;
  let temples;

  /*

			batraks:10,

			mechniks:30,
			luchniks:30,
			ballistas:0,
			rizars:30,
			transports:5,
			oil_tankers:0,
			distroers:3,
			linkors:2,
			turtles:5


*/

  if (this.sea) {
    //console.log(this.createShablon.peoples)

    peoples = Math.floor(this.base_cells.length / 5);

    //if(peoples>250){peoples=250;};

    //peoples=250;

    if (!this.createShablon.p_farms) {
      farms = Math.floor(peoples / 15) + 1;
    }
    if (!this.createShablon.p_baracks) {
      baracks = Math.floor(farms / 3);
    }
    if (!this.createShablon.p_ogreBases) {
      ogreBases = 1;
    }
    if (!this.createShablon.p_altars) {
      altars = 1;
    }
    if (!this.createShablon.p_towers) {
      towers = Math.floor(farms) * 2; //Math.floor(this.conturLineCells.length/2);
    }
    if (!this.createShablon.p_kuznyas) {
      kuznyas = 1;
    }
    if (!this.createShablon.p_temples) {
      temples = 1;
    }
    if (!this.createShablon.p_dragon_roosts) {
      dragon_roosts = 1;
    }

    //console.log(baracks);
    if (!this.createShablon.peoples) {
      this.createShablon.peoples = peoples;

      this.createShablon.batraks = Math.floor(peoples / 8);

      this.createShablon.luchniks = Math.floor(peoples / 4.4);

      this.createShablon.mechniks = Math.floor(peoples / 4.4);

      this.createShablon.rizars = Math.floor(peoples / 4.4);

      this.createShablon.ballistas = Math.floor(peoples / 16);

      this.createShablon.dragons = Math.floor(peoples / 25);

      this.createShablon.oil_tankers = Math.floor(farms / 5);

      this.createShablon.transports = Math.floor(farms / 5);

      this.createShablon.distroers = Math.floor(farms / 5);

      this.createShablon.linkors = Math.floor(farms / 5);

      this.createShablon.turtles = Math.floor(farms / 5);

      this.createShablon.mags = Math.floor(
        peoples -
          this.createShablon.batraks -
          this.createShablon.luchniks -
          this.createShablon.mechniks -
          this.createShablon.rizars -
          this.createShablon.ballistas -
          this.createShablon.dragons -
          this.createShablon.oil_tankers -
          this.createShablon.transports -
          this.createShablon.distroers -
          this.createShablon.linkors -
          this.createShablon.turtles
      );
      //console.log(this.createShablon.mags)
    }
    //console.log(this.createShablon.mags);

    //console.log(peoples-batraks-luchniks-mechnicks-rizars
    //-ballistas-dragons-oil_tankers-transports-distroers-linkors-turtles-mags);
  } else {
    peoples = Math.floor(this.base_cells.length / 5);

    //if(peoples>250){peoples=250;};

    //peoples=250;

    if (!this.createShablon.p_farms) {
      farms = Math.floor(peoples / 15) + 1;
    }
    if (!this.createShablon.p_baracks) {
      baracks = Math.floor(farms / 3);
    }
    if (!this.createShablon.p_ogreBases) {
      ogreBases = 1;
    }
    if (!this.createShablon.p_altars) {
      altars = 1;
    }
    if (!this.createShablon.p_towers) {
      towers = Math.floor(farms) * 2; //Math.floor(this.conturLineCells.length/2);
    }
    if (!this.createShablon.p_kuznyas) {
      kuznyas = 1;
    }
    if (!this.createShablon.p_temples) {
      temples = 1;
    }
    if (!this.createShablon.p_dragon_roosts) {
      dragon_roosts = 1;
    }

    /*	
farms=Math.floor(peoples/15);
baracks=Math.floor(farms/3);
ogreBases=1;
 altars=1;
towers=Math.floor(farms)*2;//Math.floor(this.conturLineCells.length/2);
kuznyas=1;
temples=1;
*/
    //console.log(baracks);
    if (!this.createShablon.peoples) {
      this.createShablon.peoples = peoples;

      this.createShablon.batraks = Math.floor(peoples / 8);

      this.createShablon.luchniks = Math.floor(peoples / 4);

      this.createShablon.mechniks = Math.floor(peoples / 4);

      this.createShablon.rizars = Math.floor(peoples / 4);

      this.createShablon.ballistas = Math.floor(peoples / 16);

      this.createShablon.dragons = Math.floor(peoples / 25);

      //this.createShablon.oil_tankers=Math.floor(peoples/30);

      //this.createShablon.transports=Math.floor(peoples/40);

      //this.createShablon.distroers=Math.floor(peoples/30);

      //this.createShablon.linkors=Math.floor(peoples/40);

      //this.createShablon.turtles=Math.floor(peoples/40);

      this.createShablon.mags = Math.floor(
        peoples -
          this.createShablon.batraks -
          this.createShablon.luchniks -
          this.createShablon.mechniks -
          this.createShablon.rizars -
          this.createShablon.ballistas
      );
    }
  }

  let brc = 0;

  ////////////////////////////////////  BARACKS

  ///*

  //console.log(radius/1.5);

  cells = [];

  for (let i = 0; i < this.base_cells.length; i++) {
    let obj = this.base_cells[i];

    let dis = get_distanse_on_lineyka(obj, 50, this.startPoint, 50);

    if (
      //dis>500&&dis<1400
      dis > radius / 3 &&
      dis < radius / 1.5 &&
      this.conturLineCells.indexOf(obj) === -1
    ) {
      cells.push(obj);
      //cc.push(obj);
    }
  }

  while (true) {
    brc++;

    let ran = Math.floor(Math.random() * cells.length);

    let farm_cells = [];

    let ok = 0;

    for (let v = cells[ran].vertikal - 1; v <= cells[ran].vertikal + 1; v++) {
      for (let h = cells[ran].horizont - 1; h <= cells[ran].horizont + 1; h++) {
        if (gameFielg[v] && gameFielg[v][h] && gameFielg[v][h].ii_free) {
          ok++;
          farm_cells.push(gameFielg[v][h]);
        }
      }
    }

    if (ok === 9) {
      //cc.push(cells[ran]);

      this.createShablon.baracks.push(
        new SablonObj(cells[ran].horizont, cells[ran].vertikal)
      );
      /*
for(let i=0;i<farm_cells.length;i++){
	farm_cells[i].ii_free=false;
};
*/

      for (let i = cells[ran].vertikal - 4; i <= cells[ran].vertikal + 4; i++) {
        for (
          let k = cells[ran].horizont - 4;
          k <= cells[ran].horizont + 4;
          k++
        ) {
          if (gameFielg[i] && gameFielg[i][k]) {
            gameFielg[i][k].ii_free = false;
          }
        }
      }
    }

    if (brc >= 1000 || this.createShablon.baracks.length === baracks) {
      break;
    }
  }
  //*/
  /////////////////////////////////////

  ////////////////////////////////////  KUZNNYAS

  ///*

  //console.log(radius/1.5);

  cells = [];

  for (let i = 0; i < this.base_cells.length; i++) {
    let obj = this.base_cells[i];

    let dis = get_distanse_on_lineyka(obj, 50, this.startPoint, 50);

    if (
      //dis>500&&dis<1400
      dis > radius / 4 &&
      dis < radius / 1.5 &&
      this.conturLineCells.indexOf(obj) === -1
    ) {
      cells.push(obj);
      //cc.push(obj);
    }
  }

  brc = 0;

  while (true) {
    brc++;

    let ran = Math.floor(Math.random() * cells.length);

    let farm_cells = [];

    let ok = 0;

    for (let v = cells[ran].vertikal - 1; v <= cells[ran].vertikal + 1; v++) {
      for (let h = cells[ran].horizont - 1; h <= cells[ran].horizont + 1; h++) {
        if (gameFielg[v] && gameFielg[v][h] && gameFielg[v][h].ii_free) {
          ok++;
          farm_cells.push(gameFielg[v][h]);
        }
      }
    }

    if (ok === 9) {
      //cc.push(cells[ran]);

      this.createShablon.kuznyas.push(
        new SablonObj(cells[ran].horizont, cells[ran].vertikal)
      );
      /*
for(let i=0;i<farm_cells.length;i++){
	farm_cells[i].ii_free=false;
};
*/

      for (let i = cells[ran].vertikal - 1; i <= cells[ran].vertikal + 1; i++) {
        for (
          let k = cells[ran].horizont - 1;
          k <= cells[ran].horizont + 1;
          k++
        ) {
          if (gameFielg[i] && gameFielg[i][k]) {
            gameFielg[i][k].ii_free = false;
          }
        }
      }
    }

    if (brc >= 1000 || this.createShablon.kuznyas.length === kuznyas) {
      break;
    }
  }
  //*/
  /////////////////////////////////////

  ////////////////////////////////////  OGREBASE

  ///*

  //console.log(radius/1.5);

  cells = [];

  for (let i = 0; i < this.base_cells.length; i++) {
    let obj = this.base_cells[i];

    let dis = get_distanse_on_lineyka(obj, 50, this.startPoint, 50);

    if (
      //dis>500&&dis<1400
      dis > radius / 4 &&
      dis < radius / 1.5 &&
      this.conturLineCells.indexOf(obj) === -1
    ) {
      cells.push(obj);
      //cc.push(obj);
    }
  }

  brc = 0;

  while (true) {
    brc++;

    let ran = Math.floor(Math.random() * cells.length);

    let farm_cells = [];

    let ok = 0;

    for (let v = cells[ran].vertikal - 1; v <= cells[ran].vertikal + 1; v++) {
      for (let h = cells[ran].horizont - 1; h <= cells[ran].horizont + 1; h++) {
        if (gameFielg[v] && gameFielg[v][h] && gameFielg[v][h].ii_free) {
          ok++;
          farm_cells.push(gameFielg[v][h]);
        }
      }
    }

    if (ok === 9) {
      //cc.push(cells[ran]);

      this.createShablon.ogreBases.push(
        new SablonObj(cells[ran].horizont, cells[ran].vertikal)
      );
      /*
for(let i=0;i<farm_cells.length;i++){
	farm_cells[i].ii_free=false;
};
*/

      for (let i = cells[ran].vertikal - 1; i <= cells[ran].vertikal + 1; i++) {
        for (
          let k = cells[ran].horizont - 1;
          k <= cells[ran].horizont + 1;
          k++
        ) {
          if (gameFielg[i] && gameFielg[i][k]) {
            gameFielg[i][k].ii_free = false;
          }
        }
      }
    }

    if (brc >= 1000 || this.createShablon.ogreBases.length === ogreBases) {
      break;
    }
  }
  //*/
  /////////////////////////////////////

  ////////////////////////////////////  ALTARS

  ///*

  //console.log(radius/1.5);

  cells = [];

  for (let i = 0; i < this.base_cells.length; i++) {
    let obj = this.base_cells[i];

    let dis = get_distanse_on_lineyka(obj, 50, this.startPoint, 50);

    if (
      //dis>500&&dis<1400
      dis > radius / 4 &&
      dis < radius / 1.5 &&
      this.conturLineCells.indexOf(obj) === -1
    ) {
      cells.push(obj);
      //cc.push(obj);
    }
  }

  brc = 0;

  while (true) {
    brc++;

    let ran = Math.floor(Math.random() * cells.length);

    let farm_cells = [];

    let ok = 0;

    for (let v = cells[ran].vertikal - 1; v <= cells[ran].vertikal + 1; v++) {
      for (let h = cells[ran].horizont - 1; h <= cells[ran].horizont + 1; h++) {
        if (gameFielg[v] && gameFielg[v][h] && gameFielg[v][h].ii_free) {
          ok++;
          farm_cells.push(gameFielg[v][h]);
        }
      }
    }

    if (ok === 9) {
      //cc.push(cells[ran]);

      this.createShablon.altars.push(
        new SablonObj(cells[ran].horizont, cells[ran].vertikal)
      );
      /*
for(let i=0;i<farm_cells.length;i++){
	farm_cells[i].ii_free=false;
};
*/

      for (let i = cells[ran].vertikal - 1; i <= cells[ran].vertikal + 1; i++) {
        for (
          let k = cells[ran].horizont - 1;
          k <= cells[ran].horizont + 1;
          k++
        ) {
          if (gameFielg[i] && gameFielg[i][k]) {
            gameFielg[i][k].ii_free = false;
          }
        }
      }
    }

    if (brc >= 1000 || this.createShablon.altars.length === altars) {
      break;
    }
  }
  //*/
  /////////////////////////////////////

  ////////////////////////////////////  TEMPLE

  ///*

  //console.log(radius/1.5);

  cells = [];

  for (let i = 0; i < this.base_cells.length; i++) {
    let obj = this.base_cells[i];

    let dis = get_distanse_on_lineyka(obj, 50, this.startPoint, 50);

    if (
      //dis>500&&dis<1400
      dis > radius / 4 &&
      dis < radius / 1.5 &&
      this.conturLineCells.indexOf(obj) === -1
    ) {
      cells.push(obj);
      //cc.push(obj);
    }
  }

  brc = 0;

  while (true) {
    brc++;

    let ran = Math.floor(Math.random() * cells.length);

    let farm_cells = [];

    let ok = 0;

    for (let v = cells[ran].vertikal - 1; v <= cells[ran].vertikal + 1; v++) {
      for (let h = cells[ran].horizont - 1; h <= cells[ran].horizont + 1; h++) {
        if (gameFielg[v] && gameFielg[v][h] && gameFielg[v][h].ii_free) {
          ok++;
          farm_cells.push(gameFielg[v][h]);
        }
      }
    }

    if (ok === 9) {
      //cc.push(cells[ran]);

      this.createShablon.temples.push(
        new SablonObj(cells[ran].horizont, cells[ran].vertikal)
      );
      /*
for(let i=0;i<farm_cells.length;i++){
	farm_cells[i].ii_free=false;
};
*/

      for (let i = cells[ran].vertikal - 1; i <= cells[ran].vertikal + 1; i++) {
        for (
          let k = cells[ran].horizont - 1;
          k <= cells[ran].horizont + 1;
          k++
        ) {
          if (gameFielg[i] && gameFielg[i][k]) {
            gameFielg[i][k].ii_free = false;
          }
        }
      }
    }

    if (brc >= 2000 || this.createShablon.temples.length === temples) {
      break;
    }
  }
  //*/
  /////////////////////////////////////

  ////////////////////////////////////  DRAGON_ROOST

  ///*

  //console.log(radius/1.5);

  cells = [];

  for (let i = 0; i < this.base_cells.length; i++) {
    let obj = this.base_cells[i];

    let dis = get_distanse_on_lineyka(obj, 50, this.startPoint, 50);

    if (
      //dis>500&&dis<1400
      dis > radius / 4 &&
      dis < radius / 1.5 &&
      this.conturLineCells.indexOf(obj) === -1
    ) {
      cells.push(obj);
      //cc.push(obj);
    }
  }

  brc = 0;

  while (true) {
    brc++;

    let ran = Math.floor(Math.random() * cells.length);

    let farm_cells = [];

    let ok = 0;

    for (let v = cells[ran].vertikal - 1; v <= cells[ran].vertikal + 1; v++) {
      for (let h = cells[ran].horizont - 1; h <= cells[ran].horizont + 1; h++) {
        if (gameFielg[v] && gameFielg[v][h] && gameFielg[v][h].ii_free) {
          ok++;
          farm_cells.push(gameFielg[v][h]);
        }
      }
    }

    if (ok === 9) {
      //cc.push(cells[ran]);

      this.createShablon.dragon_roosts.push(
        new SablonObj(cells[ran].horizont, cells[ran].vertikal)
      );
      /*
for(let i=0;i<farm_cells.length;i++){
	farm_cells[i].ii_free=false;
};
*/

      for (let i = cells[ran].vertikal - 1; i <= cells[ran].vertikal + 1; i++) {
        for (
          let k = cells[ran].horizont - 1;
          k <= cells[ran].horizont + 1;
          k++
        ) {
          if (gameFielg[i] && gameFielg[i][k]) {
            gameFielg[i][k].ii_free = false;
          }
        }
      }
    }

    if (
      brc >= 1000 ||
      this.createShablon.dragon_roosts.length === dragon_roosts
    ) {
      break;
    }
  }
  //*/
  /////////////////////////////////////

  ////////////////////////////////////  FARMS

  ///*

  //console.log(radius/1.5);

  cells = [];

  for (let i = 0; i < this.base_cells.length; i++) {
    let obj = this.base_cells[i];

    let dis = get_distanse_on_lineyka(obj, 100, this.startPoint, 50);

    if (
      //dis>500&&dis<1400
      dis > radius / 3 &&
      dis < radius / 1.5 &&
      this.conturLineCells.indexOf(obj) === -1
    ) {
      cells.push(obj);
      //cc.push(obj);
    }
  }

  brc = 0;

  while (true) {
    brc++;

    let ran = Math.floor(Math.random() * cells.length);

    let farm_cells = [];

    let ok = 0;

    for (let v = cells[ran].vertikal - 1; v <= cells[ran].vertikal; v++) {
      for (let h = cells[ran].horizont; h <= cells[ran].horizont + 1; h++) {
        if (gameFielg[v] && gameFielg[v][h] && gameFielg[v][h].ii_free) {
          ok++;
          farm_cells.push(gameFielg[v][h]);
        }
      }
    }

    if (ok === 4) {
      //cc.push(cells[ran]);

      this.createShablon.farms.push(
        new SablonObj(cells[ran].horizont, cells[ran].vertikal)
      );

      for (let i = cells[ran].vertikal - 2; i <= cells[ran].vertikal + 1; i++) {
        for (let k = cells[ran].horizont; k <= cells[ran].horizont + 1; k++) {
          if (gameFielg[i] && gameFielg[i][k]) {
            gameFielg[i][k].ii_free = false;
          }
        }
      }

      /*
for(let i=0;i<farm_cells.length;i++){
	farm_cells[i].ii_free=false;
};
*/
    }

    if (brc >= 10000 || this.createShablon.farms.length === farms) {
      break;
    }
  }

  ///*
  if (this.createShablon.farms.length < farms) {
    while (this.createShablon.farms.length < farms) {
      let ran = Math.floor(Math.random() * this.base_cells.length);

      let c = this.base_cells[ran];

      this.createShablon.farms.push(new SablonObj(c.horizont, c.vertikal));
    }
  }

  //if(this.control==="comp"){console.log(this.createShablon.farms.length)};
  //*/
  //*/
  /////////////////////////////////////

  ////////////////////////////////////  TOWERS

  ///*

  cells = [];

  for (let i = 0; i < this.base_cells.length; i++) {
    let obj = this.base_cells[i];

    let dis = get_distanse_on_lineyka(obj, 100, this.startPoint, 50);

    if (
      //dis>1500&&dis<2000
      (dis > radius / 1.5 && dis <= radius) ||
      //dis>300&&dis<1000
      (dis > 300 && dis < radius / 2)
    ) {
      cells.push(obj);
      //cc.push(obj);
    }
  }

  brc = 0;

  while (true) {
    brc++;

    let ran = Math.floor(Math.random() * cells.length);

    let farm_cells = [];

    let ok = 0;

    for (let v = cells[ran].vertikal - 1; v <= cells[ran].vertikal; v++) {
      for (let h = cells[ran].horizont; h <= cells[ran].horizont + 1; h++) {
        if (gameFielg[v] && gameFielg[v][h] && gameFielg[v][h].ii_free) {
          ok++;
          farm_cells.push(gameFielg[v][h]);
        }
      }
    }

    if (ok === 4) {
      //cc.push(cells[ran]);
      let type;

      let ran_2 = Math.floor(Math.random() * 2);

      if (!ran_2) {
        type = "guard";
      } else {
        type = "cannon";
      }

      this.createShablon.towers.push(
        new SablonObj(cells[ran].horizont, cells[ran].vertikal, undefined, type)
      );

      for (let i = cells[ran].vertikal - 2; i <= cells[ran].vertikal + 1; i++) {
        for (
          let k = cells[ran].horizont - 1;
          k <= cells[ran].horizont + 2;
          k++
        ) {
          if (gameFielg[i] && gameFielg[i][k]) {
            gameFielg[i][k].ii_free = false;
          }
        }
      }

      /*
for(let i=0;i<farm_cells.length;i++){
	farm_cells[i].ii_free=false;
};
*/
    }

    if (brc >= 1000 || this.createShablon.towers.length === towers) {
      break;
    }
  }
  //*/
  /////////////////////////////////////

  if (this.fraction === "redOrcs") {
    //this.createShablon.turtles=0;
    //this.createShablon.distroers=0;
    //this.createShablon.transports=0;
    //this.createShablon.turtles=0;
    //this.createShablon.linkors=0;
    //this.createShablon.rizars=0;
    //this.createShablon.luchniks=0;
    //this.createShablon.ballistas=0;
    //this.createShablon.mechniks=0;
    //this.createShablon.towers.length=3;
    //this.createShablon.oil_tankers=0;
    //this.createShablon.dragons=0;
    //this.createShablon.mags=0;
    //if(this.fraction==="redOrcs"){this.createShablon.mags=50;};
  }
  //this.createShablon.transports=1;
  //this.createShablon.dragons=0;

  //this.createShablon.mags=0;

  /*
if(this.fraction==="blackOrcs"){
	//this.createShablon.turtles=0;
	//this.createShablon.distroers=0;
	//this.createShablon.transports=1;
	//this.createShablon.turtles=0;
	//this.createShablon.linkors=15;
	this.createShablon.rizars=0;
	this.createShablon.luchniks=0;
	this.createShablon.ballistas=0;
	this.createShablon.mechniks=2;
	this.createShablon.baracks.length=1;
	//this.createShablon.towers.length=3;
};
//*/

  //if(this.fraction==="blackOrcs"){this.createShablon.mechniks=10;};

  //console.log(this.createShablon);

  //console.log(brc);
};

Fraction.prototype.createShablon_reposition = function (arg) {
  let cells = [];
  let brc = 0;

  let radius = 0;

  for (let i = 0; i < this.base_cells.length; i++) {
    let dis = get_distanse_on_lineyka(
      this.startPoint,
      50,
      this.base_cells[i],
      50
    );

    if (radius < dis) {
      radius = dis;
    }
  }

  if (arg.gabarit === 100) {
    for (let i = 0; i < this.base_cells.length; i++) {
      let obj = this.base_cells[i];

      let dis = get_distanse_on_lineyka(obj, 100, this.startPoint, 50);

      if (
        //dis>500&&dis<1400
        dis > radius / 3 &&
        dis < radius / 1.5 &&
        this.conturLineCells.indexOf(obj) === -1
      ) {
        cells.push(obj);
        //cc.push(obj);
      }
    }

    brc = 0;

    while (true) {
      brc++;

      let ran = Math.floor(Math.random() * cells.length);

      let farm_cells = [];

      let ok = 0;

      for (let v = cells[ran].vertikal - 1; v <= cells[ran].vertikal; v++) {
        for (let h = cells[ran].horizont; h <= cells[ran].horizont + 1; h++) {
          if (gameFielg[v] && gameFielg[v][h] && gameFielg[v][h].free) {
            ok++;
            farm_cells.push(gameFielg[v][h]);
          }
        }
      }

      if (ok === 4) {
        //cc.push(cells[ran]);

        //this.createShablon.farms.push(new SablonObj(cells[ran].horizont,cells[ran].vertikal));
        return new SablonObj(cells[ran].horizont, cells[ran].vertikal);
        //brc=1000;

        /*
for(let i=cells[ran].vertikal-2;i<=cells[ran].vertikal+1;i++){
for(let k=cells[ran].horizont;k<=cells[ran].horizont+1;k++){
	
	if(gameFielg[i]&&gameFielg[i][k]){gameFielg[i][k].ii_free=false;};
	
	
};	
};
*/
        /*
for(let i=0;i<farm_cells.length;i++){
	farm_cells[i].ii_free=false;
};
*/
      }

      if (brc >= 1000) {
        break;
      }
    }
  } else {
    let brc = 0;
    let cells = [];

    for (let i = 0; i < this.base_cells.length; i++) {
      let obj = this.base_cells[i];

      let dis = get_distanse_on_lineyka(obj, 50, this.startPoint, 50);

      if (
        //dis>500&&dis<1400
        dis > radius / 4 &&
        dis < radius / 1.5 &&
        this.conturLineCells.indexOf(obj) === -1
      ) {
        cells.push(obj);
        //cc.push(obj);
      }
    }

    while (true) {
      brc++;

      let ran = Math.floor(Math.random() * cells.length);

      let farm_cells = [];

      let ok = 0;

      for (let v = cells[ran].vertikal - 1; v <= cells[ran].vertikal + 1; v++) {
        for (
          let h = cells[ran].horizont - 1;
          h <= cells[ran].horizont + 1;
          h++
        ) {
          if (gameFielg[v] && gameFielg[v][h] && gameFielg[v][h].free) {
            ok++;
            farm_cells.push(gameFielg[v][h]);
          }
        }
      }

      if (ok === 9) {
        //cc.push(cells[ran]);

        //this.createShablon.dragon_roosts.push(new SablonObj(cells[ran].horizont,cells[ran].vertikal));

        return new SablonObj(cells[ran].horizont, cells[ran].vertikal);

        //brc=1000;

        /*
for(let i=0;i<farm_cells.length;i++){
	farm_cells[i].ii_free=false;
};
*/
      }

      if (brc >= 1000) {
        break;
      }
    }
  }
};

Fraction.prototype.dop_towers_control = function (mySelf_ind) {
  if (!this.canTower || this.alarm_stop_build) {
    return;
  }

  if (this.gold >= 5000 && this.wood >= 1000) {
    let dop_tower;

    for (let i = 0; i < this.ii_dop_towers.length; i++) {
      let obj = this.ii_dop_towers[i];

      if (well_cell_for_building(gameFielg[obj.vertikal][obj.horizont], 100)) {
        dop_tower = new LandObj(
          "tower",
          obj.horizont,
          obj.vertikal,
          0,
          fractions[mySelf_ind]
        );
        dop_tower.dop = true;

        break;
      }
    }

    if (dop_tower) {
      for (let i = 0; i < this.batraks.length; i++) {
        let obj = this.batraks[i];

        //this.batraks[i].workTimeSahta===100&&this.batraks[i].waitTime===30&&
        //	this.batraks[i].iGoBuild===false&&!this.batraks[i].iGetTarget&&this.batraks[i].cell

        if (
          obj.cell &&
          !obj.isBlocked() &&
          obj.waitTime === 30 &&
          !obj.iGoBuild &&
          !obj.iGetTarget
        ) {
          obj.target = dop_tower; //new LandObj("tower",buildCell.horizont,buildCell.vertikal,0,this.fatherFraction);

          obj.target.control = this.control;

          //console.log(builder.target);
          this.towers.push(obj.target);
          this.buildings.push(obj.target);

          this.activeBuildings.push(obj.target);
          obj.target.builders.push(obj);
          obj.iGoBuild = true;
          this.unterTowers.push(obj.target);
          obj.target.iBee = "guard"; //this.fatherFraction.createShablon.towers[iBornCresteShablonNumber].tower;

          this.gold -= 1500;
          this.wood -= 500;

          obj.target.vossal_contacts_moveVectorsInitialization(obj.target);

          if (this.activeBuildings.indexOf(obj.target) === -1) {
            this.activeBuildings.push(obj.target);
          }

          if (!obj.active) {
            this.activeUnits.push(obj);
            obj.active = true;
          }

          obj.way = [];

          /*		
if(this.fraction==="redOrcs"){		
console.log("here : "+this.ii_dop_towers.length);
}; 		
*/

          break;
        }
      }
    }
  }
};

Fraction.prototype.dragons_attack = function () {
  //return;

  for (let i = 0; i < this.dragons.length; i++) {
    let obj = this.dragons[i];

    if (!obj.animys.length && !obj.way.length && !obj.iFight) {
      //obj.ii_attack=true;

      let ranY;
      let ranX;

      while (true) {
        ranY = Math.floor(Math.random() * gameFielg.length);
        ranX = Math.floor(Math.random() * gameFielg.length);

        if (!ranY) {
          ranY = 1;
        }
        if (!ranX) {
          ranX = 1;
        }

        if (ranY === gameFielg.length - 1) {
          ranY--;
        }
        if (ranX === gameFielg.length - 1) {
          ranX--;
        }

        if (
          !gameFielg[ranY][ranX].fraction ||
          gameFielg[ranY][ranX].fraction !== this.fraction
        ) {
          break;
        }
      }

      obj.born_cell = gameFielg[ranY][ranX];
      obj.clickSave = new ClickSave(0, gameFielg[ranY][ranX]);
      obj.ii_attack = true;

      if (!obj.active) {
        this.activeUnits.push(obj);
        obj.active = true;
      }
    }
  }

  /*
if(!this.drag_on_go){
	
	this.drag_on_go=1+Math.floor(Math.random()*this.createShablon.dragons-1);
	
	let ran=Math.floor(Math.random()*2);
	ran=0;
	
if(!ran){this.drag_attack_type="personal";}else{this.drag_attack_type="groop";};	
		
	
};
	
if(this.fraction==="blackOrcs"){console.log(this.drag_on_go);};


if(this.dragons.length>=this.drag_on_go&&!this.dragoon_attack_check){
	
this.dragoon_attack_check=true;	
	
//this.dragoon_attack=[];	

for(let i=0;i<this.drag_on_go;i++){
	

if(!this.dragons[i].isBlockedDrag()&&!this.dragons[i].active){	
	
this.dragoon_attack.push(this.dragons[i]);	
}

	
};

if(!this.dragoon_attack.length){this.dragoon_attack_check=false;};

	
};




if(this.dragoon_attack.length){
	
	
	
	
	
	for(let i=0;i<this.dragoon_attack.length;i++){
		
		let obj=this.dragoon_attack[i];
		
if(obj.hp<=0){this.dragoon_attack.splice(i,1); i--;};
		
	};	
	
	
	
if(this.drag_attack_type==="personal"){
	

	for(let i=0;i<this.dragoon_attack.length;i++){
		
		let obj=this.dragoon_attack[i];
		
if(

!obj.animys.length
&&
(
!obj.active
||
(obj.handCell&&get_distanse_on_lineyka(obj.cell,100,obj.handCell,100)<=1000)
||
obj.ii_saveCell
)

){
	
	
	
let ranY;
let ranX;	
	
while(true){
	
	 ranY=Math.floor(Math.random()*gameFielg.length);
	 ranX=Math.floor(Math.random()*gameFielg.length);
	
if(!ranY){ranY=1;};	
if(!ranX){ranX=1;};	

if(ranY===gameFielg.length-1){ranY--;};	
if(ranX===gameFielg.length-1){ranX--;};


if(!gameFielg[ranY][ranX].fraction||gameFielg[ranY][ranX].fraction!==this.fraction){break;};

};

	
obj.born_cell=gameFielg[ranY][ranX];	
obj.clickSave=new ClickSave(0,gameFielg[ranY][ranX]);	
obj.ii_attack=true;

if(!obj.active){this.activeUnits.push(obj); obj.active=true;};
	
};

		
	};


	
}



if(!this.dragoon_attack.length){this.drag_on_go=false; this.dragoon_attack_check=false;};

	
};




	
//*/
};

Fraction.prototype.strike_control = function () {
  //if(this.fraction==="redOrcs"){console.log(this.ii_warriors_on_strike.length);};

  for (let i = 0; i < this.ii_warriors_on_strike.length; i++) {
    let obj = this.ii_warriors_on_strike[i].unit;

    if (!obj || obj.hp <= 0) {
      this.ii_warriors_on_strike.splice(i, 1);
      i--;
    }
  }

  if (this.ii_warriors_on_strike.length) {
    let obj = this.ii_warriors_on_strike[0];

    if (
      obj.target &&
      obj.target.hp > 0 &&
      obj.target.cell &&
      (obj.target.type !== "mag" ||
        obj.target.fatherFraction.control === "player")
    ) {
      obj.unit.clickSave = new ClickSave(obj.target, 0);
    } else {
      obj.unit.clickSave = new ClickSave(0, obj.cell);
    }

    if (!obj.unit.active) {
      this.activeUnits.push(obj.unit);
      obj.unit.active = true;
    }

    obj.unit.ii_strike = false;

    this.ii_warriors_on_strike.shift();

    //console.log(obj.unit.unitName);
  }
};

Fraction.prototype.ii = function (mySelf_ind) {
  //pausa=1; checkAlarms
  //indexOf update_createShablon alarmTimer isBlocked dopFlyAttack lesopilka peon_managmant

  //iCanTownHollLevelUp
  //if(this.stop){pausa=1;};dopNoPanzer_update unterTowers check_resurs_pro dop_towers_control myJoubeTimer_leso

  this.timer++;

  if (this.timer === 10) {
    for (let i = 0; i < this.warriors.length; i++) {
      let unit = this.warriors[i];

      if (!unit.active && unit.gabarit === 50) {
        if (
          unit.cell &&
          !unit.ii_attack &&
          unit.cell.continent === this.continent &&
          !unit.revers &&
          unit.born_cell &&
          unit.born_cell.fraction &&
          (!unit.cell.fraction || unit.cell.fraction !== this.fraction)
        ) {
          unit.ii_saveCell = unit.born_cell;
          this.activeUnits.push(unit);
          unit.active = true;
          //unit.stopGetTarget=50;
          //unit.ii_back=50;
        }
      }
    }

    if (!this.peoples.length && !this.buildings.length) {
      return;
    }
    if (this.alarmTimer) {
      this.alarmTimer--;
    }

    if (this.alarm_stop_build) {
      this.alarm_stop_build--;
    }

    //if(this.fraction==="h_blue"){
    //	console.log(this.alarm_stop_build);
    //};

    //if(this.fraction==="redOrcs"){console.log("ok");};

    /*
for(let i=0;i<shahts.length;i++){
	
for(let k=0;k<shahts[i].workers.length;k++){
	
	if(shahts[i].workers[k].hp<=0){
		console.log("PIPEZ");
		pausa=1;
		
	};
	
};	
	
};
*/

    //level

    this.update_createShablon();

    this.ii_oil_control();

    /*
if(this.kaput){
	
	for(let i=0;i<this.batraks.length;i++){
		
		if(this.batraks[i].cell&&this.batraks[i].target){this.batraks[i].hp=0;};
		
	};
	
	
};
*/

    //levelUpgrade sea

    //console.log("batraks : "+this.batraks.length);

    //console.log("active : "+this.activeUnits.length);

    //console.log("peoples : "+this.peoples.length);

    //console.log("!!!!!!!!!!!!!!!!!!!!!!");

    //console.log("attack : "+this.attack);
    //console.log("revers : "+this.revers.length);
    //console.log(this.objects_on_continents)	;pausa=1;
    ///////////////////////////////////////////////////////////////////////////////////// !!!!!!!!!!!attack!!!!!!!!!!!!!!!!!

    if (!this.startPoint) {
      let min = [];

      for (
        let i = 0;
        i <
        allContinents[this.peoples[this.peoples.length - 1].cell.continent]
          .shahts.length;
        i++
      ) {
        let dis = get_distanse_on_lineyka(
          this.peoples[this.peoples.length - 1].cell,
          50,
          allContinents[this.peoples[this.peoples.length - 1].cell.continent]
            .shahts[i].cell,
          150
        );

        if (!min.length || min[0] > dis) {
          min = [
            dis,
            allContinents[this.peoples[this.peoples.length - 1].cell.continent]
              .shahts[i].cell,
          ];
        }
      }

      this.startPoint = min[1];
      this.continent = this.startPoint.continent;

      min = [];

      if (!this.master_shablon) {
        for (let i = 1; i < allContinents[this.continent].my_seas.length; i++) {
          for (let k = 0; k < allSeas[i].oils.length; k++) {
            let obj = allSeas[i].oils[k];

            let dis = get_distanse_on_lineyka(obj, 100, this.startPoint, 50);

            if (!min.length || min[0] > dis) {
              min = [dis, obj];
            }
          }

          /*

if(allSeas[i].oils.length){
	
this.sea=i;

//break;	
	
};

//*/

          //batrak
        }

        if (min.length) {
          if (min[0] <= 3500) {
            this.sea = min[1].cell.sea;
          }
        }
      } else {
        this.sea = this.createShablon.sea;
      }
    }

    if (!this.check_create) {
      this.check_create = true;

      this.check_create_shablon();

      //console.log(this.startPoint);

      //pausa=1;
      this.timer = 0;

      return;
    }

    //return;

    //console.log(this.sea); dop_towers_control

    if (!this.revers.length && this.createShablon.attack) {
      //if(this.fraction!=="h_blue"){
      this.ii_attack(mySelf_ind);
      //};

      ///*
      if (this.attack && this.attack.attack_target_fraction_continent) {
        //console.log(this.warriors_on_continents[this.attack.attack_target_fraction_continent].length);

        let istukans = [];

        for (
          let i = 0;
          i <
          this.warriors_on_continents[
            this.attack.attack_target_fraction_continent
          ].length;
          i++
        ) {
          let obj =
            this.warriors_on_continents[
              this.attack.attack_target_fraction_continent
            ][i];

          if (
            obj &&
            !obj.active &&
            obj.hp > 0 &&
            obj.cell &&
            obj.cell.continent &&
            obj.cell.continent !== this.continent &&
            obj.type !== "mag"
          ) {
            //console.log(obj); console.log(this.attack);// pausa=1;

            istukans.push(obj);
          }
        }

        for (let i = 0; i < istukans.length; i++) {
          if (this.attack) {
            let warrior = istukans[i];

            //console.log(this.attack.alive_warriors.indexOf(istukans[i]));

            this.attack.warriors_in_active++;
            this.attack.alive_warriors.push(warrior);

            warrior.ii_attack = true;
            /*
warrior.clickSave=new ClickSave(
this.attack.attack_target_fraction.objects_on_continents[this.attack.attack_target_fraction_continent][0],0
);


if(!warrior.active){this.activeUnits.push(warrior); warrior.active=true;};
*/
          }

          //istukans[i].clickSave=new ClickSave(0,gameFielg[140][140]);

          //this.activeUnits.push(istukans[i]);
        }

        //*/
      }
    }

    this.attack_revers();

    this.ii_panick();

    this.checkAlarms();

    this.strike_control();

    this.timer = 0;

    //if(this.fraction==="redOrcs"){return;};
    this.dop_towers_control(mySelf_ind);

    let prioritetToDo = false;

    let townHollsIsBlocked = false;
    let townHollToUpgrade = false;
    let townHollToBatrack = false;
    let portToShip = false;

    /*
for(let i=0;i<this.townHolls.length;i++){

townHollsIsBlocked=this.townHolls[i].isBlocked();

if(townHollsIsBlocked===false){break;};

};
*/

    let barackOnJobe = 0;
    let towerOnUpgrade = 0;

    let arsisLines = [];

    let warriors =
      this.rizars.length +
      this.mechniks.length +
      this.luchniks.length +
      this.ballistas.length;
    let planWarriors =
      this.createShablon.rizars +
      this.createShablon.mechniks +
      this.createShablon.luchniks +
      this.createShablon.ballistas;

    //console.log(planWarriors)
    ///////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////

    for (let i = 0; i < this.baracks.length; i++) {
      if (
        this.baracks[i].hp > 0 &&
        this.baracks[i].buildready >= this.baracks[i].hpfull &&
        !this.baracks[i].myJoubeTimer
      ) {
        //prioritetToDo="batrak";
        barackOnJobe = this.baracks[i];
        break;
      }
    }

    for (let i = 0; i < this.townHolls.length; i++) {
      if (
        this.townHolls[i].hp > 0 &&
        this.townHolls[i].buildready >= this.townHolls[i].hpfull &&
        !this.townHolls[i].myJoubeTimer
      ) {
        //prioritetToDo="batrak";
        townHollToBatrack = this.townHolls[i];
        break;
      }
    }

    for (let i = 0; i < this.ports.length; i++) {
      if (
        this.ports[i].hp > 0 &&
        this.ports[i].buildready >= this.ports[i].hpfull &&
        !this.ports[i].myJoubeTimer
      ) {
        //prioritetToDo="batrak";
        portToShip = this.ports[i];
        break;
      }
    }

    if (
      this.canLinkor &&
      this.peoples.length < this.maxUnits &&
      this.canLuchnick &&
      !this.myJoubeTimer_fou &&
      this.distroers.length >= this.createShablon.distroers / 4 &&
      this.dopAttack_level < 5
    ) {
      arsisLines.push("dopAttack");
    } else {
      arsisLines.push(0);
    }

    /////////////////////////////////////       mag
    ///*

    for (let i = 0; i < this.mags.length; i++) {
      if (
        !this.mags[i].active &&
        !this.mags[i].ii_attack &&
        this.mags[i].cell &&
        (!this.mags[i].cell.fraction ||
          this.mags[i].cell.fraction !== this.fraction) &&
        this.mags[i].cell.continent === this.continent
      ) {
        this.mags[i].clickSave = new ClickSave(0, this.mags[i].born_cell);

        this.activeUnits.push(this.mags[i]);
        this.mags[i].active = true;

        //console.log("back");
      }
    }

    let temple_for_mag;

    for (let i = 0; i < this.temples.length; i++) {
      let obj = this.temples[i];

      if (!obj.myJoubeTimer && obj.hp > 0 && obj.iComplite) {
        temple_for_mag = obj;
      }
    }

    //console.log(this.maxUnits>this.peoples.length)
    //console.log(temple_for_mag)
    //console.log(this.createShablon.mags>this.mags.length);
    //console.log("!!!!!!!!!!!!!!!!!!!!");

    if (
      this.maxUnits > this.peoples.length &&
      temple_for_mag &&
      this.createShablon.mags > this.mags.length
    ) {
      arsisLines.push("mag_line");
      //console.log("here");
    } else {
      arsisLines.push(0);
    }

    //*/

    //////////////////////////////////////

    /////////////////////////////////////       drg

    this.dragons_attack();

    let dragon_roost_for_dragoon;

    if (this.canDragoon) {
      for (let i = 0; i < this.dragon_roosts.length; i++) {
        let obj = this.dragon_roosts[i];

        if (!obj.myJoubeTimer) {
          dragon_roost_for_dragoon = obj;
        }
      }
    }

    if (
      //this.gold>=10000
      //&&
      this.canDragoon &&
      dragon_roost_for_dragoon &&
      this.maxUnits > this.peoples.length &&
      this.dragons.length < this.createShablon.dragons
    ) {
      arsisLines.push("dragoon_line");
    } else {
      arsisLines.push(0);
    }

    //////////////////////////////////////

    //////////////////////////////////////////////////   sea

    if (this.sea) {
      if (
        (this.canTransport &&
          this.maxUnits > this.peoples.length &&
          portToShip &&
          this.transports.length < this.createShablon.transports) ||
        //oil&&

        (this.canOilTanker &&
          this.maxUnits > this.peoples.length &&
          portToShip &&
          this.oil_tankers.length < this.createShablon.oil_tankers) ||
        //oil&&

        (this.canDistroer &&
          this.maxUnits > this.peoples.length &&
          portToShip &&
          this.distroers.length < this.createShablon.distroers) ||
        //oil&&
        (this.canLinkor &&
          this.canDistroer &&
          this.maxUnits > this.peoples.length &&
          portToShip &&
          this.linkors.length < this.createShablon.linkors) ||
        //oil&&
        (this.canLinkor &&
          this.canOilTanker &&
          this.maxUnits > this.peoples.length &&
          portToShip &&
          this.turtles.length < this.createShablon.turtles)
      ) {
        arsisLines.push("transport_line");

        //console.log("here");
      } else {
        arsisLines.push(0);
      }

      if (
        this.createShablon.flot &&
        !this.alarm_stop_build &&
        this.iHaveTownHoll &&
        this.canLuchnick &&
        (!this.ports.length ||
          (this.ports.length < this.createShablon.p_ports &&
            this.oil_Refs.length &&
            this.foundrys.length) ||
          (!this.oil_Refs.length && this.canOilRef) ||
          (!this.foundrys.length && this.canFoundry))
      ) {
        //"jobePowerLine"
        arsisLines.push("base_sea_line");
      } else {
        arsisLines.push(0);
      }
    }

    ////////////////////////////////////////////////////

    if (
      this.iHaveTownHoll &&
      this.batraks.length < this.createShablon.batraks &&
      townHollToBatrack &&
      this.peoples.length < this.maxUnits
    ) {
      //"jobePowerLine"
      arsisLines.push(
        "jobePowerLine",
        "jobePowerLine",
        "jobePowerLine",
        "jobePowerLine"
      );
    } else {
      arsisLines.push(0, 0, 0, 0);
    }

    if (
      //this.peoples.length<=this.maxUnits
      this.fractionLevel < this.createShablon.level &&
      this.iHaveTownHoll &&
      townHollToBatrack &&
      //&&
      //(this.peoples.length>=planWarriors/5||this.gold>10000)//
      //(this.fractionLevel<2&&this.iCanTownHollLevelUp===1)
      //||
      //(this.fractionLevel<3&&this.iCanTownHollLevelUp===2)
      ((townHollToBatrack.level === 1 &&
        this.canLuchnick &&
        this.canBallista &&
        this.canMechnick) ||
        (townHollToBatrack.level === 2 &&
          this.canLuchnick &&
          this.canBallista &&
          this.canMechnick &&
          this.canRizar))
    ) {
      arsisLines.push("townhollLevelUp");
    } else {
      arsisLines.push(0);
    }

    if (
      this.peoples.length < this.maxUnits &&
      this.canLuchnick &&
      !this.myJoubeTimer_leso &&
      this.luchniks.length >= this.createShablon.luchniks / 4 &&
      (this.dopFlyAttack_level < 5 || this.dopFlySee_level < 3)
    ) {
      arsisLines.push("dopFlyAttack");
    } else {
      arsisLines.push(0);
    }

    if (
      this.canBallista &&
      !this.myJoubeTimer_kuz &&
      this.peoples.length < this.maxUnits &&
      this.rizars.length + this.mechniks.length + this.ballistas.length >=
        (this.createShablon.rizars +
          this.createShablon.mechniks +
          this.createShablon.ballistas) /
          5 &&
      (this.dopNoFlyAttack_level < 5 ||
        this.dopNoFlyPanzer_level < 5 ||
        this.dopBallista_level < 3)
    ) {
      arsisLines.push("dopNoFlyAttack");
    } else {
      arsisLines.push(0);
    }

    if (
      !this.alarm_stop_build &&
      this.canFarm && //this.gold>=5000
      //&&
      //this.wood>=2000
      //&&
      ((this.canDragon_roost &&
        this.dragon_roosts.length < this.createShablon.dragon_roosts.length) ||
        //this.gold>=3000
        //&&
        //this.wood>=1000
        //&&
        (this.canTemple &&
          this.temples.length < this.createShablon.temples.length) ||
        (this.farms.length < this.createShablon.farms.length &&
          this.peoples.length >= this.maxUnits) ||
        (this.farms.length < this.createShablon.farms.length &&
          this.gold >= 10000 &&
          this.wood >= 1000) ||
        (this.baracks.length < this.createShablon.baracks.length &&
          //&&
          //this.canRizar
          this.canBarack &&
          (!this.baracks.length || this.canBallista)) || //(this.canRizar&&this.baracks.length===1)||(this.gold>5000&&this.baracks.length===2)||this.gold>10000
        !this.lesopilkas.length ||
        (this.kuznyas.length < this.createShablon.kuznyas.length &&
          this.canKuznya) ||
        //&&
        //(this.rizars.length+this.mechniks.length+this.ballistas.length)>=5
        (this.ogreBases.length < this.createShablon.ogreBases.length &&
          this.canOgreBase) ||
        (this.altars.length < this.createShablon.altars.length &&
          this.canAltar))
    ) {
      arsisLines.push("baseBuildLine");
    } else {
      arsisLines.push(0);
    }

    let need_tower;

    for (let i = 0; i < this.createShablon.towers.length; i++) {
      if (!this.createShablon.towers[i].iBorn) {
        need_tower = true;
        break;
      }
    }

    /*
if(this.fraction==="redOrcs"){
	
	console.log(this.createShablon.towers.length)
	console.log(this.towers.length)
	console.log(need_tower)
};
//*/

    if (
      (!this.alarm_stop_build || this.unterTowers.length) &&
      this.canTower &&
      (need_tower || this.unterTowers.length)
    ) {
      arsisLines.push("difanseLine", "difanseLine");
    } else {
      arsisLines.push(0, 0);
    }

    if (
      this.canMechnick &&
      barackOnJobe &&
      this.peoples.length < this.maxUnits &&
      ((this.rizars.length < this.createShablon.rizars && this.canRizar) ||
        (this.mechniks.length < this.createShablon.mechniks &&
          this.canMechnick) ||
        (this.luchniks.length < this.createShablon.luchniks &&
          this.canLuchnick) ||
        (this.ballistas.length < this.createShablon.ballistas &&
          this.canBallista))
    ) {
      arsisLines.push("attack", "attack", "attack");
    } else {
      arsisLines.push(0, 0, 0);
    }
    //this.selectLineIndex=0;

    if (this.selectLineIndex >= arsisLines.length) {
      this.selectLineIndex = 0;
    }

    let arsisLine = arsisLines[this.selectLineIndex];

    if (!arsisLine) {
      for (let i = this.selectLineIndex; i < arsisLines.length; i++) {
        if (arsisLines[i]) {
          //arsisLine=arsisLines[i];
          this.selectLineIndex = i;
          break;
        }
      }
    }

    arsisLine = arsisLines[this.selectLineIndex];

    if (!arsisLine) {
      for (let i = 0; i < arsisLines.length; i++) {
        if (arsisLines[i]) {
          //arsisLine=arsisLines[i];
          this.selectLineIndex = i;
          break;
        }
      }
    }

    arsisLine = arsisLines[this.selectLineIndex];

    /*
//if(this.fraction==="lazurOrcs"){

//console.log(arsisLine+" "+	this.selectLineIndex+" arsisLines : "+arsisLines.length);
console.log("arsisLine : "+arsisLine);
console.log("selectLineIndex : "+this.selectLineIndex);
console.log("arsisLines : "+arsisLines);
console.log(this.gold);
console.log("//////////////////////////");

//};
//*/

    if (this.arsisLine_attack) {
      prioritetToDo = this.arsisLine_attack;
    }

    if (arsisLine === "mag_line") {
      prioritetToDo = "mag";
    } else if (arsisLine === "dragoon_line") {
      prioritetToDo = "dragoon";
    } else if (arsisLine === "dopAttack") {
      prioritetToDo = "dopAttack";
    } else if (arsisLine === "transport_line") {
      let m = [];

      if (
        this.canTransport &&
        this.transports.length < this.createShablon.transports
      ) {
        m.push("transport");
      }

      if (
        this.canOilTanker &&
        this.oil_tankers.length < this.createShablon.oil_tankers
      ) {
        m.push("oil_tanker");
      }

      if (
        this.canDistroer &&
        this.distroers.length < this.createShablon.distroers
      ) {
        m.push("distroer");
      }

      if (
        this.canLinkor &&
        this.canDistroer &&
        this.linkors.length < this.createShablon.linkors
      ) {
        m.push("linkor");
      }

      if (this.canLinkor && this.turtles.length < this.createShablon.turtles) {
        m.push("turtle");
      }

      let ran = Math.floor(Math.random() * m.length);

      prioritetToDo = m[ran];

      if (!this.oil_tankers.length) {
        prioritetToDo = "oil_tanker";
      }

      if (
        this.canTransport &&
        this.transports.length < this.createShablon.transports
      ) {
        prioritetToDo = "transport";
      }

      //prioritetToDo="transport"; oil_tankers

      //prioritetToDo="oil_tanker";

      //console.log(ran);
      //console.log(prioritetToDo);
    } else if (arsisLine === "base_sea_line") {
      if (
        !this.ports.length ||
        (this.ports.length < this.createShablon.p_ports &&
          this.oil_Refs.length &&
          this.foundrys.length)
      ) {
        prioritetToDo = "port";
      } else if (!this.oil_Refs.length) {
        prioritetToDo = "oil_Ref";
      } else if (!this.foundrys.length) {
        prioritetToDo = "foundry";
      }
    } else if (arsisLine === "dopNoFlyAttack") {
      if (
        (this.dopNoFlyAttack_level < 5 ||
          this.dopNoFlyPanzer_level < 5 ||
          this.dopBallista_level < 3) &&
        this.canBallista &&
        !this.kuznyas[0].myJoubeTimer
      ) {
        if (this.dopNoFlyAttack_level > this.dopNoFlyPanzer_level) {
          prioritetToDo = "dopNoFlyPanzer_level";
        } else if (this.dopNoFlyPanzer_level < 5) {
          prioritetToDo = "dopNoFlyAttack_level";
        } else if (this.dopBallista < 3) {
          prioritetToDo = "dopBallista";
        }
      }
    } else if (arsisLine === "dopFlyAttack") {
      if (
        (this.dopFlyAttack_level < 5 || this.dopFlySee_level < 3) &&
        this.canLuchnick &&
        !this.myJoubeTimer_leso
      ) {
        if (this.dopFlyAttack_level < 5) {
          prioritetToDo = "dopFlyAttack_level";
        } else if (this.dopFlySee_level < 3) {
          prioritetToDo = "dopFlySee_level";
        }
      }
    } else if (
      /*
(

(this.townHolls[0].level===1&&this.canLuchnick&&this.canBallista&&this.canMechnick)
||
(this.townHolls[0].level===2&&this.canLuchnick&&this.canBallista&&this.canMechnick&&this.canRizar)

)

*/
      arsisLine === "townhollLevelUp" &&
      this.fractionLevel < this.createShablon.level
    ) {
      if (
        townHollToBatrack.level === 1 &&
        this.canLuchnick &&
        this.canBallista &&
        this.canMechnick
      ) {
        townHollToUpgrade = townHollToBatrack;
        prioritetToDo = "levelUpgrade";
      } else if (
        townHollToBatrack.level === 2 &&
        this.canLuchnick &&
        this.canBallista &&
        this.canMechnick &&
        this.canRizar
      ) {
        townHollToUpgrade = townHollToBatrack;
        prioritetToDo = "levelUpgrade";
      }
    } else if (arsisLine === "baseBuildLine") {
      if (
        //this.gold>=5000
        //&&
        //this.wood>=2000
        //&&
        this.canDragon_roost &&
        this.dragon_roosts.length < this.createShablon.dragon_roosts.length
      ) {
        prioritetToDo = "dragon_roost";
      }

      if (
        //this.gold>=3000
        //&&
        //this.wood>=1000
        //&&
        this.canTemple &&
        this.temples.length < this.createShablon.temples.length
      ) {
        prioritetToDo = "temple";
      }

      if (
        this.farms.length < this.createShablon.farms.length &&
        this.gold >= 10000 &&
        this.wood >= 1000 &&
        this.canFarm
      ) {
        prioritetToDo = "farm";
      }

      if (
        this.canAltar &&
        this.altars.length < this.createShablon.altars.length
      ) {
        prioritetToDo = "altar";
      }

      if (
        this.canOgreBase &&
        this.ogreBases.length < this.createShablon.ogreBases.length
      ) {
        prioritetToDo = "ogreBase";
      }

      if (
        this.canKuznya &&
        this.kuznyas.length < this.createShablon.kuznyas.length
        //&&
        //(this.rizars.length+this.mechniks.length+this.ballistas.length)>=5
      ) {
        prioritetToDo = "kuznya";
      }

      if (
        this.canBarack &&
        this.baracks.length < this.createShablon.baracks.length &&
        (!this.baracks.length || this.canBallista) //(this.canRizar&&this.baracks.length===1)||(this.gold>5000&&this.baracks.length===2)||this.gold>10000
      ) {
        prioritetToDo = "barack";
      }

      if (
        this.peoples.length >= this.maxUnits &&
        this.farms.length < this.createShablon.farms.length &&
        this.canFarm
      ) {
        prioritetToDo = "farm";
      }

      if (!this.lesopilkas.length && this.canLesopilka) {
        prioritetToDo = "lesopilka";
      }

      //console.log(prioritetToDo);
    } else if (arsisLine === "difanseLine") {
      if (need_tower) {
        prioritetToDo = "tower";
      }

      if (this.canGuardTower || this.canCannonTower) {
        for (let i = 0; i < this.unterTowers.length; i++) {
          if (
            this.unterTowers[i].hp > 0 &&
            this.unterTowers[i].buildready >= this.unterTowers[i].hpfull
          ) {
            prioritetToDo = "towerOnUpgrade";
            towerOnUpgrade = this.unterTowers[i];
          }
        } //prioritetToDo="tower";
      }
    } else if (arsisLine === "jobePowerLine") {
      prioritetToDo = "batrak";
    } else if (arsisLine === "attack" && !this.arsisLine_attack) {
      let m = [];

      if (
        this.canLuchnick &&
        this.luchniks.length < this.createShablon.luchniks
      ) {
        m.push("luchnik", "luchnik", "luchnik");
      }

      if (
        this.canBallista &&
        this.ballistas.length < this.createShablon.ballistas
      ) {
        m.push("ballista");
      }

      if (
        this.canMechnick &&
        this.mechniks.length < this.createShablon.mechniks
      ) {
        m.push("mechnick", "mechnick");
      }

      if (this.canRizar && this.rizars.length < this.createShablon.rizars) {
        m.push("rizar", "rizar", "rizar", "rizar");
      }

      let ran = Math.floor(Math.random() * m.length);

      //if(!prioritetToDo){
      prioritetToDo = m[ran];

      this.arsisLine_attack = prioritetToDo;

      //if(this.fraction==="redOrcs"){
      //	console.log("m : "+m.length+" ran : "+ran);
      //};

      //};
    }

    //console.log("iHaveTownHoll : "+this.iHaveTownHoll);

    /////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////

    if (this.farms.length < 1 && this.canFarm) {
      prioritetToDo = "farm";
    }

    if (
      this.batraks.length < this.createShablon.batraks / 1.5 &&
      this.peoples.length < this.maxUnits
    ) {
      for (let i = 0; i < this.townHolls.length; i++) {
        if (
          this.townHolls[i].hp > 0 &&
          this.townHolls[i].buildready >= this.townHolls[i].hpfull &&
          !this.townHolls[i].myJoubeTimer
        ) {
          prioritetToDo = "batrak";
          townHollToBatrack = this.townHolls[i];
          break;
        }
      }
    }

    ///*

    if (
      this.fractionLevel < this.createShablon.level &&
      this.iHaveTownHoll &&
      !this.townHolls[0].myJoubeTimer &&
      //&&
      //(this.peoples.length>=planWarriors/5||this.gold>10000)
      ((this.fractionLevel < 2 && this.iCanTownHollLevelUp === 1) ||
        (this.fractionLevel < 3 && this.iCanTownHollLevelUp === 2))
    ) {
      if (this.fractionLevel < 2 && this.iCanTownHollLevelUp === 1) {
        for (let i = 0; i < this.townHolls.length; i++) {
          if (
            this.townHolls[i].level === 1 &&
            !this.townHolls[i].myJoubeTimer
          ) {
            townHollToUpgrade = this.townHolls[i];
            prioritetToDo = "levelUpgrade";
            break;
          }
        }
      } else if (this.fractionLevel < 3 && this.iCanTownHollLevelUp === 2) {
        for (let i = 0; i < this.townHolls.length; i++) {
          if (
            this.townHolls[i].level === 2 &&
            !this.townHolls[i].myJoubeTimer
          ) {
            townHollToUpgrade = this.townHolls[i];
            prioritetToDo = "levelUpgrade";
            break;
          }
        }
      }
    }

    //*/

    if (!this.townHolls.length) {
      prioritetToDo = "townHoll";
    }

    /*

if(prioritetToDo){
	
	
	
	if(prioritetToDo==="townHoll"&&
	(this.gold<1000||this.wood<1000)
	){
		
	if(this.gold<1000){prioritetToDo="gold";}else if(this.wood<1000){prioritetToDo="wood";};
			
	}
	else if(prioritetToDo==="farm"&&
	(this.gold<500||this.wood<300)
	){
		
	if(this.gold<500){prioritetToDo="gold";}else if(this.wood<300){prioritetToDo="wood";};	
		
	}
	else if(prioritetToDo==="batrak"){
		
	if(this.gold<400){prioritetToDo="gold";};	
		
	}
	else if(prioritetToDo==="lesopilka"||prioritetToDo==="barack"||prioritetToDo==="kuznya"){
			
		if(this.gold<700){prioritetToDo="gold";}else if(this.wood<500){prioritetToDo="wood";};
			
	}
		else if(prioritetToDo==="rizar"){
		
		if(this.gold<1000){prioritetToDo="gold";}else if(this.wood<100){prioritetToDo="wood";};
		
	}
	else if(prioritetToDo==="mechnick"){
		
		if(this.gold<600){prioritetToDo="gold";};
		
	}
	else if(prioritetToDo==="luchnik"){
		
		if(this.gold<500){prioritetToDo="gold";}else if(this.wood<50){prioritetToDo="wood";};
		
	}
		else if(prioritetToDo==="ballista"){
		
		if(this.gold<1000){prioritetToDo="gold";}else if(this.wood<300){prioritetToDo="wood";};
		
	}
	else if(prioritetToDo==="tower"){
		
		if(this.gold<1500){prioritetToDo="gold";}else if(this.wood<500){prioritetToDo="wood";};
		
	}

	else if(prioritetToDo==="towerOnUpgrade"){
		
		if(this.gold<500){prioritetToDo="gold";}else if(this.wood<200){prioritetToDo="wood";};
		
	}
	else if(prioritetToDo==="dopNoFlyAttack_level"||prioritetToDo==="dopNoFlyPanzer_level"||
	        prioritetToDo==="dopFlyAttack_level"||prioritetToDo==="dopFlySee_level"
			||prioritetToDo==="dopBallista"||prioritetToDo==="dopAttack"
	){
		
		if(this.gold<1000){prioritetToDo="gold";}else if(this.wood<500){prioritetToDo="wood";};
		
	}
	else if(prioritetToDo==="levelUpgrade"){
		
		if(this.gold<2000){prioritetToDo="gold";}else if(this.wood<1000){prioritetToDo="wood";};
		
	}
	else if(prioritetToDo==="ogreBase"||prioritetToDo==="altar"||prioritetToDo==="dragon_roost"||prioritetToDo==="temple"){
		
		if(this.gold<2000){prioritetToDo="gold";}else if(this.wood<1000){prioritetToDo="wood";};
		
	}
		else if(prioritetToDo==="port"){
		
		if(this.gold<1000){prioritetToDo="gold";}else if(this.wood<300){prioritetToDo="wood";};
		
	}
			else if(prioritetToDo==="transport"||prioritetToDo==="oil_tanker"){
		
		if(this.gold<1000){prioritetToDo="gold";}else if(this.wood<300){prioritetToDo="wood";};
		
	}
			else if(prioritetToDo==="oil_Ref"||prioritetToDo==="foundry"){
		
		if(this.gold<1000){prioritetToDo="gold";}else if(this.wood<300){prioritetToDo="wood";};
		
	}
				else if(prioritetToDo==="distroer"){
		
		if(this.gold<1000){prioritetToDo="gold";}else if(this.wood<300){prioritetToDo="wood";};
		
	}
					else if(prioritetToDo==="linkor"){
		
		if(this.gold<1500){prioritetToDo="gold";}else if(this.wood<500){prioritetToDo="wood";};
		
	}
				else if(prioritetToDo==="turtle"){
		
		if(this.gold<1200){prioritetToDo="gold";}else if(this.wood<300){prioritetToDo="wood";};
		
	}
					else if(prioritetToDo==="mag"){
		
		if(this.gold<1500){prioritetToDo="gold";};
		
	}
	
};	
	

*/

    prioritetToDo = this.check_resurs_pro(prioritetToDo);

    /*
//if(){
	
	//if(this.selectLineIndex===arsisLines.length){this.selectLineIndex=0;};
//let arsisLine=arsisLines[this.selectLineIndex];
	
//prioritetToDo=this.check_resurs_pro(prioritetToDo);	
	
	
	
	console.log("///////////////////////////////////");
	console.log("prioritetToDo : "+prioritetToDo);
	console.log("arsisLine : "+arsisLine);
	console.log("arsisLines : "+arsisLines);
	console.log("selectLineIndex : "+this.selectLineIndex);
	//console.log(this.gold);
	
	
	
	
	//pausa=1;
//};
//*/

    //dragon_roost

    //console.log(prioritetToDo);

    //console.log(this.gold);
    /*
if(this.fraction==="lazurOrcs"){
console.log("prioritetToDo : "+prioritetToDo)
};
//*/

    //console.log("prioritetToDo : "+prioritetToDo)

    //prioritetToDo="altar";

    if (prioritetToDo === "mag") {
      //temple_for_mag

      //console.log("here"); pausa=1;

      let time = 1000;

      //if(this.fraction==="redOrcs"){time=2000;};

      this.selectLineIndex++;

      temple_for_mag.myJoube = true;
      temple_for_mag.myJoubeTimer = time;

      if (this.activeBuildings.indexOf(temple_for_mag) === -1) {
        this.activeBuildings.push(temple_for_mag);
      }

      this.gold -= 1500;
    } else if (prioritetToDo === "temple") {
      ///*

      let builder = 0;

      if (this.freeBatraks.length) {
        for (let i = 0; i < this.freeBatraks.length; i++) {
          let ok = this.freeBatraks[i].isBlocked();

          if (!ok) {
            builder = this.freeBatraks[i];
            break;
          }

          //break;
        }
      }
      if (!builder) {
        for (let i = 0; i < this.batraks.length; i++) {
          if (
            this.batraks[i].workTimeSahta === 100 &&
            this.batraks[i].waitTime === 30 &&
            this.batraks[i].iGoBuild === false &&
            !this.batraks[i].iGetTarget &&
            this.batraks[i].cell
          ) {
            let ok = this.batraks[i].isBlocked();

            if (!ok) {
              builder = this.batraks[i];
              break;
            }

            //builder=this.batraks[i];

            //break;
          }
        }
      }

      if (builder) {
        //console.log(prioritetToDo);

        this.selectLineIndex++;

        builder.createBuilding("temple", builder);

        if (!builder.active) {
          this.activeUnits.push(builder);
          builder.active = true;
        }

        builder.iGoBuild = true;
      }

      //*/
    } else if (prioritetToDo === "dragoon") {
      let time = 2000;

      //if(this.fraction==="redOrcs"){time=2000;};

      this.selectLineIndex++;

      dragon_roost_for_dragoon.myJoube = true;
      dragon_roost_for_dragoon.myJoubeTimer = time;

      if (this.activeBuildings.indexOf(dragon_roost_for_dragoon) === -1) {
        this.activeBuildings.push(dragon_roost_for_dragoon);
      }

      this.gold -= 5000;
    } else if (prioritetToDo === "dragon_roost") {
      ///*

      let builder = 0;

      if (this.freeBatraks.length) {
        for (let i = 0; i < this.freeBatraks.length; i++) {
          let ok = this.freeBatraks[i].isBlocked();

          if (!ok) {
            builder = this.freeBatraks[i];
            break;
          }

          //break;
        }
      }
      if (!builder) {
        for (let i = 0; i < this.batraks.length; i++) {
          if (
            this.batraks[i].workTimeSahta === 100 &&
            this.batraks[i].waitTime === 30 &&
            this.batraks[i].iGoBuild === false &&
            !this.batraks[i].iGetTarget &&
            this.batraks[i].cell
          ) {
            let ok = this.batraks[i].isBlocked();

            if (!ok) {
              builder = this.batraks[i];
              break;
            }

            //builder=this.batraks[i];

            //break;
          }
        }
      }

      if (builder) {
        //console.log(prioritetToDo);

        this.selectLineIndex++;

        builder.createBuilding("dragon_roost", builder);

        if (!builder.active) {
          this.activeUnits.push(builder);
          builder.active = true;
        }

        builder.iGoBuild = true;
      }

      //*/
    } else if (prioritetToDo === "turtle") {
      //console.log("turtle");

      this.gold -= 1200;
      this.wood -= 300;

      this.selectLineIndex++;

      portToShip.myJoubeTimer = 500;
      portToShip.myJoube = "turtle";

      if (this.activeBuildings.indexOf(portToShip) === -1) {
        this.activeBuildings.push(portToShip);
      }
    } else if (prioritetToDo === "dopAttack") {
      this.myJoubeTimer_fou = 500;
      this.myJoube_fou = "dopAttack";

      //if(this.activeBuildings.indexOf(this.foundrys[0])===-1){this.activeBuildings.push(this.foundrys[0]);};

      this.selectLineIndex++;
    } else if (prioritetToDo === "foundry") {
      ///*

      let builder = 0;

      if (this.freeBatraks.length) {
        for (let i = 0; i < this.freeBatraks.length; i++) {
          let ok = this.freeBatraks[i].isBlocked();

          if (!ok) {
            builder = this.freeBatraks[i];
            break;
          }

          //break;
        }
      }
      if (!builder) {
        for (let i = 0; i < this.batraks.length; i++) {
          if (
            this.batraks[i].workTimeSahta === 100 &&
            this.batraks[i].waitTime === 30 &&
            this.batraks[i].iGoBuild === false &&
            !this.batraks[i].iGetTarget &&
            this.batraks[i].cell
          ) {
            let ok = this.batraks[i].isBlocked();

            if (!ok) {
              builder = this.batraks[i];
              break;
            }

            //builder=this.batraks[i];

            //break;
          }
        }
      }

      if (builder) {
        //console.log(prioritetToDo);

        this.selectLineIndex++;

        builder.createBuilding("foundry", builder);

        if (!builder.active) {
          this.activeUnits.push(builder);
          builder.active = true;
        }

        builder.iGoBuild = true;
      }

      //*/
    } else if (prioritetToDo === "linkor") {
      this.gold -= 1500;
      this.wood -= 500;

      this.selectLineIndex++;

      portToShip.myJoubeTimer = 1000;
      portToShip.myJoube = "linkor";

      if (this.activeBuildings.indexOf(portToShip) === -1) {
        this.activeBuildings.push(portToShip);
      }
    } else if (prioritetToDo === "distroer") {
      this.gold -= 1000;
      this.wood -= 300;

      this.selectLineIndex++;

      portToShip.myJoubeTimer = 500;
      portToShip.myJoube = "distroer";

      if (this.activeBuildings.indexOf(portToShip) === -1) {
        this.activeBuildings.push(portToShip);
      }
    } else if (prioritetToDo === "oil_tanker") {
      this.gold -= 1000;
      this.wood -= 300;

      this.selectLineIndex++;

      portToShip.myJoubeTimer = 300;
      portToShip.myJoube = "oil_tanker";

      if (this.activeBuildings.indexOf(portToShip) === -1) {
        this.activeBuildings.push(portToShip);
      }
    } else if (prioritetToDo === "oil_Ref") {
      ///*

      let builder = 0;

      if (this.freeBatraks.length) {
        for (let i = 0; i < this.freeBatraks.length; i++) {
          let ok = this.freeBatraks[i].isBlocked();

          if (!ok) {
            builder = this.freeBatraks[i];
            break;
          }

          //break;
        }
      }
      if (!builder) {
        for (let i = 0; i < this.batraks.length; i++) {
          if (
            this.batraks[i].workTimeSahta === 100 &&
            this.batraks[i].waitTime === 30 &&
            this.batraks[i].iGoBuild === false &&
            !this.batraks[i].iGetTarget &&
            this.batraks[i].cell
          ) {
            let ok = this.batraks[i].isBlocked();

            if (!ok) {
              builder = this.batraks[i];
              break;
            }

            //builder=this.batraks[i];

            //break;
          }
        }
      }

      if (builder) {
        //console.log(prioritetToDo);

        this.selectLineIndex++;

        builder.createBuilding("oil_Ref", builder);

        if (!builder.active) {
          this.activeUnits.push(builder);
          builder.active = true;
        }

        builder.iGoBuild = true;
      }

      //*/
    } else if (prioritetToDo === "transport") {
      this.gold -= 1000;
      this.wood -= 300;

      this.selectLineIndex++;

      portToShip.myJoubeTimer = 500;
      portToShip.myJoube = "transport";

      if (this.activeBuildings.indexOf(portToShip) === -1) {
        this.activeBuildings.push(portToShip);
      }
    } else if (prioritetToDo === "port") {
      let builder = 0;

      if (this.freeBatraks.length) {
        for (let i = 0; i < this.freeBatraks.length; i++) {
          let ok = this.freeBatraks[i].isBlocked();

          if (!ok) {
            builder = this.freeBatraks[i];
            break;
          }

          //break;
        }
      }
      if (!builder) {
        for (let i = 0; i < this.batraks.length; i++) {
          if (
            this.batraks[i].workTimeSahta === 100 &&
            this.batraks[i].waitTime === 30 &&
            this.batraks[i].iGoBuild === false &&
            !this.batraks[i].iGetTarget &&
            this.batraks[i].cell
          ) {
            let ok = this.batraks[i].isBlocked();

            if (!ok) {
              builder = this.batraks[i];
              break;
            }

            //builder=this.batraks[i];

            //break;
          }
        }
      }

      if (builder) {
        //console.log(prioritetToDo);

        this.selectLineIndex++;

        builder.createBuilding("port", builder);

        if (!builder.active) {
          this.activeUnits.push(builder);
          builder.active = true;
        }
        //if(this.batraksOnGolg.indexOf(builder)!==-1){this.batraksOnGolg.splice(this.batraksOnGolg.indexOf(builder),1);};
        //if(this.batraksOnWood.indexOf(builder)!==-1){this.batraksOnWood.splice(this.batraksOnWood.indexOf(builder),1);};
        //if(this.freeBatraks.indexOf(builder)!==-1){this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);};

        builder.iGoBuild = true;
      }
    } else if (prioritetToDo === "altar") {
      //console.log(this.freeBatraks);

      let builder = 0;

      if (this.freeBatraks.length) {
        for (let i = 0; i < this.freeBatraks.length; i++) {
          let ok = this.freeBatraks[i].isBlocked();

          if (!ok) {
            builder = this.freeBatraks[i];
            break;
          }

          //break;
        }
      }
      if (!builder) {
        for (let i = 0; i < this.batraks.length; i++) {
          if (
            this.batraks[i].workTimeSahta === 100 &&
            this.batraks[i].waitTime === 30 &&
            this.batraks[i].iGoBuild === false &&
            !this.batraks[i].iGetTarget &&
            this.batraks[i].cell
          ) {
            let ok = this.batraks[i].isBlocked();

            if (!ok) {
              builder = this.batraks[i];
              break;
            }

            //builder=this.batraks[i];

            //break;
          }
        }
      }

      if (builder) {
        //console.log(prioritetToDo);

        this.selectLineIndex++;

        builder.createBuilding("altar", builder);
        //indexOf
        //this.activeUnits.push(builder);
        //this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);
        if (!builder.active) {
          this.activeUnits.push(builder);
          builder.active = true;
        }
        //if(this.batraksOnGolg.indexOf(builder)!==-1){this.batraksOnGolg.splice(this.batraksOnGolg.indexOf(builder),1);};
        //if(this.batraksOnWood.indexOf(builder)!==-1){this.batraksOnWood.splice(this.batraksOnWood.indexOf(builder),1);};
        //if(this.freeBatraks.indexOf(builder)!==-1){this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);};

        builder.iGoBuild = true;
      }

      //console.log("ok");

      //console.log(this.freeBatraks.length+" too");
      //this.gold-=700;
      //this.wood-=500;
    } else if (prioritetToDo === "rizar") {
      this.arsisLine_attack = false;
      //console.log(prioritetToDo);

      this.selectLineIndex++;

      barackOnJobe.myJoubeTimer = 500;
      barackOnJobe.myJoube = "rizar";

      if (this.activeBuildings.indexOf(barackOnJobe) === -1) {
        this.activeBuildings.push(barackOnJobe);
      }

      this.gold -= 1000;
      this.wood -= 100;

      //console.log("ok");
    } else if (prioritetToDo === "ogreBase") {
      //console.log(this.freeBatraks);

      let builder = 0;

      if (this.freeBatraks.length) {
        for (let i = 0; i < this.freeBatraks.length; i++) {
          let ok = this.freeBatraks[i].isBlocked();

          if (!ok) {
            builder = this.freeBatraks[i];
            break;
          }

          //break;
        }
      }
      if (!builder) {
        for (let i = 0; i < this.batraks.length; i++) {
          if (
            this.batraks[i].workTimeSahta === 100 &&
            this.batraks[i].waitTime === 30 &&
            this.batraks[i].iGoBuild === false &&
            !this.batraks[i].iGetTarget &&
            this.batraks[i].cell
          ) {
            let ok = this.batraks[i].isBlocked();

            if (!ok) {
              builder = this.batraks[i];
              break;
            }

            //builder=this.batraks[i];

            //break;
          }
        }
      }

      if (builder) {
        //console.log(prioritetToDo);

        this.selectLineIndex++;

        builder.createBuilding("ogreBase", builder);

        //this.activeUnits.push(builder);
        //this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);
        if (!builder.active) {
          this.activeUnits.push(builder);
          builder.active = true;
        }
        //if(this.batraksOnGolg.indexOf(builder)!==-1){this.batraksOnGolg.splice(this.batraksOnGolg.indexOf(builder),1);};
        //if(this.batraksOnWood.indexOf(builder)!==-1){this.batraksOnWood.splice(this.batraksOnWood.indexOf(builder),1);};
        //if(this.freeBatraks.indexOf(builder)!==-1){this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);};

        builder.iGoBuild = true;
      }

      //console.log("ok");

      //console.log(this.freeBatraks.length+" too");
      //this.gold-=700;
      //this.wood-=500;
    } else if (prioritetToDo === "ballista") {
      this.arsisLine_attack = false;
      ///console.log(prioritetToDo);

      this.selectLineIndex++;

      barackOnJobe.myJoubeTimer = 350;
      barackOnJobe.myJoube = "ballista";

      if (this.activeBuildings.indexOf(barackOnJobe) === -1) {
        this.activeBuildings.push(barackOnJobe);
      }

      this.gold -= 1000;
      this.wood -= 300;

      //console.log("ok");
    } else if (prioritetToDo === "levelUpgrade") {
      //console.log("typnyak");

      //console.log(prioritetToDo);

      this.selectLineIndex++;

      townHollToUpgrade.myJoube = "levelUpgrade";
      townHollToUpgrade.myJoubeTimer = 1500;

      this.gold -= 2000;
      this.wood -= 1000;

      if (this.activeBuildings.indexOf(townHollToUpgrade) === -1) {
        this.activeBuildings.push(townHollToUpgrade);
      }
    } else if (
      prioritetToDo === "dopFlyAttack_level" ||
      prioritetToDo === "dopFlySee_level"
    ) {
      //console.log(prioritetToDo);

      this.selectLineIndex++;

      this.myJoubeTimer_leso = 1500;

      if (prioritetToDo === "dopFlyAttack_level") {
        this.myJoube_leso = "dopFlyAttack_level";
      }

      if (prioritetToDo === "dopFlySee_level") {
        this.myJoube_leso = "dopFlySee_level";
      }

      //if(this.activeBuildings.indexOf(this.lesopilkas[0])===-1){this.activeBuildings.push(this.lesopilkas[0]);};

      this.gold -= 1000;
      this.wood -= 500;
    } else if (
      prioritetToDo === "dopNoFlyAttack_level" ||
      prioritetToDo === "dopNoFlyPanzer_level" ||
      prioritetToDo === "dopBallista"
    ) {
      //console.log(prioritetToDo);

      this.selectLineIndex++;

      this.myJoubeTimer_kuz = 1500;

      if (prioritetToDo === "dopNoFlyAttack_level") {
        this.myJoube_kuz = "dopNoFlyAttack_level";
      }

      if (prioritetToDo === "dopNoFlyPanzer_level") {
        this.myJoube_kuz = "dopNoFlyPanzer_level";
      }

      if (prioritetToDo === "dopBallista") {
        this.myJoube_kuz = "dopBallista";
      }

      //if(this.activeBuildings.indexOf(this.kuznyas[0])===-1){this.activeBuildings.push(this.kuznyas[0]);};

      this.gold -= 1000;
      this.wood -= 500;
    } else if (prioritetToDo === "kuznya") {
      //console.log(this.freeBatraks);

      let builder = 0;

      if (this.freeBatraks.length) {
        for (let i = 0; i < this.freeBatraks.length; i++) {
          let ok = this.freeBatraks[i].isBlocked();

          if (!ok) {
            builder = this.freeBatraks[i];
            break;
          }

          //break;
        }
      }
      if (!builder) {
        for (let i = 0; i < this.batraks.length; i++) {
          if (
            this.batraks[i].workTimeSahta === 100 &&
            this.batraks[i].waitTime === 30 &&
            this.batraks[i].iGoBuild === false &&
            !this.batraks[i].iGetTarget &&
            this.batraks[i].cell
          ) {
            let ok = this.batraks[i].isBlocked();

            if (!ok) {
              builder = this.batraks[i];
              break;
            }

            //builder=this.batraks[i];

            //break;
          }
        }
      }

      if (builder) {
        //console.log(prioritetToDo);

        this.selectLineIndex++;

        builder.createBuilding("kuznya", builder);

        //this.activeUnits.push(builder);
        //this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);
        if (!builder.active) {
          this.activeUnits.push(builder);
          builder.active = true;
        }
        //if(this.batraksOnGolg.indexOf(builder)!==-1){this.batraksOnGolg.splice(this.batraksOnGolg.indexOf(builder),1);};
        //if(this.batraksOnWood.indexOf(builder)!==-1){this.batraksOnWood.splice(this.batraksOnWood.indexOf(builder),1);};
        //if(this.freeBatraks.indexOf(builder)!==-1){this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);};

        builder.iGoBuild = true;
      }

      //console.log("ok");

      //console.log(this.freeBatraks.length+" too");
      //this.gold-=700;
      //this.wood-=500;
    } else if (prioritetToDo === "towerOnUpgrade") {
      //console.log(prioritetToDo);

      this.selectLineIndex++;

      //console.log("upgrade");
      towerOnUpgrade.upgradeTimer = 500;
      towerOnUpgrade.upgrade = towerOnUpgrade.iBee;

      this.unterTowers.splice(this.unterTowers.indexOf(towerOnUpgrade), 1);

      if (this.activeBuildings.indexOf(towerOnUpgrade) === -1) {
        this.activeBuildings.push(towerOnUpgrade);
      }

      this.gold -= 500;
      this.wood -= 200;
    } else if (prioritetToDo === "tower") {
      //console.log(this.freeBatraks.length);
      let builder = 0;

      if (this.freeBatraks.length) {
        for (let i = 0; i < this.freeBatraks.length; i++) {
          let ok = this.freeBatraks[i].isBlocked();

          if (!ok) {
            builder = this.freeBatraks[i];
            break;
          }

          //break;
        }
      }

      if (!builder) {
        for (let i = 0; i < this.batraks.length; i++) {
          if (
            this.batraks[i].workTimeSahta === 100 &&
            this.batraks[i].waitTime === 30 &&
            this.batraks[i].iGoBuild === false &&
            !this.batraks[i].iGetTarget &&
            this.batraks[i].cell
          ) {
            let ok = this.batraks[i].isBlocked();

            if (!ok) {
              builder = this.batraks[i];
              break;
            }

            //builder=this.batraks[i];

            //break;
          }
        }
      }

      if (builder) {
        //console.log(prioritetToDo);
        //console.log("++++++++++")

        this.selectLineIndex++;

        builder.createBuilding("tower", builder);

        if (!builder.active) {
          this.activeUnits.push(builder);
          builder.active = true;
        }
        //if(this.batraksOnGolg.indexOf(builder)!==-1){this.batraksOnGolg.splice(this.batraksOnGolg.indexOf(builder),1);};
        //if(this.batraksOnWood.indexOf(builder)!==-1){this.batraksOnWood.splice(this.batraksOnWood.indexOf(builder),1);};
        //if(this.freeBatraks.indexOf(builder)!==-1){this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);};

        builder.iGoBuild = true;
      }
    } else if (prioritetToDo === "luchnik") {
      this.arsisLine_attack = false;
      //console.log(prioritetToDo);

      this.selectLineIndex++;

      barackOnJobe.myJoubeTimer = 250;
      barackOnJobe.myJoube = "luchnik";

      if (this.activeBuildings.indexOf(barackOnJobe) === -1) {
        this.activeBuildings.push(barackOnJobe);
      }

      this.gold -= 500;
      this.wood -= 50;

      //console.log("ok");
    } else if (prioritetToDo === "mechnick") {
      this.arsisLine_attack = false;
      //console.log(prioritetToDo);

      this.selectLineIndex++;

      barackOnJobe.myJoubeTimer = 250;
      barackOnJobe.myJoube = "mechnick";

      if (this.activeBuildings.indexOf(barackOnJobe) === -1) {
        this.activeBuildings.push(barackOnJobe);
      }

      this.gold -= 600;
      //console.log("ok");
    } else if (prioritetToDo === "barack") {
      //console.log(this.freeBatraks);

      let builder = 0;

      if (this.freeBatraks.length) {
        for (let i = 0; i < this.freeBatraks.length; i++) {
          let ok = this.freeBatraks[i].isBlocked();

          if (!ok) {
            builder = this.freeBatraks[i];
            break;
          }

          //break;
        }
      }
      if (!builder) {
        for (let i = 0; i < this.batraks.length; i++) {
          if (
            this.batraks[i].workTimeSahta === 100 &&
            this.batraks[i].waitTime === 30 &&
            this.batraks[i].iGoBuild === false &&
            !this.batraks[i].iGetTarget &&
            this.batraks[i].cell
          ) {
            let ok = this.batraks[i].isBlocked();

            if (!ok) {
              builder = this.batraks[i];
              break;
            }

            //builder=this.batraks[i];

            //break;
          }
        }
      }

      if (builder) {
        //console.log(prioritetToDo);

        this.selectLineIndex++;

        builder.createBuilding("barack", builder);

        //this.activeUnits.push(builder);
        //this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);
        if (!builder.active) {
          this.activeUnits.push(builder);
          builder.active = true;
        }
        //if(this.batraksOnGolg.indexOf(builder)!==-1){this.batraksOnGolg.splice(this.batraksOnGolg.indexOf(builder),1);};
        //if(this.batraksOnWood.indexOf(builder)!==-1){this.batraksOnWood.splice(this.batraksOnWood.indexOf(builder),1);};
        //if(this.freeBatraks.indexOf(builder)!==-1){this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);};

        builder.iGoBuild = true;
      }

      //console.log("ok");

      //console.log(this.freeBatraks.length+" too");
    } else if (prioritetToDo === "lesopilka") {
      //console.log(this.freeBatraks);

      let builder = 0;

      if (this.freeBatraks.length) {
        for (let i = 0; i < this.freeBatraks.length; i++) {
          let ok = this.freeBatraks[i].isBlocked();

          if (!ok) {
            builder = this.freeBatraks[i];
            break;
          }

          //break;
        }
      }
      if (!builder) {
        for (let i = 0; i < this.batraks.length; i++) {
          if (
            this.batraks[i].workTimeSahta === 100 &&
            this.batraks[i].waitTime === 30 &&
            this.batraks[i].iGoBuild === false &&
            !this.batraks[i].iGetTarget &&
            this.batraks[i].cell
          ) {
            let ok = this.batraks[i].isBlocked();

            if (!ok) {
              builder = this.batraks[i];
              break;
            }

            //builder=this.batraks[i];

            //break;
          }
        }
      }

      if (builder) {
        //console.log(prioritetToDo);

        this.selectLineIndex++;

        builder.createBuilding("lesopilka", builder);

        //this.activeUnits.push(builder);
        //this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);
        if (!builder.active) {
          this.activeUnits.push(builder);
          builder.active = true;
        }
        //if(this.batraksOnGolg.indexOf(builder)!==-1){this.batraksOnGolg.splice(this.batraksOnGolg.indexOf(builder),1);};
        //if(this.batraksOnWood.indexOf(builder)!==-1){this.batraksOnWood.splice(this.batraksOnWood.indexOf(builder),1);};
        //if(this.freeBatraks.indexOf(builder)!==-1){this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);};

        builder.iGoBuild = true;
      }

      //console.log("ok");

      //console.log(this.freeBatraks.length+" too");
    } else if (prioritetToDo === "townHoll") {
      //console.log(this.freeBatraks);

      let builder = 0;

      if (this.freeBatraks.length) {
        for (let i = 0; i < this.freeBatraks.length; i++) {
          let ok = this.freeBatraks[i].isBlocked();

          if (!ok) {
            builder = this.freeBatraks[i];
            break;
          }

          //break;
        }
      }
      if (!builder) {
        for (let i = 0; i < this.batraks.length; i++) {
          if (
            this.batraks[i].workTimeSahta === 100 &&
            this.batraks[i].waitTime === 30 &&
            this.batraks[i].iGoBuild === false &&
            !this.batraks[i].iGetTarget &&
            this.batraks[i].cell
          ) {
            let ok = this.batraks[i].isBlocked();

            if (!ok) {
              builder = this.batraks[i];
              break;
            }

            //builder=this.batraks[i];

            //break;
          }
        }
      }

      if (builder) {
        //console.log(prioritetToDo);

        this.selectLineIndex++;

        builder.createBuilding("townHoll", builder);

        //this.activeUnits.push(builder);
        //this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);
        if (!builder.active) {
          this.activeUnits.push(builder);
          builder.active = true;
        }
        //if(this.batraksOnGolg.indexOf(builder)!==-1){this.batraksOnGolg.splice(this.batraksOnGolg.indexOf(builder),1);};
        //if(this.batraksOnWood.indexOf(builder)!==-1){this.batraksOnWood.splice(this.batraksOnWood.indexOf(builder),1);};
        //if(this.freeBatraks.indexOf(builder)!==-1){this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);};

        builder.iGoBuild = true;
      }

      //console.log("ok");

      //console.log(this.freeBatraks.length+" too");
    } else if (prioritetToDo === "farm" && this.batraks.length) {
      //console.log(this.freeBatraks.length);
      let builder = 0;

      if (this.freeBatraks.length) {
        for (let i = 0; i < this.freeBatraks.length; i++) {
          let ok = this.freeBatraks[i].isBlocked();

          if (!ok) {
            builder = this.freeBatraks[i];
            break;
          }

          //break;
        }
      }
      if (!builder) {
        for (let i = 0; i < this.batraks.length; i++) {
          //console.log(this.batraks[i].iGoBuild)

          if (
            this.batraks[i].workTimeSahta === 100 &&
            this.batraks[i].waitTime === 30 &&
            this.batraks[i].iGoBuild === false &&
            !this.batraks[i].iGetTarget &&
            this.batraks[i].cell
          ) {
            let ok = this.batraks[i].isBlocked();

            if (!ok) {
              builder = this.batraks[i];
              break;
            }

            //builder=this.batraks[i];

            //break;
          }
        }
      }

      //if(!builder){console.log("this.farm no builder");};

      if (builder) {
        //console.log(prioritetToDo);

        this.selectLineIndex++;

        builder.createBuilding("farm", builder);

        if (!builder.active) {
          this.activeUnits.push(builder);
          builder.active = true;
        }
        //if(this.batraksOnGolg.indexOf(builder)!==-1){this.batraksOnGolg.splice(this.batraksOnGolg.indexOf(builder),1);};
        //if(this.batraksOnWood.indexOf(builder)!==-1){this.batraksOnWood.splice(this.batraksOnWood.indexOf(builder),1);};
        //if(this.freeBatraks.indexOf(builder)!==-1){this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);};

        builder.iGoBuild = true;
      }
    }

    ////
    else if (prioritetToDo === "gold") {
    } else if (
      prioritetToDo === "batrak" &&
      !townHollsIsBlocked &&
      this.townHolls.length
    ) {
      this.selectLineIndex++;

      //console.log(prioritetToDo);

      //console.log(this.selectLineIndex);pausa=1;

      townHollToBatrack.myJoube = "batrak";
      townHollToBatrack.myJoubeTimer = 100;

      if (this.activeBuildings.indexOf(townHollToBatrack) === -1) {
        this.activeBuildings.push(townHollToBatrack);
      }

      this.gold -= 400;
    } else if (prioritetToDo === "wood") {
    } //woods

    /*

	let batrak=0;
	

//console.log(this.freeBatraks.length)	
	
if(this.freeBatraks.length){
	
	//console.log(this.freeBatraks.length);
	
	for(let i=0;i<this.freeBatraks.length;i++){
		
	//if(this.freeBatraks[i].persolalNumber===394){console.log(this.freeBatraks.length);};	
		
		
		let ok=this.freeBatraks[i].isBlocked();
		
		if(
		!ok
		&&
		!this.freeBatraks[i].target
		&&
		!this.freeBatraks[i].myJoube
		){
				//if(this.freeBatraks[i].persolalNumber===394){console.log(this.freeBatraks.length);};
			batrak=this.freeBatraks[i];
			break;
			};
		
		//break;
		
	};	
	
};


	
if(batrak){
	
		
	
	let min=getMinDistanse(batrak,shahts);
	


	
if(min){	
	
	//console.log(batrak.persolalNumber)
	

	batrak.myJoube="shahter";
	batrak.target=gameFielg[min.vertikal][min.horizont].unit;
	
		
if(!batrak.active){this.activeUnits.push(batrak); batrak.active=true;};


//if(batrak.persolalNumber===394){batrak.ok=true;console.log(batrak.target);};
}
	
	
	
};

*/

    ///////////////////////////
    ///*

    if (this.batraks.length >= 4) {
      for (let i = 0; i < this.activeBuildings.length; i++) {
        if (
          this.activeBuildings[i].type !== "oil_platform" &&
          (this.activeBuildings[i].buildready <
            this.activeBuildings[i].hpfull ||
            this.activeBuildings[i].hp < this.activeBuildings[i].hpfull) &&
          this.activeBuildings[i].hp > 0 &&
          this.activeBuildings[i].buildready > 0
        ) {
          if (
            !this.activeBuildings[i].builders.length ||
            !this.activeBuildings[i].builders[0].target ||
            this.activeBuildings[i].builders[0].target.persolalNumber !==
              this.activeBuildings[i].persolalNumber
          ) {
            let min = [];

            for (let k = 0; k < this.batraks.length; k++) {
              if (
                this.batraks[k].workTimeSahta === 100 &&
                this.batraks[k].waitTime === 30 &&
                !this.batraks[k].iGoBuild &&
                !this.batraks[k].iGetTarget &&
                this.batraks[k].cell
              ) {
                let ok = this.batraks[k].isBlocked();

                //if(!ok){builder=this.batraks[i];break;};

                if (!ok) {
                  let a = this.batraks[k].x - this.activeBuildings[i].x;
                  let b = this.batraks[k].y - this.activeBuildings[i].y;

                  let c = Math.sqrt(a * a + b * b);

                  if (!min.length || c < min[0]) {
                    min = [c, this.batraks[k]];
                  }
                }
              }
            }

            if (min.length) {
              let builder = min[1];

              if (builder) {
                builder.target = this.activeBuildings[i];
                this.activeBuildings[i].builders = [];
                this.activeBuildings[i].builders.push(builder);

                if (!builder.active) {
                  this.activeUnits.push(builder);
                  builder.active = true;
                }
                //if(this.batraksOnGolg.indexOf(builder)!==-1){this.batraksOnGolg.splice(this.batraksOnGolg.indexOf(builder),1);};
                //if(this.batraksOnWood.indexOf(builder)!==-1){this.batraksOnWood.splice(this.batraksOnWood.indexOf(builder),1);};
                //if(this.freeBatraks.indexOf(builder)!==-1){this.freeBatraks.splice(this.freeBatraks.indexOf(builder),1);};

                builder.iGoBuild = true;
              }
            }
          }
        }
      }
    }

    this.peon_managmant(prioritetToDo);

    //*/

    //////////////////////////
    //////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////
  }

  //console.log(this.activeUnits);
};

Unit.prototype.getBuildPosition = function (
  horizont,
  vertikal,
  building,
  danger
) {
  if (building === "tower") {
    let potentialCells = [];

    for (let i = vertikal - 20; i < vertikal + 20; i++) {
      for (let k = horizont - 20; k < horizont + 20; k++) {
        let stop = false;

        for (let v = i - 1; v <= i; v++) {
          if (stop === true) {
            break;
          }

          for (let h = k; h <= k + 1; h++) {
            if (
              !gameFielg[v] ||
              !gameFielg[v][h] ||
              gameFielg[v][h].free === false ||
              gameFielg[v][h].stopBuild ||
              gameFielg[v][h].continent !== this.cell.continent ||
              gameFielg[v][h].iContaktWith.length
            ) {
              stop = true;

              break;
            }
          }
        }

        if (stop === false) {
          potentialCells.push(gameFielg[i][k]);
        }
      }
    }

    if (potentialCells.length) {
      let min = [];

      for (let i = 0; i < potentialCells.length; i++) {
        let stop;

        for (
          let v = potentialCells[i].vertikal - 10;
          v <= potentialCells[i].vertikal + 10;
          v++
        ) {
          for (
            let h = potentialCells[i].horizont - 10;
            h <= potentialCells[i].horizont + 10;
            h++
          ) {
            if (
              gameFielg[v] &&
              gameFielg[v][h] &&
              gameFielg[v][h].unit &&
              gameFielg[v][h].unit.unitStatus === "building" &&
              !gameFielg[v][h].unit.neitral &&
              gameFielg[v][h].unit.type !== "oil_platform" &&
              gameFielg[v][h].unit.fatherFraction.union !==
                this.fatherFraction.union
            ) {
              stop = true;
              //console.log("stop");
            }
          }
        }

        if (!stop) {
          let a = potentialCells[i].horizont - horizont;
          let b = potentialCells[i].vertikal - vertikal;

          let c = Math.sqrt(a * a + b * b);

          if (!min.length || c < min[0]) {
            min = [c, potentialCells[i]];
          }
        }
      }

      return min[1];
    }
  } else if (
    building === "barack" ||
    building === "kuznya" ||
    building === "ogreBase" ||
    building === "altar" ||
    building === "dragon_roost" ||
    building === "temple"
  ) {
    let potentialCells = [];

    for (let i = vertikal - 117; i < vertikal + 118; i++) {
      for (let k = horizont - 117; k < horizont + 118; k++) {
        let stop = false;

        for (let v = i - 1; v <= i + 1; v++) {
          if (stop === true) {
            break;
          }

          for (let h = k - 1; h <= k + 1; h++) {
            if (
              !gameFielg[v] ||
              !gameFielg[v][h] ||
              gameFielg[v][h].free === false ||
              gameFielg[v][h].stopBuild ||
              gameFielg[v][h].continent !== this.cell.continent ||
              gameFielg[v][h].iContaktWith.length
            ) {
              stop = true;

              break;
            }
          }
        }

        if (stop === false) {
          potentialCells.push(gameFielg[i][k]);
        }
      }
    }

    if (potentialCells.length) {
      let min = [];

      for (let i = 0; i < potentialCells.length; i++) {
        let a = potentialCells[i].horizont - horizont;
        let b = potentialCells[i].vertikal - vertikal;

        let c = Math.sqrt(a * a + b * b);

        if (!min.length || c < min[0]) {
          min = [c, potentialCells[i]];
        }
      }

      return min[1];
    }
  } else if (building === "lesopilka") {
    //console.log(this.cell.continent)
    //pausa=1

    let potentialCells = [];

    for (let i = vertikal - 117; i < vertikal + 118; i++) {
      for (let k = horizont - 117; k < horizont + 118; k++) {
        let stop = false;

        for (let v = i - 1; v <= i + 1; v++) {
          if (stop === true) {
            break;
          }

          for (let h = k - 1; h <= k + 1; h++) {
            if (
              !gameFielg[v] ||
              !gameFielg[v][h] ||
              gameFielg[v][h].free === false ||
              gameFielg[v][h].stopBuild ||
              gameFielg[v][h].continent !== this.cell.continent ||
              gameFielg[v][h].iContaktWith.length ||
              this.cell.continent !== gameFielg[v][h].continent
            ) {
              //if(gameFielg[v]&&gameFielg[v][h]&&this.cell.continent!==gameFielg[v][h].continent)	{console.log("ne");pausa=1;};

              stop = true;

              break;
            }
          }
        }

        if (stop === false) {
          potentialCells.push(gameFielg[i][k]);
        }
      }
    }

    if (potentialCells.length) {
      let min = [];

      for (let i = 0; i < potentialCells.length; i++) {
        let a = potentialCells[i].horizont - horizont;
        let b = potentialCells[i].vertikal - vertikal;

        let c = Math.sqrt(a * a + b * b);

        if (!min.length || c < min[0]) {
          min = [c, potentialCells[i]];
        }
      }

      return min[1];
    }
  } else if (building === "townHoll") {
    let potentialCells = [];

    for (let i = vertikal - 117; i < vertikal + 118; i++) {
      for (let k = horizont - 117; k < horizont + 118; k++) {
        let stop = false;

        for (let v = i - 1; v <= i + 1; v++) {
          if (stop === true) {
            break;
          }

          for (let h = k - 1; h <= k + 1; h++) {
            if (
              !gameFielg[v] ||
              !gameFielg[v][h] ||
              gameFielg[v][h].free === false ||
              gameFielg[v][h].stopTownHoll.length ||
              gameFielg[v][h].stopBuild ||
              gameFielg[v][h].iContaktWith.length
            ) {
              stop = true;

              break;
            }
          }
        }

        if (stop === false) {
          potentialCells.push(gameFielg[i][k]);
        }
      }
    }

    if (potentialCells.length) {
      let min = [];

      for (let i = 0; i < potentialCells.length; i++) {
        let a = potentialCells[i].horizont - horizont;
        let b = potentialCells[i].vertikal - vertikal;

        let c = Math.sqrt(a * a + b * b);

        if (!min.length || c < min[0]) {
          min = [c, potentialCells[i]];
        }
      }

      return min[1];
    }
  } else if (building === "farm") {
    let potentialCells = [];

    for (let i = vertikal - 117; i < vertikal + 118; i++) {
      for (let k = horizont - 117; k < horizont + 118; k++) {
        let stop = false;

        for (let v = i - 1; v <= i; v++) {
          if (stop === true) {
            break;
          }

          for (let h = k; h <= k + 1; h++) {
            if (
              !gameFielg[v] ||
              !gameFielg[v][h] ||
              gameFielg[v][h].free === false ||
              gameFielg[v][h].stopBuild ||
              gameFielg[v][h].continent !== this.cell.continent ||
              (gameFielg[v][h].iContaktWith.length && h % 2 === 0)
            ) {
              stop = true;

              break;
            }
          }
        }

        if (stop === false) {
          potentialCells.push(gameFielg[i][k]);
        }
      }
    }

    if (potentialCells.length) {
      let min = [];

      for (let i = 0; i < potentialCells.length; i++) {
        let a = potentialCells[i].horizont - horizont;
        let b = potentialCells[i].vertikal - vertikal;

        let c = Math.sqrt(a * a + b * b);

        if (!min.length || c < min[0]) {
          min = [c, potentialCells[i]];
        }
      }

      return min[1];
    }
  }
};

Unit.prototype.good_cell_for_ship = function (cell) {
  for (let i = cell.vertikal - 1; i <= cell.vertikal; i++) {
    for (let k = cell.horizont; k <= cell.horizont + 1; k++) {
      let obj;

      //gameFielg[i][k];

      if (gameFielg[i] && gameFielg[i][k]) {
        obj = gameFielg[i][k];
      }

      if (
        obj &&
        ((obj.unit && obj.unit.persolalNumber !== this.persolalNumber) ||
          !obj.sea ||
          obj.sea !== this.cell.sea ||
          obj.vossalObj)
      ) {
        return false;
      }
    }
  }

  return true;
};

const good_sea_build_cell = function (cell) {
  for (let i = cell.vertikal - 1; i <= cell.vertikal + 1; i++) {
    for (let k = cell.horizont - 1; k <= cell.horizont + 1; k++) {
      let obj;

      //gameFielg[i][k];

      if (gameFielg[i] && gameFielg[i][k]) {
        obj = gameFielg[i][k];
      }

      if (
        obj &&
        ((obj.type !== "water" && !obj.free) ||
          (obj.type === "water" && (obj.unit || obj.vossalObj)))
      ) {
        return false;
      }
    }
  }

  return true;
};

const well_cell_for_building = function (cell, gabarit) {
  let ok = 0;

  if (gabarit === 100) {
    for (let v = cell.vertikal - 1; v <= cell.vertikal; v++) {
      for (let h = cell.horizont; h <= cell.horizont + 1; h++) {
        if (
          gameFielg[v] &&
          gameFielg[v][h] &&
          gameFielg[v][h].free &&
          !gameFielg[v][h].water_line
        ) {
          ok++;
        }
      }
    }

    if (ok === 4) {
      return true;
    }
  } else {
    for (let v = cell.vertikal - 1; v <= cell.vertikal + 1; v++) {
      for (let h = cell.horizont - 1; h <= cell.horizont + 1; h++) {
        if (
          gameFielg[v] &&
          gameFielg[v][h] &&
          gameFielg[v][h].free &&
          !gameFielg[v][h].water_line
        ) {
          ok++;
        }
      }
    }

    if (ok === 9) {
      return true;
    }
  }

  return false;
};

Unit.prototype.createBuilding = function (build, builder, player_cell) {
  if (this.type === 1) {
    //myCells

    ///
    //this.fatherFraction.freeBatraks.splice(this.fatherFraction.freeBatraks.indexOf(builder),1);

    ///farms

    //console.log(build)

    if (build === "temple") {
      if (this.fatherFraction.control === "comp") {
        let build;

        let buildCell;

        let iBornCresteShablonNumber;

        ////////////////////////////////////////////////////////////////////////////////////////
        if (this.fatherFraction.control === "comp") {
          let objs = [];

          for (
            let i = 0;
            i < this.fatherFraction.createShablon.temples.length;
            i++
          ) {
            if (this.fatherFraction.createShablon.temples[i].iBorn === false) {
              this.fatherFraction.createShablon.temples[i].iBorn = true;
              build = this.fatherFraction.createShablon.temples[i];
              iBornCresteShablonNumber = i;

              break;
            }
          }

          buildCell = this.getBuildPosition(
            build.horizont,
            build.vertikal,
            "temple"
          );
          //this.myJoube="i build";
        }
        ////////////////////////////////////////////////////////////////////////////////

        //console.log(build);

        this.target = new LandObj(
          "temple",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction
        );

        this.target.iBornCresteShablonNumber = iBornCresteShablonNumber;

        this.target.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.temples.push(this.target);
        this.fatherFraction.buildings.push(this.target);

        if (this.fatherFraction.control === "comp") {
          this.fatherFraction.activeBuildings.push(this.target);
          this.target.builders.push(builder);
          this.iGoBuild = true;
        }

        this.fatherFraction.gold -= 2000;
        this.fatherFraction.wood -= 1000;

        builder.target.vossal_contacts_moveVectorsInitialization(
          builder.target
        );

        this.way = [];
        //	console.log("okhhhhh");
      } else {
        let buildCell;

        buildCell = player_cell;
        //this.myJoube="i build";

        //console.log(build);

        let obj = new LandObj(
          "temple",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction,
          this.nation
        );

        obj.cell.continent = this.cell.continent;

        this.clickSave = new ClickSave(obj, 0);

        obj.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.temples.push(obj);
        this.fatherFraction.buildings.push(obj);

        this.fatherFraction.activeBuildings.push(obj);
        //this.iGoBuild=true;

        this.fatherFraction.gold -= 2000;
        this.fatherFraction.wood -= 1000;

        obj.vossal_contacts_moveVectorsInitialization(obj);

        this.way = [];
      }
    } else if (build === "dragon_roost") {
      if (this.fatherFraction.control === "comp") {
        let build;

        let buildCell;

        let iBornCresteShablonNumber;

        ////////////////////////////////////////////////////////////////////////////////////////
        if (this.fatherFraction.control === "comp") {
          let objs = [];

          for (
            let i = 0;
            i < this.fatherFraction.createShablon.dragon_roosts.length;
            i++
          ) {
            if (
              this.fatherFraction.createShablon.dragon_roosts[i].iBorn === false
            ) {
              this.fatherFraction.createShablon.dragon_roosts[i].iBorn = true;
              build = this.fatherFraction.createShablon.dragon_roosts[i];
              iBornCresteShablonNumber = i;

              break;
            }
          }

          buildCell = this.getBuildPosition(
            build.horizont,
            build.vertikal,
            "dragon_roost"
          );
          //this.myJoube="i build";
        }
        ////////////////////////////////////////////////////////////////////////////////

        //console.log(build);

        this.target = new LandObj(
          "dragon_roost",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction
        );

        this.target.iBornCresteShablonNumber = iBornCresteShablonNumber;

        this.target.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.dragon_roosts.push(this.target);
        this.fatherFraction.buildings.push(this.target);

        if (this.fatherFraction.control === "comp") {
          this.fatherFraction.activeBuildings.push(this.target);
          this.target.builders.push(builder);
          this.iGoBuild = true;
        }

        this.fatherFraction.gold -= 2000;
        this.fatherFraction.wood -= 1000;

        builder.target.vossal_contacts_moveVectorsInitialization(
          builder.target
        );

        this.way = [];
        //	console.log("okhhhhh");
      } else {
        let buildCell;

        buildCell = player_cell;
        //this.myJoube="i build";

        //console.log(build);

        let obj = new LandObj(
          "dragon_roost",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction,
          this.nation
        );

        obj.cell.continent = this.cell.continent;

        this.clickSave = new ClickSave(obj, 0);

        obj.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.dragon_roosts.push(obj);
        this.fatherFraction.buildings.push(obj);

        this.fatherFraction.activeBuildings.push(obj);
        //this.iGoBuild=true;

        this.fatherFraction.gold -= 2000;
        this.fatherFraction.wood -= 1000;

        obj.vossal_contacts_moveVectorsInitialization(obj);

        this.way = [];
      }
    } else if (build === "foundry") {
      if (this.fatherFraction.control === "comp") {
        let cell;

        //cell=allContinents[this.cell.continent].conturLineCells;

        //console.log() my_continent

        //let ot=this.fatherFraction.startPoint;

        let min = [];

        for (
          let i = 0;
          i < allContinents[this.cell.continent].conturLine_sea_Cells.length;
          i++
        ) {
          let dis = get_distanse_on_lineyka(
            this.fatherFraction.ports[0].cell,
            100,
            allContinents[this.cell.continent].conturLine_sea_Cells[i],
            150
          );

          if (
            (!min.length || min[0] > dis) &&
            allContinents[this.cell.continent].conturLine_sea_Cells[i].sea ===
              this.fatherFraction.sea &&
            good_sea_build_cell(
              allContinents[this.cell.continent].conturLine_sea_Cells[i]
            ) &&
            dis >= 250
          ) {
            min = [
              dis,
              allContinents[this.cell.continent].conturLine_sea_Cells[i],
            ];
          }
        }

        cell = min[1];

        ///////////////////////////////////////////////////////////////////

        let build;

        let buildCell;

        buildCell = cell;
        //this.myJoube="i build";

        //console.log(build);

        this.target = new LandObj(
          "foundry",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction
        );

        let tow = new SablonObj(
          this.target.horizont,
          this.target.vertikal,
          undefined,
          "guard"
        );
        tow.para = true;
        this.fatherFraction.createShablon.towers.push(tow);

        this.target.my_continent = this.cell.continent;

        this.target.control = this.fatherFraction.control;
        this.target.save_sea = this.target.cell.sea;
        this.target.cell.sea = false;
        this.target.cell.continent = this.cell.continent;

        //console.log(builder.target);
        this.fatherFraction.foundrys.push(this.target);
        this.fatherFraction.buildings.push(this.target);

        this.fatherFraction.activeBuildings.push(this.target);
        this.target.builders.push(builder);
        this.iGoBuild = true;

        this.fatherFraction.gold -= 1000;
        this.fatherFraction.wood -= 300;

        builder.target.vossal_contacts_moveVectorsInitialization(
          builder.target
        );

        this.way = [];
        //	console.log("okhhhhh");
      } else {
        let buildCell;

        buildCell = player_cell;
        //this.myJoube="i build";

        //console.log(build);

        let obj = new LandObj(
          "foundry",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction,
          this.nation
        );

        obj.save_sea = buildCell.sea;
        obj.cell.sea = false;
        obj.cell.continent = this.cell.continent;

        this.clickSave = new ClickSave(obj, 0);

        obj.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.foundrys.push(obj);
        this.fatherFraction.buildings.push(obj);

        this.fatherFraction.activeBuildings.push(obj);
        //this.iGoBuild=true;

        this.fatherFraction.gold -= 1000;
        this.fatherFraction.wood -= 300;

        obj.vossal_contacts_moveVectorsInitialization(obj);

        this.way = [];
      }

      //console.log(nnn)

      //return;
    } else if (build === "oil_Ref") {
      if (this.fatherFraction.control === "comp") {
        let cell;

        //cell=allContinents[this.cell.continent].conturLineCells;

        //console.log() my_continent

        //let ot=this.fatherFraction.startPoint;

        let min = [];

        for (
          let i = 0;
          i < allContinents[this.cell.continent].conturLine_sea_Cells.length;
          i++
        ) {
          let dis = get_distanse_on_lineyka(
            this.fatherFraction.ports[0].cell,
            100,
            allContinents[this.cell.continent].conturLine_sea_Cells[i],
            150
          );

          if (
            (!min.length || min[0] > dis) &&
            allContinents[this.cell.continent].conturLine_sea_Cells[i].sea ===
              this.fatherFraction.sea &&
            good_sea_build_cell(
              allContinents[this.cell.continent].conturLine_sea_Cells[i]
            ) &&
            dis >= 250
          ) {
            min = [
              dis,
              allContinents[this.cell.continent].conturLine_sea_Cells[i],
            ];
          }
        }

        cell = min[1];

        ///////////////////////////////////////////////////////////////////

        let build;

        let buildCell;

        buildCell = cell;
        //this.myJoube="i build";

        //console.log(build);

        this.target = new LandObj(
          "oil_Ref",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction
        );

        let tow = new SablonObj(
          this.target.horizont,
          this.target.vertikal,
          undefined,
          "guard"
        );
        tow.para = true;
        this.fatherFraction.createShablon.towers.push(tow);

        this.target.my_continent = this.cell.continent;

        this.target.control = this.fatherFraction.control;
        this.target.save_sea = this.target.cell.sea;
        this.target.cell.sea = false;
        this.target.cell.continent = this.cell.continent;

        //console.log(builder.target);
        this.fatherFraction.oil_Refs.push(this.target);
        this.fatherFraction.buildings.push(this.target);

        this.fatherFraction.activeBuildings.push(this.target);
        this.target.builders.push(builder);
        this.iGoBuild = true;

        this.fatherFraction.gold -= 1000;
        this.fatherFraction.wood -= 300;

        builder.target.vossal_contacts_moveVectorsInitialization(
          builder.target
        );

        this.way = [];
        //	console.log("okhhhhh");
      } else {
        let buildCell;

        buildCell = player_cell;
        //this.myJoube="i build";

        //console.log(build);

        let obj = new LandObj(
          "oil_Ref",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction,
          this.nation
        );

        obj.cell.continent = this.cell.continent;
        obj.save_sea = buildCell.sea;
        obj.cell.sea = false;
        this.clickSave = new ClickSave(obj, 0);

        obj.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.oil_Refs.push(obj);
        this.fatherFraction.buildings.push(obj);

        this.fatherFraction.activeBuildings.push(obj);
        //this.iGoBuild=true;

        this.fatherFraction.gold -= 1000;
        this.fatherFraction.wood -= 300;

        obj.vossal_contacts_moveVectorsInitialization(obj);

        this.way = [];
      }

      //console.log(nnn)

      //return;
    } else if (build === "port") {
      if (this.fatherFraction.control === "comp") {
        let cell;

        //cell=allContinents[this.cell.continent].conturLineCells;

        let ot = this.fatherFraction.startPoint;

        let min = [];

        for (
          let i = 0;
          i < allContinents[this.cell.continent].conturLine_sea_Cells.length;
          i++
        ) {
          let dis = get_distanse_on_lineyka(
            ot,
            50,
            allContinents[this.cell.continent].conturLine_sea_Cells[i],
            50
          );

          if (
            (!min.length || min[0] > dis) &&
            allContinents[this.cell.continent].conturLine_sea_Cells[i].sea ===
              this.fatherFraction.sea &&
            good_sea_build_cell(
              allContinents[this.cell.continent].conturLine_sea_Cells[i]
            )
          ) {
            min = [
              dis,
              allContinents[this.cell.continent].conturLine_sea_Cells[i],
            ];
          }
        }

        cell = min[1];

        ///////////////////////////////////////////////////////////////////

        let build;

        let buildCell;

        let iBornCresteShablonNumber;

        buildCell = cell;
        //this.myJoube="i build";

        //console.log(build);

        this.target = new LandObj(
          "port",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction
        );

        let tow = new SablonObj(
          this.target.horizont,
          this.target.vertikal,
          undefined,
          "guard"
        );
        tow.para = true;
        this.fatherFraction.createShablon.towers.push(tow);

        this.target.my_continent = this.cell.continent;

        this.target.control = this.fatherFraction.control;
        this.target.save_sea = this.target.cell.sea;
        this.target.cell.sea = false;
        this.target.cell.continent = this.cell.continent;

        //console.log(builder.target);
        this.fatherFraction.ports.push(this.target);
        this.fatherFraction.buildings.push(this.target);

        this.fatherFraction.activeBuildings.push(this.target);
        this.target.builders.push(builder);
        this.iGoBuild = true;

        this.fatherFraction.gold -= 1000;
        this.fatherFraction.wood -= 300;

        builder.target.vossal_contacts_moveVectorsInitialization(
          builder.target
        );

        this.way = [];
        //	console.log("okhhhhh");
      } else {
        let buildCell;

        buildCell = player_cell;
        //this.myJoube="i build";

        //console.log(build);

        let obj = new LandObj(
          "port",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction,
          this.nation
        );

        obj.cell.continent = this.cell.continent;
        obj.save_sea = buildCell.sea;
        obj.cell.sea = false;
        this.clickSave = new ClickSave(obj, 0);

        obj.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.ports.push(obj);
        this.fatherFraction.buildings.push(obj);

        this.fatherFraction.activeBuildings.push(obj);
        //this.iGoBuild=true;

        this.fatherFraction.gold -= 1000;
        this.fatherFraction.wood -= 300;

        obj.vossal_contacts_moveVectorsInitialization(obj);

        this.way = [];
      }

      //console.log(nnn)

      //return;
    } else if (build === "altar") {
      if (this.fatherFraction.control === "comp") {
        let build;

        let buildCell;

        let iBornCresteShablonNumber;

        ////////////////////////////////////////////////////////////////////////////////////////
        if (this.fatherFraction.control === "comp") {
          let objs = [];

          for (
            let i = 0;
            i < this.fatherFraction.createShablon.altars.length;
            i++
          ) {
            if (this.fatherFraction.createShablon.altars[i].iBorn === false) {
              this.fatherFraction.createShablon.altars[i].iBorn = true;
              build = this.fatherFraction.createShablon.altars[i];
              iBornCresteShablonNumber = i;

              break;
            }
          }

          buildCell = this.getBuildPosition(
            build.horizont,
            build.vertikal,
            "altar"
          );
          //this.myJoube="i build";
        }
        ////////////////////////////////////////////////////////////////////////////////

        //console.log(build);

        this.target = new LandObj(
          "altar",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction
        );

        this.target.iBornCresteShablonNumber = iBornCresteShablonNumber;

        this.target.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.altars.push(this.target);
        this.fatherFraction.buildings.push(this.target);

        if (this.fatherFraction.control === "comp") {
          this.fatherFraction.activeBuildings.push(this.target);
          this.target.builders.push(builder);
          this.iGoBuild = true;
        }

        this.fatherFraction.gold -= 2000;
        this.fatherFraction.wood -= 1000;

        builder.target.vossal_contacts_moveVectorsInitialization(
          builder.target
        );

        this.way = [];
        //	console.log("okhhhhh");
      } else {
        let buildCell;

        buildCell = player_cell;
        //this.myJoube="i build";

        //console.log(build);

        let obj = new LandObj(
          "altar",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction,
          this.nation
        );

        this.clickSave = new ClickSave(obj, 0);

        obj.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.altars.push(obj);
        this.fatherFraction.buildings.push(obj);

        this.fatherFraction.activeBuildings.push(obj);
        //this.iGoBuild=true;

        this.fatherFraction.gold -= 2000;
        this.fatherFraction.wood -= 1000;

        obj.vossal_contacts_moveVectorsInitialization(obj);

        this.way = [];
      }
    } else if (build === "ogreBase") {
      if (this.fatherFraction.control === "comp") {
        let build;

        let buildCell;

        let iBornCresteShablonNumber;

        if (this.fatherFraction.control === "comp") {
          for (
            let i = 0;
            i < this.fatherFraction.createShablon.ogreBases.length;
            i++
          ) {
            if (
              this.fatherFraction.createShablon.ogreBases[i].iBorn === false
            ) {
              this.fatherFraction.createShablon.ogreBases[i].iBorn = true;
              build = this.fatherFraction.createShablon.ogreBases[i];
              iBornCresteShablonNumber = i;

              break;
            }
          }

          buildCell = this.getBuildPosition(
            build.horizont,
            build.vertikal,
            "ogreBase"
          );
          //this.myJoube="i build";
        }

        //console.log(build);

        this.target = new LandObj(
          "ogreBase",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction
        );

        this.target.iBornCresteShablonNumber = iBornCresteShablonNumber;

        this.target.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.ogreBases.push(this.target);
        this.fatherFraction.buildings.push(this.target);

        if (this.fatherFraction.control === "comp") {
          this.fatherFraction.activeBuildings.push(this.target);
          this.target.builders.push(builder);
          this.iGoBuild = true;
        }

        this.fatherFraction.gold -= 2000;
        this.fatherFraction.wood -= 1000;

        builder.target.vossal_contacts_moveVectorsInitialization(
          builder.target
        );

        this.way = [];
        //	console.log("okhhhhh");
      } else {
        let buildCell;

        buildCell = player_cell;
        //this.myJoube="i build";

        //console.log(build);

        let obj = new LandObj(
          "ogreBase",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction,
          this.nation
        );

        this.clickSave = new ClickSave(obj, 0);

        obj.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.ogreBases.push(obj);
        this.fatherFraction.buildings.push(obj);

        this.fatherFraction.activeBuildings.push(obj);
        //this.iGoBuild=true;

        this.fatherFraction.gold -= 2000;
        this.fatherFraction.wood -= 1000;

        obj.vossal_contacts_moveVectorsInitialization(obj);

        this.way = [];
      }
    } else if (build === "kuznya") {
      if (this.fatherFraction.control === "comp") {
        let build;

        let buildCell;

        let iBornCresteShablonNumber;

        for (
          let i = 0;
          i < this.fatherFraction.createShablon.kuznyas.length;
          i++
        ) {
          if (this.fatherFraction.createShablon.kuznyas[i].iBorn === false) {
            this.fatherFraction.createShablon.kuznyas[i].iBorn = true;
            build = this.fatherFraction.createShablon.kuznyas[i];
            iBornCresteShablonNumber = i;

            break;
          }
        }

        if (!build) {
          return;
        }
        buildCell = this.getBuildPosition(
          build.horizont,
          build.vertikal,
          "kuznya"
        );
        //this.myJoube="i build";

        //console.log(build);

        this.target = new LandObj(
          "kuznya",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction
        );

        this.target.iBornCresteShablonNumber = iBornCresteShablonNumber;

        this.target.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.kuznyas.push(this.target);
        this.fatherFraction.buildings.push(this.target);

        if (this.fatherFraction.control === "comp") {
          this.fatherFraction.activeBuildings.push(this.target);
          this.target.builders.push(builder);
          this.iGoBuild = true;
        }

        this.fatherFraction.gold -= 700;
        this.fatherFraction.wood -= 500;

        builder.target.vossal_contacts_moveVectorsInitialization(
          builder.target
        );

        this.way = [];
        //console.log("ok");
      } else {
        let buildCell;

        buildCell = player_cell;
        //this.myJoube="i build";

        //console.log(build);

        let obj = new LandObj(
          "kuznya",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction,
          this.nation
        );

        this.clickSave = new ClickSave(obj, 0);

        obj.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.kuznyas.push(obj);
        this.fatherFraction.buildings.push(obj);

        this.fatherFraction.activeBuildings.push(obj);
        //this.iGoBuild=true;

        this.fatherFraction.gold -= 700;
        this.fatherFraction.wood -= 500;

        obj.vossal_contacts_moveVectorsInitialization(obj);

        this.way = [];
      }
    } else if (build === "tower") {
      //unterTowers
      if (this.fatherFraction.control === "comp") {
        let build;

        let buildCell;

        let iBornCresteShablonNumber;

        //////////////////////////////////////////////////////////////////////////////////////////////

        let min = [];

        for (
          let i = 0;
          i < this.fatherFraction.createShablon.towers.length;
          i++
        ) {
          let obj = this.fatherFraction.createShablon.towers[i];

          if (!obj.iBorn && obj.para) {
            min = [0, obj, i];
            break;
          }

          let dis;

          if (
            !obj.iBorn &&
            (gameFielg[obj.vertikal][obj.horizont].free ||
              gameFielg[obj.vertikal][obj.horizont].vossalObj ||
              gameFielg[obj.vertikal][obj.horizont].unit.unitName !== "wood")
          ) {
            dis = get_distanse_on_lineyka(
              this.fatherFraction.startPoint,
              50,
              gameFielg[obj.vertikal][obj.horizont],
              100
            );

            if (!min.length || min[0] > dis || min[1].para) {
              min = [dis, obj, i];
            }
          }
        }

        if (min.length) {
          build = min[1];
          build.iBorn = true;

          buildCell = this.getBuildPosition(
            build.horizont,
            build.vertikal,
            "tower"
          );
          iBornCresteShablonNumber = min[2];
        } else {
          return;
        }

        //this.myJoube="i build";

        //////////////////////////////////////////////////////////////////////////////////////////////////
        //console.log(build);

        if (buildCell) {
          this.target = new LandObj(
            "tower",
            buildCell.horizont,
            buildCell.vertikal,
            0,
            this.fatherFraction
          );

          this.target.iBornCresteShablonNumber = iBornCresteShablonNumber;

          this.target.control = this.fatherFraction.control;

          //console.log(builder.target);
          this.fatherFraction.towers.push(this.target);
          this.fatherFraction.buildings.push(this.target);

          if (this.fatherFraction.control === "comp") {
            this.fatherFraction.activeBuildings.push(this.target);
            this.target.builders.push(builder);
            this.iGoBuild = true;
            this.fatherFraction.unterTowers.push(this.target);
            this.target.iBee =
              this.fatherFraction.createShablon.towers[
                iBornCresteShablonNumber
              ].tower;
          }

          this.fatherFraction.gold -= 1500;
          this.fatherFraction.wood -= 500;

          builder.target.vossal_contacts_moveVectorsInitialization(
            builder.target
          );

          this.way = [];
          //console.log("ok");
        }
      } else {
        let buildCell;

        buildCell = player_cell;
        //this.myJoube="i build";

        //console.log(build);

        let obj = new LandObj(
          "tower",
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction,
          this.nation
        );

        this.clickSave = new ClickSave(obj, 0);

        obj.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.towers.push(obj);
        this.fatherFraction.buildings.push(obj);

        this.fatherFraction.activeBuildings.push(obj);
        //this.iGoBuild=true;

        this.fatherFraction.gold -= 1500;
        this.fatherFraction.wood -= 500;

        obj.vossal_contacts_moveVectorsInitialization(obj);

        this.way = [];
      }
    } else if (build === "barack") {
      if (this.fatherFraction.control === "comp") {
        let build;

        let buildCell;

        let iBornCresteShablonNumber;

        let min = [];

        for (
          let i = 0;
          i < this.fatherFraction.createShablon.baracks.length;
          i++
        ) {
          if (this.fatherFraction.createShablon.baracks[i].iBorn === false) {
            /*
		this.fatherFraction.createShablon.baracks[i].iBorn=true;
		build=this.fatherFraction.createShablon.baracks[i];
		iBornCresteShablonNumber=i;
		*/

            let dis = get_distanse_on_lineyka(
              this.fatherFraction.startPoint,
              50,
              gameFielg[this.fatherFraction.createShablon.baracks[i].vertikal][
                this.fatherFraction.createShablon.baracks[i].horizont
              ],
              150
            );

            if (!min.length || min[0] > dis) {
              min = [dis, this.fatherFraction.createShablon.baracks[i], i];
            }
          }
        }

        this.fatherFraction.createShablon.baracks[min[2]].iBorn = true;
        build = min[1];
        iBornCresteShablonNumber = min[2];

        buildCell = this.getBuildPosition(
          build.horizont,
          build.vertikal,
          "barack"
        );
        //this.myJoube="i build";
        if (!buildCell) {
          return;
        }

        //console.log(build);

        this.target = new LandObj(
          5,
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction
        );

        this.target.iBornCresteShablonNumber = iBornCresteShablonNumber;

        this.target.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.baracks.push(this.target);
        this.fatherFraction.buildings.push(this.target);

        //if(this.fatherFraction.control==="comp"){

        this.fatherFraction.activeBuildings.push(this.target);
        this.target.builders.push(builder);
        this.iGoBuild = true;

        //};

        this.fatherFraction.gold -= 700;
        this.fatherFraction.wood -= 500;

        builder.target.vossal_contacts_moveVectorsInitialization(
          builder.target
        );

        this.way = [];
        //console.log("ok");
      } else {
        let buildCell;

        buildCell = player_cell;
        //this.myJoube="i build";

        //console.log(build);

        let obj = new LandObj(
          5,
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction,
          this.nation
        );

        this.clickSave = new ClickSave(obj, 0);

        obj.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.baracks.push(obj);
        this.fatherFraction.buildings.push(obj);

        this.fatherFraction.activeBuildings.push(obj);
        //this.iGoBuild=true;

        this.fatherFraction.gold -= 700;
        this.fatherFraction.wood -= 500;

        obj.vossal_contacts_moveVectorsInitialization(obj);

        this.way = [];
      }
    } else if (build === "lesopilka") {
      if (this.fatherFraction.control === "comp") {
        let min = [];

        for (let i = 0; i < woods.length; i++) {
          let a = woods[i].x - this.fatherFraction.startPoint.x;
          let b = woods[i].y - this.fatherFraction.startPoint.y;

          let c = Math.sqrt(a * a + b * b);

          if (
            (!min.length || c < min[0]) &&
            woods[i].hp > 0 &&
            c < 5000 &&
            woods[i].cell.continent === this.cell.continent
          ) {
            min = [c, woods[i]];
          }
        }

        //console.log(min[1])

        if (!min.length) {
          min = [0, this.cell];
        }

        if (min.length) {
          let build = new SablonObj(min[1].horizont, min[1].vertikal);

          let buildCell;

          buildCell = this.getBuildPosition(
            build.horizont,
            build.vertikal,
            "lesopilka"
          );
          //this.myJoube="i build";

          //console.log(build);

          this.target = new LandObj(
            4,
            buildCell.horizont,
            buildCell.vertikal,
            0,
            this.fatherFraction
          );
          this.target.control = this.fatherFraction.control;

          let tow = new SablonObj(
            this.target.horizont,
            this.target.vertikal,
            undefined,
            "guard"
          );
          tow.para = true;
          this.fatherFraction.createShablon.towers.push(tow);

          this.fatherFraction.lesopilkas.push(this.target);
          this.fatherFraction.buildings.push(this.target);

          //if(this.fatherFraction.control==="comp"){

          this.fatherFraction.activeBuildings.push(this.target);
          this.target.builders.push(builder);
          this.iGoBuild = true;

          //};

          this.fatherFraction.gold -= 700;
          this.fatherFraction.wood -= 500;

          builder.target.vossal_contacts_moveVectorsInitialization(
            builder.target
          );

          this.way = [];

          //console.log(this.fatherFraction.townHolls);
        }
      } else {
        let buildCell;

        buildCell = player_cell;
        //this.myJoube="i build";

        //console.log(build);

        let obj = new LandObj(
          4,
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction,
          this.nation
        );

        this.clickSave = new ClickSave(obj, 0);

        obj.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.lesopilkas.push(obj);
        this.fatherFraction.buildings.push(obj);

        this.fatherFraction.activeBuildings.push(obj);
        //this.iGoBuild=true;

        this.fatherFraction.gold -= 700;
        this.fatherFraction.wood -= 500;

        obj.vossal_contacts_moveVectorsInitialization(obj);

        this.way = [];
      }
    } else if (build === "townHoll") {
      if (this.fatherFraction.control === "comp") {
        let min = [];

        for (let i = 0; i < shahts.length; i++) {
          let a = shahts[i].x - builder.x;
          let b = shahts[i].y - builder.y;

          let c = Math.sqrt(a * a + b * b);

          if ((!min.length || c < min[0]) && shahts[i].gold > 0) {
            min = [c, shahts[i]];
          }
        }

        //console.log(min[1])

        if (min.length) {
          let build = new SablonObj(min[1].horizont, min[1].vertikal);

          let buildCell;

          buildCell = this.getBuildPosition(
            build.horizont,
            build.vertikal,
            "townHoll"
          );
          //this.myJoube="i build";

          //console.log(build);

          this.target = new LandObj(
            2,
            buildCell.horizont,
            buildCell.vertikal,
            0,
            this.fatherFraction
          );
          this.target.control = this.fatherFraction.control;

          //console.log(builder.target);
          this.fatherFraction.townHolls.push(this.target);
          this.fatherFraction.buildings.push(this.target);

          //if(this.fatherFraction.control==="comp"){

          this.fatherFraction.activeBuildings.push(this.target);
          this.target.builders.push(builder);
          this.iGoBuild = true;

          //};

          this.fatherFraction.gold -= 1000;
          this.fatherFraction.wood -= 1000;

          builder.target.vossal_contacts_moveVectorsInitialization(
            builder.target
          );

          this.way = [];

          //console.log(this.fatherFraction.townHolls);
        }
      } else {
        let buildCell;

        buildCell = player_cell;
        //this.myJoube="i build";

        //console.log(build);

        let obj = new LandObj(
          2,
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction,
          this.nation
        );

        this.clickSave = new ClickSave(obj, 0);

        obj.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.townHolls.push(obj);
        this.fatherFraction.buildings.push(obj);

        this.fatherFraction.activeBuildings.push(obj);
        //this.iGoBuild=true;

        this.fatherFraction.gold -= 1000;
        this.fatherFraction.wood -= 1000;

        obj.vossal_contacts_moveVectorsInitialization(obj);

        this.way = [];
        //console.log(this.target);
      }
    } else if (build === "farm") {
      let build;

      let buildCell;

      let iBornCresteShablonNumber;

      //////////////////////////////////////////////////////////////////////////////////////////////
      if (this.fatherFraction.control === "comp") {
        let objs = [];

        let min_d = [];

        for (
          let i = 0;
          i < this.fatherFraction.createShablon.farms.length;
          i++
        ) {
          let obj =
            gameFielg[this.fatherFraction.createShablon.farms[i].vertikal][
              this.fatherFraction.createShablon.farms[i].horizont
            ];

          let dis = get_distanse_on_lineyka(
            this.fatherFraction.startPoint,
            50,
            obj,
            100
          );

          if (!min_d.length || min_d[0] > dis) {
            min_d = [dis, this.fatherFraction.createShablon.farms[i], i];
          }

          if (
            this.fatherFraction.createShablon.farms[i].iBorn === false &&
            well_cell_for_building(obj, 100)
          ) {
            /*
		this.fatherFraction.createShablon.towers[i].iBorn=true;
		build=this.fatherFraction.createShablon.towers[i];
		iBornCresteShablonNumber=i;
		
		break;
		*/

            let ind = this.fatherFraction.createShablon.farms[i];
            ind.i = i;

            objs.push(ind);
          }
        }

        min = [];

        for (let i = 0; i < objs.length; i++) {
          let obj = gameFielg[objs[i].vertikal][objs[i].horizont];

          let dis = get_distanse_on_lineyka(
            this.fatherFraction.startPoint,
            50,
            obj,
            100
          );

          if (!min.length || min[0] > dis) {
            min = [dis, objs[i]];
          }
        }

        if (min.length) {
          this.fatherFraction.createShablon.farms[min[1].i].iBorn = true;
          build = this.fatherFraction.createShablon.farms[min[1].i];
          iBornCresteShablonNumber = min[1].i;
        } else if (!this.fatherFraction.createShablon.farms.length) {
          return;
        } else {
          this.fatherFraction.createShablon.farms[min_d[2]].iBorn = true;
          build = this.fatherFraction.createShablon.farms[min_d[2]];
          iBornCresteShablonNumber = min_d[2];
        }

        buildCell = this.getBuildPosition(
          build.horizont,
          build.vertikal,
          "farm"
        );
        //this.myJoube="i build";

        //////////////////////////////////////////////////////////////////////////////////////////////////

        //console.log(build);

        this.target = new LandObj(
          3,
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction
        );

        this.target.iBornCresteShablonNumber = iBornCresteShablonNumber;

        this.target.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.farms.push(this.target);
        this.fatherFraction.buildings.push(this.target);

        if (this.fatherFraction.control === "comp") {
          this.fatherFraction.activeBuildings.push(this.target);
          this.target.builders.push(builder);
          this.iGoBuild = true;
        }

        this.fatherFraction.gold -= 500;
        this.fatherFraction.wood -= 300;

        builder.target.vossal_contacts_moveVectorsInitialization(
          builder.target
        );

        this.way = [];
        //console.log("ok");
      } else {
        buildCell = player_cell;
        //this.myJoube="i build";

        //console.log(build);

        let obj = new LandObj(
          3,
          buildCell.horizont,
          buildCell.vertikal,
          0,
          this.fatherFraction,
          this.nation
        );

        this.clickSave = new ClickSave(obj, 0);

        obj.control = this.fatherFraction.control;

        //console.log(builder.target);
        this.fatherFraction.farms.push(obj);
        this.fatherFraction.buildings.push(obj);

        this.fatherFraction.activeBuildings.push(obj);
        //this.iGoBuild=true;

        this.fatherFraction.gold -= 500;
        this.fatherFraction.wood -= 300;

        obj.vossal_contacts_moveVectorsInitialization(obj);

        this.way = [];
      }
    }
  }

  buildingBornAnimysUpdate(this.target, this.cell.unit);

  if (!this.target.my_continent) {
    this.target.my_continent = this.cell.continent;
  }
};

LandObj.prototype.extreamGetOutCell = function () {
  let free = [];

  for (let i = 0; i < gameFielg.length; i++) {
    for (let k = 0; k < gameFielg[i].length; k++) {
      if (gameFielg[i][k].free) {
        free.push(gameFielg[i][k]);
      }
    }
  }

  let min = [];

  for (let i = 0; i < free.length; i++) {
    let a = free[i].x - this.x;
    let b = free[i].y - this.y;

    let c = Math.sqrt(a * a + b * b);

    if (!min.length || c < min[0]) {
      min = [c, free[i]];
    }
  }

  return min[1];
};

LandObj.prototype.getOutCell = function () {
  let free = [];

  for (let i = 0; i < this.contaktCells.length; i++) {
    if (
      gameFielg[this.contaktCells[i].vertikal][this.contaktCells[i].horizont]
        .free === true &&
      !gameFielg[this.contaktCells[i].vertikal][this.contaktCells[i].horizont]
        .timer
    ) {
      free.push(this.contaktCells[i]);
    }
  }

  let min = 0;

  for (let i = 0; i < free.length; i++) {
    if (!min || free[i].outPrioritet < min.outPrioritet) {
      min = free[i];
    }
  }

  //console.log(min.outPrioritet);

  return min;
};

const getMinDistanse = function (unit, object) {
  let min = [];

  if (!object || !object.length) {
    return 0;
  }

  for (let i = 0; i < object.length; i++) {
    let a = object[i].x - unit.x;
    let b = object[i].y - unit.y;

    let c = Math.sqrt(a * a + b * b);

    /*	
	if(
	(!min.length||c<min[0])&&
	object[i].hp>0&&
	((object[i].gold!==0)||(object[i].gold===0&&object[i].unitName==="townHoll"))
	&&
	!object[i].lesorub
	
	//!(object[i].unitName==="shahta"&&object[i].gold===0)&&
	//!(object[i].unitName==="wood"&&object[i].lesorub)
	){
		
		min=[c,object[i]];
		
		};
	*/

    if (object[i].unitName === "townHoll") {
      if (
        (!min.length || c < min[0]) &&
        object[i].hp > 0 &&
        object[i].buildready > 0 &&
        object[i].fatherFraction.fraction === unit.fatherFraction.fraction &&
        //&&!object[i].isBlocked()
        object[i].cell &&
        unit.cell &&
        object[i].cell.continent === unit.cell.continent
      ) {
        min = [c, object[i]];
      }
    } else if (object[i].unitName === "shahta") {
      if (
        (!min.length || c < min[0]) &&
        object[i].hp > 0 &&
        object[i].gold &&
        //&&!object[i].isBlocked()
        object[i].cell &&
        unit.cell &&
        object[i].cell.continent === unit.cell.continent
      ) {
        min = [c, object[i]];
      }
    } else if (object[i].unitName === "wood") {
      let obj = object[i];

      if (
        obj.lesorub &&
        (obj.lesorub.hp <= 0 ||
          !obj.lesorub.cell ||
          !obj.lesorub.target ||
          (obj.lesorub.target &&
            obj.lesorub.target.persolalNumber !== obj.persolalNumber))
      ) {
        obj.lesorub = 0;
      }

      if (
        (!min.length || c < min[0]) &&
        object[i].hp > 0 &&
        !object[i].lesorub &&
        !object[i].isBlocked() &&
        object[i].cell &&
        unit.cell &&
        object[i].cell.continent === unit.cell.continent
      ) {
        min = [c, object[i]];
      }
    }
  }

  if (min.length) {
    return min[1];
  } else {
    return 0;
  }
};

const activeFreeLandObjectsToProg = function () {
  for (let i = 0; i < activeFreeLandObjects.length; i++) {
    activeFreeLandObjects[i].prog(activeFreeLandObjects[i]);

    if (activeFreeLandObjects[i].readyToOut) {
      activeFreeLandObjects[i].readyToOut = false;

      activeFreeLandObjects.splice(i, 1);

      i--;
    }
  }
};

LandObj.prototype.prog = function (arg) {
  if (this.buildready > this.hpfull) {
    this.buildready = this.hpfull;
  }
  if (this.hp > this.hpfull) {
    this.hp = this.hpfull;
  }
  if (this.buildready <= 0) {
    this.buildready = 0;
    this.hp = 0;
  }
  if (this.hp <= 0) {
    this.hp = 0;
  }

  /*
if(
!this.neitral
&&
this.fatherFraction.control==="player"
&&
this.alarmTimer===500
){
	
	player.alarms.push(this.cell.unit);
	console.log("here");
};
*/

  if (this.unitName === "temple") {
    //console.log(this.distroyTimer); push

    if (this.hp <= 0 || this.buildready <= 0) {
      if (this.fatherFraction.control === "comp") {
        if (this.distroyTimer === 501) {
          let repos = this.fatherFraction.createShablon_reposition(
            this.cell.unit
          );

          if (repos) {
            //console.log("!!!!!!!!!!!!!!!!!!!!!!!!");

            //this.fatherFraction.createShablon.baracks.splice(this.iBornCresteShablonNumber,1);
            //repos.iBorn=false;

            this.fatherFraction.createShablon.temples[
              this.iBornCresteShablonNumber
            ].vertikal = repos.vertikal;
            this.fatherFraction.createShablon.temples[
              this.iBornCresteShablonNumber
            ].horizont = repos.horizont;
            this.fatherFraction.createShablon.temples[
              this.iBornCresteShablonNumber
            ].x = repos.x;
            this.fatherFraction.createShablon.temples[
              this.iBornCresteShablonNumber
            ].y = repos.y;

            //this.fatherFraction.createShablon.baracks.push(repos);
          }

          this.fatherFraction.createShablon.temples[
            this.iBornCresteShablonNumber
          ].iBorn = false;
        }
      }

      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;
          this.myCells[i].free = true;
        }

        //this.cell.unit=0;
        this.fatherFraction.temples.splice(
          this.fatherFraction.temples.indexOf(this.cell.unit),
          1
        );
        //this.fatherFraction.buildings.splice(this.fatherFraction.buildings.indexOf(this.cell.unit),1);

        this.cell.unit = 0;
        this.cell = 0;
        this.alarmTimer = 0;

        this.readyToOut = true;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }
      }

      return;
    }

    if (this.buildready >= this.hpfull && !this.iComplite) {
      //this.builders[0].iGoBuild=false;

      this.builders = [];

      //this.fatherFraction.maxUnits+=5;

      this.iComplite = true;
      //console.log(this.fatherFraction.maxUnits);
    }

    /*
if(this.iComplite&&this.hp===this.hpfull){
	
	this.readyToOut=true;
	
};

*/
    //console.log(this.distroyTimer);

    if (this.iComplite) {
      if (this.myJoubeTimer) {
        this.myJoubeTimer--;
      }

      if (!this.myJoubeTimer && this.myJoube) {
        this.myJoube = false;

        let outCell = this.getOutCell();

        unit = new Unit(
          "mag",
          0,
          0,
          4,
          this.fatherFraction.fraction,
          this.fatherFraction.nation
        );

        //console.log("luchnik");

        allUnits++;
        unit.persolalNumber = allUnits;

        //this.waitTime--;
        if (!outCell) {
          outCell = this.extreamGetOutCell();
        }

        //console.log(outCell.outPrioritet+" "+outCell.horizont);
        if (outCell) {
          unit.cell = gameFielg[outCell.vertikal][outCell.horizont];

          unit.horizont = unit.cell.horizont;
          unit.vertikal = unit.cell.vertikal;
          unit.x = unit.cell.x;
          unit.y = unit.cell.y;
          unit.cell.unit = unit;
          unit.cell.free = false;

          //this.animY=0;
          //unit.iStand=true;
          unit.moveVektor = outCell.moveVektorOut;
          //unit.target=0;
          unit.fatherFraction = this.fatherFraction;

          unit.initialization = true;

          unit.cellUpdate();

          unit.damagePointX = unit.cell.x + 25;
          unit.damagePointY = unit.cell.y + 25;

          this.fatherFraction.peoples.push(unit);

          if (this.fatherFraction.control === "player") {
            select_sound(unit, "ready");
          }
        }
      }

      if (this.alarmTimer) {
        if (this.alarmTimer === 500) {
          //console.log(this.agressor);

          this.fatherFraction.alarms.push(
            new Alarm(this.agressor, 1500, this.cell.unit)
          );

          this.agressor = 0;
        }

        this.alarmTimer--; //console.log("alarm");
      }
    }

    if (
      this.iComplite &&
      this.hp === this.hpfull &&
      !this.myJoubeTimer &&
      !this.alarmTimer
    ) {
      this.readyToOut = true;

      //console.log("build_out "+this.myJoubeTimer);
    }
  } else if (this.unitName === "dragon_roost") {
    //console.log(this.distroyTimer); push

    if (this.hp <= 0 || this.buildready <= 0) {
      if (this.fatherFraction.control === "comp") {
        if (this.distroyTimer === 501) {
          let repos = this.fatherFraction.createShablon_reposition(
            this.cell.unit
          );

          if (repos) {
            //console.log("!!!!!!!!!!!!!!!!!!!!!!!!");

            //this.fatherFraction.createShablon.baracks.splice(this.iBornCresteShablonNumber,1);
            //repos.iBorn=false;

            this.fatherFraction.createShablon.dragon_roosts[
              this.iBornCresteShablonNumber
            ].vertikal = repos.vertikal;
            this.fatherFraction.createShablon.dragon_roosts[
              this.iBornCresteShablonNumber
            ].horizont = repos.horizont;
            this.fatherFraction.createShablon.dragon_roosts[
              this.iBornCresteShablonNumber
            ].x = repos.x;
            this.fatherFraction.createShablon.dragon_roosts[
              this.iBornCresteShablonNumber
            ].y = repos.y;

            //this.fatherFraction.createShablon.baracks.push(repos);
          }

          this.fatherFraction.createShablon.dragon_roosts[
            this.iBornCresteShablonNumber
          ].iBorn = false;
        }
      }

      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;
          this.myCells[i].free = true;
        }

        //this.cell.unit=0;
        this.fatherFraction.dragon_roosts.splice(
          this.fatherFraction.dragon_roosts.indexOf(this.cell.unit),
          1
        );
        //this.fatherFraction.buildings.splice(this.fatherFraction.buildings.indexOf(this.cell.unit),1);

        this.cell.unit = 0;
        this.cell = 0;
        this.alarmTimer = 0;

        this.readyToOut = true;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }
      }

      return;
    }

    if (this.buildready >= this.hpfull && !this.iComplite) {
      //this.builders[0].iGoBuild=false;

      this.builders = [];

      //this.fatherFraction.maxUnits+=5;

      this.iComplite = true;
      //console.log(this.fatherFraction.maxUnits);
    }

    /*
if(this.iComplite&&this.hp===this.hpfull){
	
	this.readyToOut=true;
	
};

*/
    //console.log(this.distroyTimer);

    if (this.iComplite) {
      if (this.myJoubeTimer) {
        this.myJoubeTimer--;
      }

      if (!this.myJoubeTimer && this.myJoube) {
        this.myJoube = false;

        let cells = [];

        let koof = 5;

        while (!cells.length) {
          for (let i = this.vertikal - koof; i < this.vertikal + koof; i++) {
            for (let k = this.horizont - koof; k < this.horizont + koof; k++) {
              let ok = 0;

              for (let v = i - 1; v <= i; v++) {
                for (let h = k; h <= k + 1; h++) {
                  if (
                    gameFielg[v] &&
                    gameFielg[v][h] &&
                    !gameFielg[v][h].dragoon
                  ) {
                    ok++;
                  }
                }
              }

              if (ok === 4) {
                cells.push(gameFielg[i][k]);
              }
            }
          }

          koof += 5;
        } // while

        let min = [];

        for (let i = 0; i < cells.length; i++) {
          let dis = get_distanse_on_lineyka(this.cell, 50, cells[i], 100);

          if (!min.length || min[0] > dis) {
            min = [dis, cells[i]];
          }
        }

        let cell = min[1];

        /////////////////////////////////////

        let unit = new Unit(
          "dragoon",
          cell.horizont,
          cell.vertikal,
          4,
          this.fatherFraction.fraction,
          this.fatherFraction.nation
        );

        this.fatherFraction.peoples.push(unit);
        this.fatherFraction.peoples[
          this.fatherFraction.peoples.length - 1
        ].cell = cell;
        gameFielg[cell.vertikal][cell.horizont].dragoon =
          this.fatherFraction.peoples[this.fatherFraction.peoples.length - 1];
        gameFielg[cell.vertikal][cell.horizont + 1].dragoon =
          this.fatherFraction.peoples[this.fatherFraction.peoples.length - 1];
        gameFielg[cell.vertikal - 1][cell.horizont].dragoon =
          this.fatherFraction.peoples[this.fatherFraction.peoples.length - 1];
        gameFielg[cell.vertikal - 1][cell.horizont + 1].dragoon =
          this.fatherFraction.peoples[this.fatherFraction.peoples.length - 1];

        this.fatherFraction.peoples[
          this.fatherFraction.peoples.length - 1
        ].fatherFraction = this.fatherFraction;
        this.fatherFraction.peoples[
          this.fatherFraction.peoples.length - 1
        ].cellUpdate();

        this.fatherFraction.peoples[
          this.fatherFraction.peoples.length - 1
        ].initialization = true;

        allUnits++;
        this.fatherFraction.peoples[
          this.fatherFraction.peoples.length - 1
        ].persolalNumber = allUnits;

        if (this.fatherFraction.control === "player") {
          select_sound(unit, "ready");
        }

        ////////////////////////////////
      }
    }

    if (this.alarmTimer) {
      if (this.alarmTimer === 500) {
        //console.log(this.agressor);

        this.fatherFraction.alarms.push(
          new Alarm(this.agressor, 1500, this.cell.unit)
        );

        this.agressor = 0;
      }

      this.alarmTimer--; //console.log("alarm");
    }

    if (
      this.iComplite &&
      this.hp === this.hpfull &&
      !this.myJoubeTimer &&
      !this.alarmTimer
    ) {
      this.readyToOut = true;

      //console.log("build_out "+this.myJoubeTimer);
    }
  } else if (this.unitName === "foundry") {
    //console.log(this.distroyTimer); push readyToOut

    if (this.hp <= 0 || this.buildready <= 0) {
      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;

          if (this.myCells[i].type !== "water") {
            this.myCells[i].free = true;
          }
        }

        //this.cell.unit=0;
        this.fatherFraction.foundrys.splice(
          this.fatherFraction.foundrys.indexOf(this.cell.unit),
          1
        );
        //this.fatherFraction.buildings.splice(this.fatherFraction.buildings.indexOf(this.cell.unit),1);

        this.cell.continent = false;
        this.cell.sea = this.save_sea;
        this.cell.unit = 0;
        this.cell = 0;
        this.alarmTimer = 0;

        this.readyToOut = true;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }
      }

      return;
    }

    //altars

    if (this.buildready >= this.hpfull && !this.iComplite) {
      //this.builders[0].iGoBuild=false;

      this.builders = [];

      //this.fatherFraction.maxUnits+=5;

      this.iComplite = true;
      //console.log(this.fatherFraction.maxUnits);
    }

    /*
if(this.iComplite&&this.hp===this.hpfull){
	
	this.readyToOut=true;
	
};

*/
    //console.log(this.distroyTimer);

    if (this.alarmTimer) {
      if (this.alarmTimer === 500) {
        //console.log(this.agressor);

        this.fatherFraction.alarms.push(
          new Alarm(this.agressor, 1500, this.cell.unit)
        );

        this.agressor = 0;
      }

      this.alarmTimer--; //console.log("alarm");
    }

    if (
      this.iComplite &&
      this.hp === this.hpfull &&
      !this.myJoubeTimer &&
      !this.alarmTimer
    ) {
      //	this.readyToOut=true;
      //console.log("build_out "+this.myJoubeTimer);
    }
  } else if (this.unitName === "port") {
    //console.log(this.distroyTimer); push readyToOut

    if (this.hp <= 0 || this.buildready <= 0) {
      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;

          if (this.myCells[i].type !== "water") {
            this.myCells[i].free = true;
          }
        }

        //this.cell.unit=0;
        this.fatherFraction.ports.splice(
          this.fatherFraction.ports.indexOf(this.cell.unit),
          1
        );
        //this.fatherFraction.buildings.splice(this.fatherFraction.buildings.indexOf(this.cell.unit),1);
        this.cell.continent = false;
        this.cell.sea = this.save_sea;
        this.cell.unit = 0;
        this.cell = 0;
        this.alarmTimer = 0;

        this.readyToOut = true;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }
      }

      return;
    }

    //altars

    if (this.buildready >= this.hpfull && !this.iComplite) {
      //this.builders[0].iGoBuild=false;

      this.builders = [];

      //this.fatherFraction.maxUnits+=5;

      this.iComplite = true;
      //console.log(this.fatherFraction.maxUnits);
    }

    if (this.iComplite) {
      ///////////////////////////////////	ii
      /*
if(this.fatherFraction.control==="comp"){

	
this.ii_timer++;	


if(this.ii_timer===100){this.ii_timer=0;};	
	

if(!this.ii_timer){
	
//console.log(this.ii_timer)
	
	let units=[];
	
	
	for(let i=this.vertikal-5;i<=this.vertikal+6;i++){
			for(let k=this.horizont-5;k<=this.horizont+6;k++){
		
	if(
	gameFielg[i]&&gameFielg[i][k]
	&&
gameFielg[i][k].unit
&&
gameFielg[i][k].unit.sweeme
&&
gameFielg[i][k].unit.fatherFraction.fraction===this.fatherFraction.fraction
&&
!gameFielg[i][k].unit.active
	){
		if(units.indexOf(gameFielg[i][k].unit)===-1){
		units.push(gameFielg[i][k].unit);
		};
	};	
		
		
	};
	};
	

let cells=[];

for(let i=0;i<allContinents[this.fatherFraction.continent].conturLine_sea_Cells.length;i++)	{

let dis=get_distanse_on_lineyka(this.cell,100,allContinents[this.fatherFraction.continent].conturLine_sea_Cells[i],50);	
	
if(
dis>400
&&
dis<1000
//&&
//!allContinents[this.fatherFraction.continent].conturLine_sea_Cells[i].unit
&&
!allContinents[this.fatherFraction.continent].conturLine_sea_Cells[i].vossalObj

){cells.push(allContinents[this.fatherFraction.continent].conturLine_sea_Cells[i]);};	
	
	
};
	

for(let i=0;i<units.length;i++){

if(cells.length){
	
	let ran=Math.floor(Math.random()*cells.length);
	
	let c=cells[ran];
	
units[i].clickSave=new ClickSave(0,c);	
units[i].spe=c;
units[i].born_cell=c;
cells.splice(ran,1);

this.fatherFraction.activeUnits.push(units[i]);
units[i].active=true;


}
else{break;};
	
};

	
	
	
	
};


};	
//*/
      ////////////////////////////////

      if (this.myJoubeTimer) {
        this.myJoubeTimer--;
      }

      if (!this.myJoubeTimer) {
        if (this.myJoube === "turtle") {
          //sea

          let min = [];

          for (let j = 0; j < allSeas[this.save_sea].cells.length; j++) {
            let cell = allSeas[this.save_sea].cells[j];

            let ok = true;

            for (let i = cell.vertikal - 1; i <= cell.vertikal; i++) {
              for (let k = cell.horizont; k <= cell.horizont + 1; k++) {
                if (
                  !gameFielg[i] ||
                  !gameFielg[i][k] ||
                  gameFielg[i][k].unit ||
                  gameFielg[i][k].vossalObj ||
                  gameFielg[i][k].type !== "water"
                ) {
                  ok = false;
                }
              }
            }

            if (ok) {
              let dis = get_distanse_on_lineyka(this.cell, 50, cell, 100);

              if (!min.length || min[0] > dis) {
                min = [dis, cell];
              }
            }
          }

          //console.log(min); pausa=1; push

          if (min.length) {
            let cell = min[1];

            let unit = new Unit(
              "turtle",
              cell.horizont,
              cell.vertikal,
              2,
              this.fatherFraction.fraction,
              this.fatherFraction.nation
            );

            unit.fatherFraction = this.fatherFraction;

            this.fatherFraction.peoples.push(unit);

            this.fatherFraction.peoples[
              this.fatherFraction.peoples.length - 1
            ].cell = gameFielg[cell.vertikal][cell.horizont];
            gameFielg[cell.vertikal][cell.horizont].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal - 1][cell.horizont].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal - 1][cell.horizont + 1].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal][cell.horizont + 1].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];

            unit.initialization = true;

            allUnits++;
            unit.persolalNumber = allUnits;

            unit.cellUpdate();

            if (this.fatherFraction.control === "player") {
              select_sound(unit, "ready");
            }

            //console.log("distroer"); pausa=1;
          }
        } else if (this.myJoube === "linkor") {
          let min = [];

          for (let j = 0; j < allSeas[this.save_sea].cells.length; j++) {
            let cell = allSeas[this.save_sea].cells[j];

            let ok = true;

            for (let i = cell.vertikal - 1; i <= cell.vertikal; i++) {
              for (let k = cell.horizont; k <= cell.horizont + 1; k++) {
                if (
                  !gameFielg[i] ||
                  !gameFielg[i][k] ||
                  gameFielg[i][k].unit ||
                  gameFielg[i][k].vossalObj ||
                  gameFielg[i][k].type !== "water"
                ) {
                  ok = false;
                }
              }
            }

            if (ok) {
              let dis = get_distanse_on_lineyka(this.cell, 50, cell, 100);

              if (!min.length || min[0] > dis) {
                min = [dis, cell];
              }
            }
          }

          //console.log(min); pausa=1; push

          if (min.length) {
            let cell = min[1];

            let unit = new Unit(
              "linkor",
              cell.horizont,
              cell.vertikal,
              2,
              this.fatherFraction.fraction,
              this.fatherFraction.nation
            );

            unit.fatherFraction = this.fatherFraction;

            this.fatherFraction.peoples.push(unit);

            this.fatherFraction.peoples[
              this.fatherFraction.peoples.length - 1
            ].cell = gameFielg[cell.vertikal][cell.horizont];
            gameFielg[cell.vertikal][cell.horizont].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal - 1][cell.horizont].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal - 1][cell.horizont + 1].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal][cell.horizont + 1].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];

            unit.initialization = true;

            allUnits++;
            unit.persolalNumber = allUnits;

            unit.cellUpdate();

            if (this.fatherFraction.control === "player") {
              select_sound(unit, "ready");
            }

            //console.log("distroer"); pausa=1;
          }
        } else if (this.myJoube === "distroer") {
          let min = [];

          for (let j = 0; j < allSeas[this.save_sea].cells.length; j++) {
            let cell = allSeas[this.save_sea].cells[j];

            let ok = true;

            for (let i = cell.vertikal - 1; i <= cell.vertikal; i++) {
              for (let k = cell.horizont; k <= cell.horizont + 1; k++) {
                if (
                  !gameFielg[i] ||
                  !gameFielg[i][k] ||
                  gameFielg[i][k].unit ||
                  gameFielg[i][k].vossalObj ||
                  gameFielg[i][k].type !== "water"
                ) {
                  ok = false;
                }
              }
            }

            if (ok) {
              let dis = get_distanse_on_lineyka(this.cell, 50, cell, 100);

              if (!min.length || min[0] > dis) {
                min = [dis, cell];
              }
            }
          }

          //console.log(min); pausa=1; push

          if (min.length) {
            let cell = min[1];

            let unit = new Unit(
              "distroer",
              cell.horizont,
              cell.vertikal,
              2,
              this.fatherFraction.fraction,
              this.fatherFraction.nation
            );

            unit.fatherFraction = this.fatherFraction;

            this.fatherFraction.peoples.push(unit);

            this.fatherFraction.peoples[
              this.fatherFraction.peoples.length - 1
            ].cell = gameFielg[cell.vertikal][cell.horizont];
            gameFielg[cell.vertikal][cell.horizont].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal - 1][cell.horizont].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal - 1][cell.horizont + 1].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal][cell.horizont + 1].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];

            unit.initialization = true;

            allUnits++;
            unit.persolalNumber = allUnits;

            unit.cellUpdate();

            if (this.fatherFraction.control === "player") {
              select_sound(unit, "ready");
            }

            //console.log("distroer"); pausa=1;
          }
        } else if (this.myJoube === "transport") {
          //console.log("in");
          /*		
	fractions[1].peoples.push(new Unit("transport",20-12,36-8,2,"blackOrcs"));
fractions[1].peoples[fractions[1].peoples.length-1].cell=gameFielg[36-8][20-12];
gameFielg[36-8][20-12].unit=fractions[1].peoples[fractions[1].peoples.length-1];
gameFielg[35-8][20-12].unit=fractions[1].peoples[fractions[1].peoples.length-1];
gameFielg[35-8][21-12].unit=fractions[1].peoples[fractions[1].peoples.length-1];
gameFielg[36-8][21-12].unit=fractions[1].peoples[fractions[1].peoples.length-1];	
*/
          //console.log(allSeas[this.cell.sea])
          let min = [];

          for (let j = 0; j < allSeas[this.save_sea].cells.length; j++) {
            let cell = allSeas[this.save_sea].cells[j];

            let ok = true;

            for (let i = cell.vertikal - 1; i <= cell.vertikal; i++) {
              for (let k = cell.horizont; k <= cell.horizont + 1; k++) {
                if (
                  !gameFielg[i] ||
                  !gameFielg[i][k] ||
                  gameFielg[i][k].unit ||
                  gameFielg[i][k].vossalObj ||
                  gameFielg[i][k].type !== "water"
                ) {
                  ok = false;
                }
              }
            }

            if (ok) {
              let dis = get_distanse_on_lineyka(this.cell, 50, cell, 100);

              if (!min.length || min[0] > dis) {
                min = [dis, cell];
              }
            }
          }

          //console.log(min); pausa=1; push

          if (min.length) {
            let cell = min[1];

            let unit = new Unit(
              "transport",
              cell.horizont,
              cell.vertikal,
              2,
              this.fatherFraction.fraction,
              this.fatherFraction.nation
            );

            unit.fatherFraction = this.fatherFraction;

            this.fatherFraction.peoples.push(unit);

            this.fatherFraction.peoples[
              this.fatherFraction.peoples.length - 1
            ].cell = gameFielg[cell.vertikal][cell.horizont];
            gameFielg[cell.vertikal][cell.horizont].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal - 1][cell.horizont].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal - 1][cell.horizont + 1].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal][cell.horizont + 1].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];

            unit.initialization = true;

            allUnits++;
            unit.persolalNumber = allUnits;

            unit.cellUpdate();

            if (this.fatherFraction.control === "player") {
              select_sound(unit, "ready");
            }
          }
        } else if (this.myJoube === "oil_tanker") {
          let min = [];

          for (let j = 0; j < allSeas[this.save_sea].cells.length; j++) {
            let cell = allSeas[this.save_sea].cells[j];

            let ok = true;

            for (let i = cell.vertikal - 1; i <= cell.vertikal; i++) {
              for (let k = cell.horizont; k <= cell.horizont + 1; k++) {
                if (
                  !gameFielg[i] ||
                  !gameFielg[i][k] ||
                  gameFielg[i][k].unit ||
                  gameFielg[i][k].vossalObj ||
                  gameFielg[i][k].type !== "water"
                ) {
                  ok = false;
                }
              }
            }

            if (ok) {
              let dis = get_distanse_on_lineyka(this.cell, 50, cell, 100);

              if (!min.length || min[0] > dis) {
                min = [dis, cell];
              }
            }
          }

          //console.log(min); pausa=1; push

          if (min.length) {
            let cell = min[1];

            let unit = new Unit(
              "oil_tanker",
              cell.horizont,
              cell.vertikal,
              2,
              this.fatherFraction.fraction,
              this.fatherFraction.nation
            );

            unit.fatherFraction = this.fatherFraction;

            this.fatherFraction.peoples.push(unit);

            this.fatherFraction.peoples[
              this.fatherFraction.peoples.length - 1
            ].cell = gameFielg[cell.vertikal][cell.horizont];
            gameFielg[cell.vertikal][cell.horizont].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal - 1][cell.horizont].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal - 1][cell.horizont + 1].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];
            gameFielg[cell.vertikal][cell.horizont + 1].unit =
              this.fatherFraction.peoples[
                this.fatherFraction.peoples.length - 1
              ];

            unit.initialization = true;

            allUnits++;
            unit.persolalNumber = allUnits;

            unit.cellUpdate();

            if (this.fatherFraction.control === "player") {
              select_sound(unit, "ready");
            }
          }
        }

        this.myJoube = false;
      }
    }

    /*
if(this.iComplite&&this.hp===this.hpfull){
	
	this.readyToOut=true;
	
};

*/
    //console.log(this.distroyTimer);

    if (this.alarmTimer) {
      if (this.alarmTimer === 500) {
        //console.log(this.agressor);

        this.fatherFraction.alarms.push(
          new Alarm(this.agressor, 1500, this.cell.unit)
        );

        this.agressor = 0;
      }

      this.alarmTimer--; //console.log("alarm");
    }

    if (
      this.iComplite &&
      this.hp === this.hpfull &&
      !this.myJoubeTimer &&
      !this.alarmTimer
    ) {
      //	this.readyToOut=true;
      //console.log("build_out "+this.myJoubeTimer);
    }
  } else if (this.unitName === "oil_Ref") {
    //console.log(this.distroyTimer); push readyToOut oil

    if (this.hp <= 0 || this.buildready <= 0) {
      if (!this.ch) {
        this.ch = true;

        for (let m = 0; m < this.tankers.length; m++) {
          this.tankers[m].readyToOut = true;
          this.tankers[m].katastrofa = true;
        }

        this.tankers = [];
      }

      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;

          if (this.myCells[i].type !== "water") {
            this.myCells[i].free = true;
          }
        }

        //this.cell.unit=0;
        this.fatherFraction.oil_Refs.splice(
          this.fatherFraction.oil_Refs.indexOf(this.cell.unit),
          1
        );
        //this.fatherFraction.buildings.splice(this.fatherFraction.buildings.indexOf(this.cell.unit),1);
        this.cell.continent = false;
        this.cell.sea = this.save_sea;
        this.cell.unit = 0;
        this.cell = 0;
        this.alarmTimer = 0;

        this.readyToOut = true;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }
      }

      return;
    }

    //altars

    if (this.buildready >= this.hpfull && !this.iComplite) {
      //this.builders[0].iGoBuild=false;

      this.builders = [];

      //this.fatherFraction.maxUnits+=5;

      this.iComplite = true;
      //console.log(this.fatherFraction.maxUnits);
    }

    if (this.iComplite) {
      if (this.timers.length) {
        if (this.timers[0].time) {
          this.timers[0].time--;
        }

        if (!this.timers[0].time) {
          let min = [];

          for (let j = 0; j < allSeas[this.save_sea].cells.length; j++) {
            let cell = allSeas[this.save_sea].cells[j];

            let ok = true;

            for (let i = cell.vertikal - 1; i <= cell.vertikal; i++) {
              for (let k = cell.horizont; k <= cell.horizont + 1; k++) {
                if (
                  !gameFielg[i] ||
                  !gameFielg[i][k] ||
                  gameFielg[i][k].unit ||
                  gameFielg[i][k].vossalObj ||
                  gameFielg[i][k].type !== "water"
                ) {
                  ok = false;
                }
              }
            }

            if (ok) {
              let dis = get_distanse_on_lineyka(this.cell, 100, cell, 50);

              if (!min.length || min[0] > dis) {
                min = [dis, cell];
              }
            }
          }

          //console.log(min); pausa=1; push

          if (min.length) {
            let cell = min[1];

            let unit = this.tankers[0];

            //unit.oil=true;

            unit.cell = cell;
            //this.hotCell=this.cell;

            unit.horizont = cell.horizont;
            unit.vertikal = cell.vertikal;
            unit.x = cell.x;
            unit.y = cell.y;
            unit.stepTakt = 0;

            for (let v = cell.vertikal - 1; v <= cell.vertikal; v++) {
              for (let h = cell.horizont; h <= cell.horizont + 1; h++) {
                gameFielg[v][h].unit = unit;
              }
            }

            //pausa=1;

            unit.cellUpdate();

            unit.clickSave = new ClickSave(this.cell.unit, 0);

            if (!unit.active) {
              unit.fatherFraction.activeUnits.push(unit);
              unit.active = true;
            }

            //console.log("go");
          }

          this.tankers.shift();
          this.timers.shift();
        }
      }
    }

    /*
if(this.iComplite&&this.hp===this.hpfull){
	
	this.readyToOut=true;
	
};

*/
    //console.log(this.distroyTimer);

    if (this.alarmTimer) {
      if (this.alarmTimer === 500) {
        //console.log(this.agressor);

        this.fatherFraction.alarms.push(
          new Alarm(this.agressor, 1500, this.cell.unit)
        );

        this.agressor = 0;
      }

      this.alarmTimer--; //console.log("alarm");
    }

    if (
      this.iComplite &&
      this.hp === this.hpfull &&
      !this.tankers.length &&
      !this.alarmTimer
    ) {
      this.readyToOut = true;

      //console.log("build_out "+this.myJoubeTimer);
    }
  } else if (this.unitName === "oil_platform") {
    if (this.hp <= 0 || this.buildready <= 0) {
      if (!this.ch) {
        this.ch = true;

        for (let m = 0; m < this.tankers.length; m++) {
          this.tankers[m].readyToOut = true;
          this.tankers[m].katastrofa = true;
        }

        this.tankers = [];
      }

      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        //this.cell.unit=0;
        this.fatherFraction.oil_platforms.splice(
          this.fatherFraction.oil_platforms.indexOf(this.cell.unit),
          1
        );
        //this.fatherFraction.buildings.splice(this.fatherFraction.buildings.indexOf(this.cell.unit),1);

        for (let i = 0; i < this.cells.length; i++) {
          this.cells[i].unit = 0;
        }

        this.cell.unit = 0;
        this.cell = 0;
        this.alarmTimer = 0;

        this.readyToOut = true;
      }

      return;
    }

    if (this.buildready < this.hpfull) {
      this.buildready += 10;
    } else {
      this.buildready = this.hpfull;
      this.iComplite = true;

      if (this.timers.length) {
        if (this.timers[0].time) {
          this.timers[0].time--;
        }

        if (!this.timers[0].time && this.hp === this.hpfull) {
          let min = [];

          for (let j = 0; j < allSeas[this.cell.sea].cells.length; j++) {
            let cell = allSeas[this.cell.sea].cells[j];

            let ok = true;

            for (let i = cell.vertikal - 1; i <= cell.vertikal; i++) {
              for (let k = cell.horizont; k <= cell.horizont + 1; k++) {
                if (
                  !gameFielg[i] ||
                  !gameFielg[i][k] ||
                  gameFielg[i][k].unit ||
                  gameFielg[i][k].vossalObj ||
                  gameFielg[i][k].type !== "water"
                ) {
                  ok = false;
                }
              }
            }

            if (ok) {
              let dis = get_distanse_on_lineyka(this.cell, 100, cell, 50);

              if (!min.length || min[0] > dis) {
                min = [dis, cell];
              }
            }
          }

          //console.log(min); pausa=1; push

          if (min.length) {
            let cell = min[1];

            let unit = this.tankers[0];

            unit.oil = true;

            unit.cell = cell;
            //this.hotCell=this.cell;

            unit.horizont = cell.horizont;
            unit.vertikal = cell.vertikal;
            unit.x = cell.x;
            unit.y = cell.y;

            for (let v = cell.vertikal - 1; v <= cell.vertikal; v++) {
              for (let h = cell.horizont; h <= cell.horizont + 1; h++) {
                gameFielg[v][h].unit = unit;
              }
            }

            //pausa=1;

            unit.cellUpdate();

            unit.clickSave = new ClickSave(this.cell.unit, 0);

            if (!unit.active) {
              unit.fatherFraction.activeUnits.push(unit);
              unit.active = true;
            }
            //console.log("go");
          }

          this.tankers.shift();
          this.timers.shift();
        } else {
          this.hp += 0.5;

          if (this.hp > this.hpfull) {
            this.hp = this.hpfull;
          }
        }
      }
    }

    if (!this.tankers.length && !this.cell.oil.oil) {
      this.hp = 0;

      allSeas[this.cell.sea].oils.splice(
        allSeas[this.cell.sea].oils.indexOf(this.cell.oil),
        1
      );

      for (let i = 0; i < this.cells.length; i++) {
        this.cells[i].oil = false;
      }
    }

    if (this.alarmTimer) {
      if (this.alarmTimer === 500) {
        //console.log(this.agressor);

        this.fatherFraction.alarms.push(
          new Alarm(this.agressor, 1500, this.cell.unit)
        );

        this.agressor = 0;
      }

      this.alarmTimer--; //console.log("alarm");
    }
  } else if (this.unitName === "altar") {
    //console.log(this.distroyTimer); push

    if (this.hp <= 0 || this.buildready <= 0) {
      if (this.fatherFraction.control === "comp") {
        if (this.distroyTimer === 501) {
          let repos = this.fatherFraction.createShablon_reposition(
            this.cell.unit
          );

          if (repos) {
            //console.log("!!!!!!!!!!!!!!!!!!!!!!!!");

            //this.fatherFraction.createShablon.baracks.splice(this.iBornCresteShablonNumber,1);
            //repos.iBorn=false;

            this.fatherFraction.createShablon.altars[
              this.iBornCresteShablonNumber
            ].vertikal = repos.vertikal;
            this.fatherFraction.createShablon.altars[
              this.iBornCresteShablonNumber
            ].horizont = repos.horizont;
            this.fatherFraction.createShablon.altars[
              this.iBornCresteShablonNumber
            ].x = repos.x;
            this.fatherFraction.createShablon.altars[
              this.iBornCresteShablonNumber
            ].y = repos.y;

            //this.fatherFraction.createShablon.baracks.push(repos);
          }

          this.fatherFraction.createShablon.altars[
            this.iBornCresteShablonNumber
          ].iBorn = false;
        }
      }

      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;
          this.myCells[i].free = true;
        }

        //this.cell.unit=0;
        this.fatherFraction.altars.splice(
          this.fatherFraction.altars.indexOf(this.cell.unit),
          1
        );
        //this.fatherFraction.buildings.splice(this.fatherFraction.buildings.indexOf(this.cell.unit),1);

        this.cell.unit = 0;
        this.cell = 0;
        this.alarmTimer = 0;

        this.readyToOut = true;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }
      }

      return;
    }

    if (this.buildready >= this.hpfull && !this.iComplite) {
      //this.builders[0].iGoBuild=false;

      this.builders = [];

      //this.fatherFraction.maxUnits+=5;

      this.iComplite = true;
      //console.log(this.fatherFraction.maxUnits);
    }

    /*
if(this.iComplite&&this.hp===this.hpfull){
	
	this.readyToOut=true;
	
};

*/
    //console.log(this.distroyTimer);

    if (this.alarmTimer) {
      if (this.alarmTimer === 500) {
        //console.log(this.agressor);

        this.fatherFraction.alarms.push(
          new Alarm(this.agressor, 1500, this.cell.unit)
        );

        this.agressor = 0;
      }

      this.alarmTimer--; //console.log("alarm");
    }

    if (
      this.iComplite &&
      this.hp === this.hpfull &&
      !this.myJoubeTimer &&
      !this.alarmTimer
    ) {
      this.readyToOut = true;

      //console.log("build_out "+this.myJoubeTimer);
    }
  } else if (this.unitName === "ogreBase") {
    //console.log(this.distroyTimer);

    if (this.hp <= 0 || this.buildready <= 0) {
      if (this.fatherFraction.control === "comp") {
        if (this.distroyTimer === 501) {
          let repos = this.fatherFraction.createShablon_reposition(
            this.cell.unit
          );

          if (repos) {
            //console.log("!!!!!!!!!!!!!!!!!!!!!!!!");

            //this.fatherFraction.createShablon.baracks.splice(this.iBornCresteShablonNumber,1);
            //repos.iBorn=false;

            this.fatherFraction.createShablon.ogreBases[
              this.iBornCresteShablonNumber
            ].vertikal = repos.vertikal;
            this.fatherFraction.createShablon.ogreBases[
              this.iBornCresteShablonNumber
            ].horizont = repos.horizont;
            this.fatherFraction.createShablon.ogreBases[
              this.iBornCresteShablonNumber
            ].x = repos.x;
            this.fatherFraction.createShablon.ogreBases[
              this.iBornCresteShablonNumber
            ].y = repos.y;

            //this.fatherFraction.createShablon.baracks.push(repos);
          }

          this.fatherFraction.createShablon.ogreBases[
            this.iBornCresteShablonNumber
          ].iBorn = false;
        }
      }

      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;
          this.myCells[i].free = true;
        }

        //this.cell.unit=0;
        this.fatherFraction.ogreBases.splice(
          this.fatherFraction.ogreBases.indexOf(this.cell.unit),
          1
        );
        //this.fatherFraction.buildings.splice(this.fatherFraction.buildings.indexOf(this.cell.unit),1);

        this.cell.unit = 0;
        this.cell = 0;
        this.alarmTimer = 0;

        this.readyToOut = true;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }
      }

      return;
    }

    if (this.buildready >= this.hpfull && !this.iComplite) {
      //this.builders[0].iGoBuild=false;

      this.builders = [];

      //this.fatherFraction.maxUnits+=5;

      this.iComplite = true;
      //console.log(this.fatherFraction.maxUnits);
    }

    /*
if(this.iComplite&&this.hp===this.hpfull){
	
	this.readyToOut=true;
	
};

*/
    //console.log(this.distroyTimer);

    if (this.alarmTimer) {
      if (this.alarmTimer === 500) {
        //console.log(this.agressor);

        this.fatherFraction.alarms.push(
          new Alarm(this.agressor, 1500, this.cell.unit)
        );

        this.agressor = 0;
      }

      this.alarmTimer--; //console.log("alarm");
    }

    if (
      this.iComplite &&
      this.hp === this.hpfull &&
      !this.myJoubeTimer &&
      !this.alarmTimer
    ) {
      this.readyToOut = true;

      //console.log("build_out "+this.myJoubeTimer);
    }
  } else if (this.unitName === "kuznya") {
    //console.log(this.distroyTimer);

    if (this.hp <= 0 || this.buildready <= 0) {
      if (this.fatherFraction.control === "comp") {
        if (this.distroyTimer === 501) {
          let repos = this.fatherFraction.createShablon_reposition(
            this.cell.unit
          );

          if (repos) {
            //console.log("!!!!!!!!!!!!!!!!!!!!!!!!");

            //this.fatherFraction.createShablon.baracks.splice(this.iBornCresteShablonNumber,1);
            //repos.iBorn=false;

            this.fatherFraction.createShablon.kuznyas[
              this.iBornCresteShablonNumber
            ].vertikal = repos.vertikal;
            this.fatherFraction.createShablon.kuznyas[
              this.iBornCresteShablonNumber
            ].horizont = repos.horizont;
            this.fatherFraction.createShablon.kuznyas[
              this.iBornCresteShablonNumber
            ].x = repos.x;
            this.fatherFraction.createShablon.kuznyas[
              this.iBornCresteShablonNumber
            ].y = repos.y;

            //this.fatherFraction.createShablon.baracks.push(repos);
          }

          this.fatherFraction.createShablon.kuznyas[
            this.iBornCresteShablonNumber
          ].iBorn = false;
        }
      }

      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;
          this.myCells[i].free = true;
        }

        //this.cell.unit=0;
        this.fatherFraction.kuznyas.splice(
          this.fatherFraction.kuznyas.indexOf(this.cell.unit),
          1
        );
        //this.fatherFraction.buildings.splice(this.fatherFraction.buildings.indexOf(this.cell.unit),1);

        this.cell.unit = 0;
        this.cell = 0;
        this.alarmTimer = 0;

        this.readyToOut = true;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }
      }

      return;
    }

    if (this.buildready >= this.hpfull && !this.iComplite) {
      //this.builders[0].iGoBuild=false;

      this.builders = [];

      //this.fatherFraction.maxUnits+=5;

      this.iComplite = true;
      //console.log(this.fatherFraction.maxUnits);
    }

    /*
if(this.iComplite&&this.hp===this.hpfull){
	
	this.readyToOut=true;
	
};

*/
    //console.log(this.distroyTimer);

    if (this.alarmTimer) {
      if (this.alarmTimer === 500) {
        //console.log(this.agressor);

        this.fatherFraction.alarms.push(
          new Alarm(this.agressor, 1500, this.cell.unit)
        );

        this.agressor = 0;
      }

      this.alarmTimer--; //console.log("alarm");
    }

    if (
      this.iComplite &&
      this.hp === this.hpfull &&
      !this.myJoubeTimer &&
      !this.alarmTimer
    ) {
      this.readyToOut = true;

      //console.log("build_out "+this.myJoubeTimer);
    }
  } else if (this.unitName === "tower") {
    //console.log("active"); unterTowers upgradeTimer

    if (this.hp <= 0 || this.buildready <= 0) {
      if (this.distroyTimer === 501 && this.fatherFraction.control === "comp") {
        if (!this.dop) {
          this.fatherFraction.createShablon.towers[
            this.iBornCresteShablonNumber
          ].iBorn = false;
        }

        let ind = this.fatherFraction.unterTowers.indexOf(this.cell.unit);

        if (ind !== -1) {
          this.fatherFraction.unterTowers.splice(ind, 1);
        }
      }
      this.alarmTimer = 0;
      this.hp = 0;
      this.buildready = 0;

      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;
          this.myCells[i].free = true;
        }

        //this.cell.unit=0;
        this.fatherFraction.towers.splice(
          this.fatherFraction.towers.indexOf(this.cell.unit),
          1
        );
        //this.fatherFraction.buildings.splice(this.fatherFraction.buildings.indexOf(this.cell.unit),1);

        this.cell.unit = 0;
        this.cell = 0;

        this.readyToOut = true;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //farms console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }
      }

      return;
    }

    if (this.buildready >= this.hpfull && !this.iComplite) {
      //this.builders[0].iGoBuild=false;

      this.builders = [];

      //this.fatherFraction.maxUnits+=5;

      this.iComplite = true;
      //console.log(this.fatherFraction.maxUnits);
    }

    /////////////////////////////////////  upgrade
    if (this.upgrade === "guard") {
      this.iCanGetFly = true;
    }

    if (!this.iFight && this.upgrade !== "watch" && !this.upgradeTimer) {
      let min = [];

      for (let i = 0; i < this.animys.length; i++) {
        let c;

        if (this.animys[i] && this.animys[i].damagePointX) {
          let a = this.animys[i].damagePointX - this.damagePointX;
          let b = this.animys[i].damagePointY - this.damagePointY;

          c = Math.sqrt(a * a + b * b);
        }

        if (
          !this.animys[i] ||
          !c ||
          c > 550 ||
          !this.animys[i] ||
          !this.animys[i].cell ||
          this.animys[i].hp <= 0
        ) {
          if (
            this.animys[i] &&
            this.target &&
            this.target.persolalNumber === this.animys[i].persolalNumber
          ) {
            this.target = 0;
          }

          this.animys.splice(i, 1);

          i--;
        } else {
          if (
            (!min.length || c < min[0]) &&
            c <= 475 &&
            this.animys[i].cell &&
            this.animys[i].hp > 0 &&
            (!this.animys[i].fly ||
              (this.animys[i].fly && this.upgrade === "guard"))
          ) {
            min = [c, this.animys[i]];
          }
        }
      }

      if (min.length) {
        this.target = min[1];

        if (this.upgrade === "guard") {
          this.iFight = 50;
          this.attack = 100;
        } else if (this.upgrade === "cannon") {
          this.iFight = 150;
          this.attack = 350;
        }
      }
    }

    if (this.upgrade === "guard") {
      //this.iFight=50;
      this.attack = 100;
    } else if (this.upgrade === "cannon") {
      //this.iFight=150;
      this.attack = 350;
    }

    //////////////////////////////////////////////////// alarm

    if (this.alarmTimer) {
      if (this.alarmTimer === 500) {
        //console.log(this.agressor);

        this.fatherFraction.alarms.push(
          new Alarm(this.agressor, 1500, this.cell.unit)
        );

        this.agressor = 0;
      }

      this.alarmTimer--; //console.log("alarm");
    }

    //////////////////////////////////////////////////////////

    if (this.iFight === 50 && this.upgrade === "guard") {
      let a = this.target.damagePointX - this.damagePointX;
      let b = this.target.damagePointY - this.damagePointY;

      let c = Math.sqrt(a * a + b * b);

      let a2 = this.target.damagePointX - this.firePointX;
      let b2 = this.target.damagePointY - this.firePointY;

      //x,y,type,target,attack,father

      let conor = Math.atan2(b, a);

      let axe = new Axes(
        this.firePointX,
        this.firePointY,
        "strela_tower",
        undefined,
        this.attack,
        this.cell.unit,
        conor
      );

      axe.takt = Math.floor(c / 24);

      ////////////////////////

      axe.dopGabKoof = 40 / axe.takt;

      /////////////////////////////

      let a3 = a2; //this.target.damagePointX-this.firePointX;
      let b3 = b2; //(this.target.damagePointY-30)-this.firePointY;

      if (this.target.fly) {
        a3 = this.target.damagePointX - this.firePointX;
        b3 = this.target.damagePointY - 30 - this.firePointY;
        //console.log("drdrdrdrdr");
      }

      axe.gSp = a3 / axe.takt;
      axe.vSp = b3 / axe.takt;

      axe.stopDraw = 2;

      axe.target = this.target;
      //axe.attack=this.attack;
      //x,y,type,target,attack,father,conor

      axesFly.push(axe);
    } else if (this.iFight === 150 && this.upgrade === "cannon") {
      let c;

      let a2;
      let b2;

      let a;
      let b;

      let conor;
      let conor2;

      let xy;

      if (this.target.unitStatus === "life") {
        let damagePointX;
        let damagePointY;

        if (this.target.gabarit === 50) {
          damagePointX = this.target.x + 25;
          damagePointY = this.target.y + 25;
        } else if (this.target.gabarit === 100) {
          damagePointX = this.target.x + 50;
          damagePointY = this.target.y;
        }

        a = damagePointX - this.damagePointX;
        b = damagePointY - this.damagePointY;

        c = Math.sqrt(a * a + b * b);

        a2 = damagePointX - this.firePointX;
        b2 = damagePointY - this.firePointY;

        //x,y,type,target,attack,father

        conor = Math.atan2(b2, a2);
        conor2 = Math.atan2(b, a);

        if (c >= 125) {
          xy = { x: damagePointX, y: damagePointY };
        } else {
          xy = {
            x: this.damagePointX + Math.cos(conor2) * 125,
            y: this.damagePointY + Math.sin(conor2) * 125,
          };

          a = xy.x - this.damagePointX;
          b = xy.y - this.damagePointY;

          c = Math.sqrt(a * a + b * b);

          //console.log(c);

          a2 = xy.x - this.firePointX;
          b2 = xy.y - this.firePointY;
        }
      }

      //x,y,type,target,attack,father,conor,xy

      let axe = new Axes(
        this.firePointX,
        this.firePointY,
        "cannon_tower",
        undefined,
        this.attack,
        this.cell.unit,
        conor,
        xy
      );

      axe.takt = Math.floor(c / 10);

      ////////////////////////

      axe.dopGabKoof = 10 / axe.takt;

      /////////////////////////////

      axe.gSp = a2 / axe.takt;
      axe.vSp = b2 / axe.takt;

      axe.stopDraw = 2;

      axe.target = this.target;
      //axe.attack=this.attack;
      //x,y,type,target,attack,father,conor

      axesFly.push(axe);
    }

    if (this.iFight) {
      this.iFight--;
    }

    if (this.upgradeTimer) {
      this.upgradeTimer--;
    }

    if (this.upgradeTimer > 1) {
      this.animys = [];
    }

    this.myJoubeTimer = this.upgradeTimer;

    if (this.upgradeTimer === 1) {
      ///////////////////
      if (this.nation === "h") {
        if (this.upgrade === "cannon") {
          this.face_animY = 10300;
          this.menu_name = "Cannon tower";
        } else {
          this.face_animY = 10200;
          this.menu_name = "Guard tower";
        }

        this.dop_menu = false;
      } else {
        if (this.upgrade === "cannon") {
          this.face_animY = 10500;
          this.menu_name = "cannon tower";
        } else {
          this.face_animY = 10400;
          this.menu_name = "guard tower";
        }

        this.dop_menu = false;
      }

      ////////////////

      for (let i = this.vertikal - 11; i <= this.vertikal + 11; i++) {
        for (let k = this.horizont - 11; k <= this.horizont + 11; k++) {
          if (gameFielg[i] && gameFielg[i][k]) {
            if (
              gameFielg[i][k].unit &&
              !gameFielg[i][k].unit.neitral &&
              gameFielg[i][k].unit.fatherFraction.union !==
                this.fatherFraction.union &&
              gameFielg[i][k].unit.warrior &&
              gameFielg[i][k].unit.unitName !== "tower"
            ) {
              this.animys.push(gameFielg[i][k].unit);
            }

            if (
              gameFielg[i][k].dragoon &&
              gameFielg[i][k].dragoon.fatherFraction.union !==
                this.fatherFraction.union &&
              gameFielg[i][k].dragoon.hp > 0
            ) {
              if (this.iCanGetFly) {
                if (this.animys.indexOf(gameFielg[i][k].dragoon) === -1) {
                  this.animys.push(gameFielg[i][k].dragoon);
                }
              }

              if (
                gameFielg[i][k].dragoon.fatherFraction.activeUnits.indexOf(
                  gameFielg[i][k].dragoon
                ) === -1
              ) {
                gameFielg[i][k].dragoon.fatherFraction.activeUnits.push(
                  gameFielg[i][k].dragoon
                );
              }

              if (
                gameFielg[i][k].dragoon.animys.indexOf(this.cell.unit) === -1
              ) {
                gameFielg[i][k].dragoon.animys.push(this.cell.unit);
              }
            }
          }
        }
      }
    }

    ////////////////////////////////////

    if (
      this.iComplite &&
      this.hp === this.hpfull &&
      !this.animys.length &&
      !this.upgradeTimer &&
      !this.iFight &&
      !this.alarmTimer
    ) {
      this.readyToOut = true;
      //console.log("out_2");
    }

    //console.log(this.distroyTimer);
  } else if (this.unitName === "barack") {
    //console.log(this.distroyTimer);

    if (this.hp <= 0 || this.buildready <= 0) {
      if (this.fatherFraction.control === "comp") {
        if (this.distroyTimer === 501) {
          let repos = this.fatherFraction.createShablon_reposition(
            this.cell.unit
          );

          if (repos) {
            //console.log("!!!!!!!!!!!!!!!!!!!!!!!!");

            //this.fatherFraction.createShablon.baracks.splice(this.iBornCresteShablonNumber,1);
            //repos.iBorn=false;

            this.fatherFraction.createShablon.baracks[
              this.iBornCresteShablonNumber
            ].vertikal = repos.vertikal;
            this.fatherFraction.createShablon.baracks[
              this.iBornCresteShablonNumber
            ].horizont = repos.horizont;
            this.fatherFraction.createShablon.baracks[
              this.iBornCresteShablonNumber
            ].x = repos.x;
            this.fatherFraction.createShablon.baracks[
              this.iBornCresteShablonNumber
            ].y = repos.y;

            //this.fatherFraction.createShablon.baracks.push(repos);
          }

          this.fatherFraction.createShablon.baracks[
            this.iBornCresteShablonNumber
          ].iBorn = false;
          //this.fatherFraction.maxUnits-=5;
        }
      }

      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;
          this.myCells[i].free = true;
        }

        //this.cell.unit=0;
        this.fatherFraction.baracks.splice(
          this.fatherFraction.baracks.indexOf(this.cell.unit),
          1
        );
        //this.fatherFraction.buildings.splice(this.fatherFraction.buildings.indexOf(this.cell.unit),1);

        this.cell.unit = 0;
        this.cell = 0;
        this.alarmTimer = 0;

        this.readyToOut = true;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }
      }

      return;
    }

    if (this.buildready >= this.hpfull && !this.iComplite) {
      //this.builders[0].iGoBuild=false;

      this.builders = [];

      //this.fatherFraction.maxUnits+=5;

      this.iComplite = true;
      //console.log(this.fatherFraction.maxUnits);
    }

    /*
if(this.iComplite&&this.hp===this.hpfull){
	
	this.readyToOut=true;
	
};

*/
    //console.log(this.distroyTimer);

    if (this.iComplite) {
      if (this.myJoubeTimer > 0 && this.hp > 0) {
        this.myJoubeTimer--;
      }

      if (this.myJoubeTimer === 0) {
        ////////////////////////////////
        //let unit=new Unit(1,0,0,2)

        this.myJoubeTimer = false;

        //   if(this.waitTime===30){

        //console.log("eto 0");

        //console.log(this.townHolls[0]);
        // this.target.cellToOut

        let outCell = this.getOutCell();

        //console.log(this.waitTime);

        let unit;

        if (this.myJoube === "rizar") {
          unit = new Unit(
            "rizar",
            0,
            0,
            5,
            this.fatherFraction.fraction,
            this.fatherFraction.nation
          );

          unit.manaTimer = floorGlobalTimer;

          this.myJoube = 0;
        } else if (this.myJoube === "mechnick") {
          unit = new Unit(
            2,
            0,
            0,
            3,
            this.fatherFraction.fraction,
            this.fatherFraction.nation
          );

          this.myJoube = 0;
        } else if (this.myJoube === "luchnik") {
          unit = new Unit(
            3,
            0,
            0,
            2.5,
            this.fatherFraction.fraction,
            this.fatherFraction.nation
          );

          if (this.fatherFraction.nation === "h") {
            unit.attack = 15; //20

            unit.baseAttack = 15;
          }

          this.myJoube = 0;
          //console.log("luchnik");
        } else if (this.myJoube === "ballista") {
          unit = new Unit(
            "ballista",
            0,
            0,
            1,
            this.fatherFraction.fraction,
            this.fatherFraction.nation
          );

          this.myJoube = 0;
          //console.log("luchnik");
        }

        allUnits++;
        unit.persolalNumber = allUnits;

        //this.waitTime--;
        if (!outCell) {
          outCell = this.extreamGetOutCell();
        }

        //console.log(outCell.outPrioritet+" "+outCell.horizont);
        if (outCell) {
          unit.cell = gameFielg[outCell.vertikal][outCell.horizont];

          unit.horizont = unit.cell.horizont;
          unit.vertikal = unit.cell.vertikal;
          unit.x = unit.cell.x;
          unit.y = unit.cell.y;
          unit.cell.unit = unit;
          unit.cell.free = false;

          //this.animY=0;
          //unit.iStand=true;
          unit.moveVektor = outCell.moveVektorOut;
          //unit.target=0;
          unit.fatherFraction = this.fatherFraction;

          unit.initialization = true;

          unit.cellUpdate();

          unit.damagePointX = unit.cell.x + 25;
          unit.damagePointY = unit.cell.y + 25;

          this.fatherFraction.peoples.push(unit);

          if (this.fatherFraction.control === "player") {
            select_sound(unit, "ready");
          }
        }
        //console.log(this.)

        //console.log(arg.horizont+" "+this.horizont)	;

        // }

        /////////////////////////////////
      }
    }

    if (this.alarmTimer) {
      if (this.alarmTimer === 500) {
        //console.log(this.agressor);

        this.fatherFraction.alarms.push(
          new Alarm(this.agressor, 1500, this.cell.unit)
        );

        this.agressor = 0;
      }

      this.alarmTimer--; //console.log("alarm");
    }

    if (
      this.iComplite &&
      this.hp === this.hpfull &&
      !this.myJoubeTimer &&
      !this.alarmTimer
    ) {
      this.readyToOut = true;

      //console.log("build_out "+this.myJoubeTimer);
    }
  } else if (this.unitName === "lesopilka") {
    if (this.hp <= 0 || this.buildready <= 0) {
      this.alarmTimer = 0;
      this.hp = 0;
      this.buildready = 0;

      if (this.distroyTimer === 501) {
        for (let i = 0; i < this.workers.length; i++) {
          if (this.workers[i].waitTime === 30) {
            let unit = this.workers[i];

            unit.readyToOut = true;
            unit.katastrofa = true;
            unit.hp = 0;

            let fraction = this.fatherFraction;

            //if(fraction.peoples.indexOf(unit)!==-1){fraction.peoples.splice(fraction.peoples.indexOf(unit),1);};
            //if(fraction.batraks.indexOf(unit)!==-1){fraction.batraks.splice(fraction.batraks.indexOf(unit),1);};
            //if(fraction.batraksOnGolg.indexOf(unit)!==-1){fraction.batraksOnGolg.splice(fraction.batraksOnGolg.indexOf(unit),1);};
            //if(fraction.batraksOnWood.indexOf(unit)!==-1){fraction.batraksOnWood.splice(fraction.batraksOnWood.indexOf(unit),1);};
            //if(fraction.activeUnits.indexOf(unit)!==-1){fraction.activeUnits.splice(fraction.activeUnits.indexOf(unit),1);};
          }
        }

        this.workers = [];

        //console.log("delete");
      }

      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;
          this.myCells[i].free = true;
        }

        //this.cell.unit=0;

        //console.log(arg);

        if (this.fatherFraction.lesopilkas.indexOf(this.cell.unit) !== -1) {
          this.fatherFraction.lesopilkas.splice(
            this.fatherFraction.lesopilkas.indexOf(this.cell.unit),
            1
          );
          //this.fatherFraction.buildings.splice(this.fatherFraction.buildings.indexOf(this.cell.unit),1);

          //console.log("delete");
        }

        this.readyToOut = true;
        this.cell.unit = 0;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }

        //console.log(this.fatherFraction.townHolls);
      }
      //console.log(this.workers);

      return;
    }

    ///*
    if (this.buildready >= this.hpfull) {
      this.buildready = this.hpfull;
    }
    //*/

    if (this.alarmTimer) {
      if (this.alarmTimer === 500) {
        //console.log(this.agressor);

        this.fatherFraction.alarms.push(
          new Alarm(this.agressor, 1500, this.cell.unit)
        );

        this.agressor = 0;
      }

      this.alarmTimer--; //console.log("alarm");
    }

    if (this.buildready >= this.hpfull && !this.iComplite) {
      this.buildready = this.hpfull;
      this.iComplite = true;
    }

    for (let i = 0; i < this.hotCells.length; i++) {
      let obj = this.hotCells[i];

      if (obj.timer) {
        obj.timer--;
      } else {
        this.hotCells.splice(i, 1);
        i--;
      }
    }

    if (this.workers.length && this.iComplite) {
      //console.log("");

      for (let i = 0; i < this.workers.length; i++) {
        if (this.workers[i].workTimeSahta) {
          //this.workers[0].target=0;
          this.workers[i].workTimeSahta--;
        } else {
          let outCell = this.getOutCell();

          //console.log(this.waitTime);
          if (!outCell) {
            outCell = this.extreamGetOutCell();
          }

          if (outCell) {
            this.workers[i].waitTime--;

            this.hotCells.push(outCell);
            outCell.timer = 50;
            //console.log(outCell.outPrioritet+" "+outCell.horizont);

            this.workers[i].cell =
              gameFielg[outCell.vertikal][outCell.horizont];

            this.workers[i].horizont = this.workers[i].cell.horizont;
            this.workers[i].vertikal = this.workers[i].cell.vertikal;
            this.workers[i].x = this.workers[i].cell.x;
            this.workers[i].y = this.workers[i].cell.y;
            this.workers[i].cell.unit = this.workers[i];
            this.workers[i].cell.free = false;

            this.workers[i].cellUpdate();
            //this.animY=525;

            this.workers[i].moveVektor = outCell.moveVektorOut;

            if (!this.workers[i].moveVektor) {
              this.workers[i].moveVektor = "up";
            }

            //getMinDistanse=function(unit,object)

            this.workers[i].workTimeSahta = 100;

            this.workers[i].myJoube = "lesorub";
            this.workers[i].target = getMinDistanse(
              this.workers[i],
              allContinents[this.cell.continent].woods
            );

            if (!this.workers[i].active) {
              this.workers[i].fatherFraction.activeUnits.push(this.workers[i]);
              this.workers[i].active = true;
            }

            this.workers.splice(i, 1);
            i--;
          }
        } //
      }
    }

    if (
      this.buildready >= this.hpfull &&
      this.hp >= this.hpfull &&
      !this.alarmTimer &&
      !this.myJoubeTimer &&
      !this.workers.length &&
      !this.hotCells.length
    ) {
      this.readyToOut = true;
    }
  } else if (this.unitName === "wood") {
    // woods
    if (
      (!this.lesorub ||
        !this.lesorub.target ||
        this.lesorub.target.persolalNumber !== this.persolalNumber ||
        this.lesorub.hp <= 0 ||
        !this.lesorub.cell ||
        this.lesorub.target.persolalNumber !== this.persolalNumber) &&
      this.hp > 0
    ) {
      this.lesorub = 0;
      this.readyToOut = true;
    }

    if (this.hp <= 0) {
      this.hp = 0;

      this.vibro = 0;
      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;
        }

        allContinents[this.cell.continent].woods.splice(
          allContinents[this.cell.continent].woods.indexOf(this.cell.unit),
          1
        );

        this.cell.free = true;
        //this.cell.unit=0;
        //this.cell=0;
        freeLandObjects.splice(freeLandObjects.indexOf(this.cell.unit), 1);

        this.cell.unit = 0;
        this.cell = 0;
        //shahts.splice(shahts.indexOf(arg),1);
        this.readyToOut = true;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }
      }
    } else {
      if (this.vibro) {
        this.vibro--;
      }
    }
  } else if (this.unitName === "shahta") {
    if (!this.gold && !this.workers.length) {
      this.hp = 0;
    }

    if (this.hp <= 0) {
      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = this.vertikal - 5; i <= this.vertikal + 5; i++) {
          for (let k = this.horizont - 5; k <= this.horizont + 5; k++) {
            if (gameFielg[i] && gameFielg[i][k]) {
              gameFielg[i][k].stopTownHoll.splice(
                gameFielg[i][k].stopTownHoll.indexOf(this.cell.unit),
                1
              );
            }
          }
        }

        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;
          this.myCells[i].free = true;
        }

        //this.cell.unit=0;
        freeLandObjects.splice(freeLandObjects.indexOf(this.cell.unit), 1);

        allContinents[this.cell.continent].shahts.splice(
          allContinents[this.cell.continent].shahts.indexOf(this.cell.unit),
          1
        );

        shahts.splice(shahts.indexOf(this.cell.unit), 1);

        this.cell.unit = 0;
        this.cell = 0;

        this.readyToOut = true;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }
      }

      return;
    }

    for (let i = 0; i < this.hotCells.length; i++) {
      let obj = this.hotCells[i];

      if (obj.timer) {
        obj.timer--;
      } else {
        this.hotCells.splice(i, 1);
        i--;
      }
    }

    if (!this.workers.length && this.gold && !this.hotCells.length) {
      this.readyToOut = true;
    }

    for (let i = 0; i < this.workers.length; i++) {
      if (this.workers[i].workTimeSahta) {
        this.workers[i].target = 0;
        this.workers[i].workTimeSahta--;
      } else {
        let outCell = this.getOutCell();

        this.hotCells.push(outCell);
        outCell.timer = 50;

        //console.log(this.waitTime);
        if (!outCell) {
          outCell = this.extreamGetOutCell();
        }

        if (outCell) {
          this.workers[i].waitTime--;

          //console.log(outCell.outPrioritet+" "+outCell.horizont);

          this.workers[i].cell = gameFielg[outCell.vertikal][outCell.horizont];

          this.workers[i].horizont = this.workers[i].cell.horizont;
          this.workers[i].vertikal = this.workers[i].cell.vertikal;
          this.workers[i].x = this.workers[i].cell.x;
          this.workers[i].y = this.workers[i].cell.y;
          this.workers[i].cell.unit = this.workers[i];
          this.workers[i].cell.free = false;

          this.workers[i].cellUpdate();
          //this.animY=525;

          this.workers[i].moveVektor = outCell.moveVektorOut;

          if (!this.workers[i].moveVektor) {
            this.workers[i].moveVektor = "up";
          }

          //getMinDistanse=function(unit,object)

          this.workers[i].target = getMinDistanse(
            this.workers[i],
            this.workers[i].fatherFraction.townHolls
          );
          this.workers[i].workTimeSahta = 100;
          this.workers[i].myJoube = "shahter";

          if (!this.workers[i].active) {
            this.workers[i].fatherFraction.activeUnits.push(this.workers[i]);
            this.workers[i].active = true;
          }

          this.workers.splice(i, 1);

          i--;
        }
      } //
    }
  } else if (this.unitName === "townHoll") {
    if (this.hp <= 0 || this.buildready <= 0) {
      this.hp = 0;
      this.buildready = 0;
      this.alarmTimer = 0;

      if (this.distroyTimer === 501) {
        for (let i = 0; i < this.workers.length; i++) {
          if (this.workers[i].waitTime === 30) {
            //

            let unit = this.workers[i];

            unit.readyToOut = true;
            unit.katastrofa = true;
            unit.hp = 0;

            let fraction = this.fatherFraction;

            //if(fraction.peoples.indexOf(unit)!==-1){fraction.peoples.splice(fraction.peoples.indexOf(unit),1);};
            //if(fraction.batraks.indexOf(unit)!==-1){fraction.batraks.splice(fraction.batraks.indexOf(unit),1);};
            //if(fraction.batraksOnGolg.indexOf(unit)!==-1){fraction.batraksOnGolg.splice(fraction.batraksOnGolg.indexOf(unit),1);};
            //if(fraction.batraksOnWood.indexOf(unit)!==-1){fraction.batraksOnWood.splice(fraction.batraksOnWood.indexOf(unit),1);};
            //if(fraction.activeUnits.indexOf(unit)!==-1){fraction.activeUnits.splice(fraction.activeUnits.indexOf(unit),1);};
          }
        }

        this.workers = [];

        //console.log("delete");
      }

      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;
          this.myCells[i].free = true;
        }

        //this.cell.unit=0;

        //console.log(arg);

        if (this.fatherFraction.townHolls.indexOf(this.cell.unit) !== -1) {
          this.fatherFraction.townHolls.splice(
            this.fatherFraction.townHolls.indexOf(this.cell.unit),
            1
          );
          //this.fatherFraction.buildings.splice(this.fatherFraction.buildings.indexOf(this.cell.unit),1);

          //console.log("delete");
        }

        this.readyToOut = true;
        this.cell.unit = 0;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }

        //console.log(this.fatherFraction.townHolls);
      }
      //console.log(this.workers);

      return;
    }

    //console.log(this.myJoubeTimer);
    if (this.buildready >= this.hpfull && !this.iComplite) {
      //this.builders[0].iGoBuild=false;

      this.builders = [];

      //if(this.unitName==="farm"){this.fatherFraction.maxUnits+=5;	};

      this.iComplite = true;
      //console.log(this.fatherFraction.maxUnits);
    }

    if (this.iComplite) {
      if (this.myJoubeTimer > 0 && this.hp > 0) {
        this.myJoubeTimer--;
      }

      if (this.myJoubeTimer === 0) {
        if (this.myJoube === "batrak") {
          ////////////////////////////////
          //let unit=new Unit(1,0,0,2)

          this.myJoubeTimer = false;

          //   if(this.waitTime===30){

          //console.log(this.townHolls[0]);
          // this.target.cellToOut

          let outCell = this.getOutCell();

          //console.log(this.waitTime);

          let unit = new Unit(
            1,
            0,
            0,
            2,
            this.fatherFraction.fraction,
            this.fatherFraction.nation
          );

          //console.log(this.fatherFraction.fraction);

          allUnits++;
          unit.persolalNumber = allUnits;

          //this.waitTime--;
          if (!outCell) {
            outCell = this.extreamGetOutCell();
          }

          //console.log(outCell.outPrioritet+" "+outCell.horizont);
          if (outCell) {
            unit.cell = gameFielg[outCell.vertikal][outCell.horizont];

            unit.horizont = unit.cell.horizont;
            unit.vertikal = unit.cell.vertikal;
            unit.x = unit.cell.x;
            unit.y = unit.cell.y;
            unit.cell.unit = unit;
            unit.cell.free = false;

            //this.animY=0;
            //unit.iStand=true;
            unit.moveVektor = outCell.moveVektorOut;
            //unit.target=0;
            unit.fatherFraction = this.fatherFraction;

            unit.initialization = true;

            unit.cellUpdate();

            unit.damagePointX = unit.cell.x + 25;
            unit.damagePointY = unit.cell.y + 25;

            if (this.fatherFraction.control === "player") {
              select_sound(unit, "ready");
            }

            this.fatherFraction.peoples.push(unit);
          }
          //console.log(this.)

          //console.log(arg.horizont+" "+this.horizont)	;

          // }

          /////////////////////////////////
        } else if (this.myJoube === "levelUpgrade") {
          this.level++;

          //this.imageToDraw=0;
          this.myJoube = false;

          ////////////////////////////////

          if (this.level === 2) {
            if (this.fatherFraction.nation === "orc") {
              this.face_animY = 2000;
              this.menu_name = "Stronghold";
            } else {
              this.face_animY = 2200;
              this.menu_name = "Keep";
            }

            this.hp = (3000 * (this.hp * 100)) / this.hpfull / 100;

            this.hpfull = 3000;
            this.buildready = this.hpfull;
          } else if (this.level === 3) {
            if (this.fatherFraction.nation === "orc") {
              this.face_animY = 2100;
              this.menu_name = "Fortress";
            } else {
              this.face_animY = 2300;
              this.menu_name = "Castle";
            }

            this.hp = (4000 * (this.hp * 100)) / this.hpfull / 100;

            this.hpfull = 4000;
            this.buildready = this.hpfull;
          }

          /////////////////////////////////////
        }
      }

      for (let i = 0; i < this.hotCells.length; i++) {
        let obj = this.hotCells[i];

        if (obj.timer) {
          obj.timer--;
        } else {
          this.hotCells.splice(i, 1);
          i--;
        }
      }

      if (this.workers.length) {
        //console.log("");

        for (let i = 0; i < this.workers.length; i++) {
          if (this.workers[i].workTimeSahta) {
            //this.workers[0].target=0;
            this.workers[i].workTimeSahta--;
          } else {
            let outCell = this.getOutCell();

            //console.log(this.waitTime);
            if (!outCell) {
              outCell = this.extreamGetOutCell();
            }

            if (outCell) {
              this.workers[i].waitTime--;

              outCell.timer = 50;

              this.hotCells.push(outCell);

              //console.log(outCell.outPrioritet+" "+outCell.horizont);

              this.workers[i].cell =
                gameFielg[outCell.vertikal][outCell.horizont];

              this.workers[i].horizont = this.workers[i].cell.horizont;
              this.workers[i].vertikal = this.workers[i].cell.vertikal;
              this.workers[i].x = this.workers[i].cell.x;
              this.workers[i].y = this.workers[i].cell.y;
              this.workers[i].cell.unit = this.workers[i];
              this.workers[i].cell.free = false;

              this.workers[i].cellUpdate();
              //this.animY=525;

              this.workers[i].moveVektor = outCell.moveVektorOut;

              if (!this.workers[i].moveVektor) {
                this.workers[i].moveVektor = "up";
              }

              //getMinDistanse=function(unit,object)

              this.workers[i].workTimeSahta = 100;

              if (this.workers[i].myJoube === "shahter") {
                this.workers[i].myJoube = "shahter";
                this.workers[i].target = getMinDistanse(
                  this.workers[i],
                  allContinents[this.cell.continent].shahts
                );
              } else if (this.workers[i].myJoube === "lesorub") {
                this.workers[i].myJoube = "lesorub";
                this.workers[i].target = getMinDistanse(
                  this.workers[i],
                  allContinents[this.cell.continent].woods
                );
              }

              if (!this.workers[i].active) {
                this.workers[i].fatherFraction.activeUnits.push(
                  this.workers[0]
                );
                this.workers[0].active = true;
              }

              this.workers.splice(i, 1);

              i--;
            }
          } //
        }
      }
    }

    if (this.alarmTimer) {
      if (this.alarmTimer === 500) {
        //console.log(this.agressor);

        this.fatherFraction.alarms.push(
          new Alarm(this.agressor, 1500, this.cell.unit)
        );

        this.agressor = 0;
      }

      this.alarmTimer--; //console.log("alarm");
    }

    if (
      this.iComplite &&
      this.hp === this.hpfull &&
      !this.myJoubeTimer &&
      !this.alarmTimer &&
      !this.workers.length &&
      !this.hotCells.length
    ) {
      this.readyToOut = true;

      //console.log("build_out "+this.myJoubeTimer);
    }
  } else if (this.unitName === "farm") {
    if (this.hp <= 0 || this.buildready <= 0) {
      if (this.distroyTimer === 501) {
        if (this.fatherFraction.control === "comp") {
          this.fatherFraction.createShablon.farms[
            this.iBornCresteShablonNumber
          ].iBorn = false;
        }

        if (this.buildready === this.hpfull) {
          this.fatherFraction.maxUnits -= 15;
          this.fatherFraction.maxShips--;
        }
      }

      this.hp = 0;
      this.buildready = 0;
      this.alarmTimer = 0;

      this.distroyTimer--;

      if (this.distroyTimer === 0) {
        for (let i = 0; i < this.myCells.length; i++) {
          this.myCells[i].vossalObj = 0;
          this.myCells[i].free = true;
        }

        //this.cell.unit=0;
        this.fatherFraction.farms.splice(
          this.fatherFraction.farms.indexOf(this.cell.unit),
          1
        );
        //this.fatherFraction.buildings.splice(this.fatherFraction.buildings.indexOf(this.cell.unit),1);

        this.cell.unit = 0;
        this.cell = 0;

        this.readyToOut = true;

        for (let k = 0; k < this.contaktCells.length; k++) {
          gameFielg[this.contaktCells[k].vertikal][
            this.contaktCells[k].horizont
          ].iContaktWith.splice(
            gameFielg[this.contaktCells[k].vertikal][
              this.contaktCells[k].horizont
            ].iContaktWith.indexOf(this.contaktCells[k]),
            1
          );

          //console.log(gameFielg[this.contaktCells[k].vertikal][this.contaktCells[k].horizont].iContaktWith.indexOf(this.contaktCells[k]));
        }
      }

      return;
    }

    if (this.buildready >= this.hpfull && !this.iComplite) {
      //this.builders[0].iGoBuild=false;

      this.builders = [];

      this.fatherFraction.maxUnits += 15;
      this.fatherFraction.maxShips++;

      this.iComplite = true;
      //console.log(this.fatherFraction.maxUnits);
    }

    if (this.alarmTimer) {
      if (this.alarmTimer === 500) {
        //console.log(this.agressor);

        this.fatherFraction.alarms.push(
          new Alarm(this.agressor, 1500, this.cell.unit)
        );

        this.agressor = 0;
      }

      this.alarmTimer--; //console.log("alarm");
    }

    if (this.iComplite && this.hp === this.hpfull && !this.alarmTimer) {
      this.readyToOut = true;
    }

    //console.log(this.distroyTimer);
  }
};

Unit.prototype.myTargetCheck = function () {
  let freeContaktCell = false;

  for (let i = 0; i < this.target.contaktCells.length; i++) {
    if (
      gameFielg[this.target.contaktCells[i].vertikal][
        this.target.contaktCells[i].horizont
      ].free ||
      (this.cell.horizont === this.target.contaktCells[i].horizont &&
        this.cell.vertikal === this.target.contaktCells[i].vertikal)
    ) {
      freeContaktCell = true;
      break;
    }
  }

  if (!freeContaktCell) {
    this.myTargetClosed++;
  } //else{this.myTargetClosed=0;};

  if (!this.cell || this.iGetTarget) {
    this.myTargetClosed = 0;
  }

  if (this.myTargetClosed === 5 && !this.iGetTarget) {
    //this.target=//this.myJoube=0;
    //this.myTargetClosed=0;
    if (this.target.unitName === "townHoll") {
      this.target = getMinDistanse(arg, this.fatherFraction.townHolls);
    }
    if (this.target.unitName === "shahta") {
      this.target = getMinDistanse(arg, shahts);
    }
    if (this.target.unitName === "wood") {
      this.target = getMinDistanse(arg, woods);
    }
    if (this.target.unitName === "farm") {
      this.target = 0;
    }
  }
};

Fraction.prototype.lesopilka = function () {
  if (this.myJoubeTimer_leso) {
    this.myJoubeTimer_leso--;
  }

  //console.log(this.myJoubeTimer_leso)

  if (this.myJoubeTimer_leso === 0) {
    if (this.myJoube_leso === "dopFlySee_level") {
      this.dopFlySee_level++;
      this.dopFlySee += 50;
    } else if (this.myJoube_leso === "dopFlyAttack_level") {
      this.dopFlyAttack_level++;
      this.dopFlyAttack += 0.2;
    }

    this.myJoube_leso = false;
    this.myJoubeTimer_leso = false;
  }
};

Fraction.prototype.kuznya = function () {
  if (this.myJoubeTimer_kuz) {
    this.myJoubeTimer_kuz--;
  }

  //console.log(this.myJoubeTimer_kuz)

  if (this.myJoubeTimer_kuz === 0) {
    if (this.myJoube_kuz === "dopNoFlyPanzer_level") {
      this.dopNoFlyPanzer_level++;
      this.dopNoFlyPanzer += 0.2;
    } else if (this.myJoube_kuz === "dopNoFlyAttack_level") {
      this.dopNoFlyAttack_level++;
      this.dopNoFlyAttack += 0.2;
    } else if (this.myJoube_kuz === "dopBallista") {
      this.dopBallista_level++;
      this.dopBallista += 0.2;
    }

    this.myJoube_kuz = false;
    this.myJoubeTimer_kuz = false;
  }
};

Fraction.prototype.foundry = function () {
  if (this.myJoubeTimer_fou) {
    this.myJoubeTimer_fou--;
  }

  //console.log(this.myJoubeTimer_kuz)

  if (this.myJoubeTimer_fou === 0) {
    this.dopAttack_level++;
    this.dopAttack += 0.2;

    this.myJoube_fou = false;
    this.myJoubeTimer_fou = false;
  }
};

Fraction.prototype.globalUpdate = function () {
  //console.log(this.maxUnits); fractionLevelBonusOnGold checkAlarms

  //iCanTownHollLevelUp myJoubeTimer_leso lesopilka canBallista iCanTownHollLevelUp

  this.lesopilkaBonusOnWood = 0;
  this.fractionLevelBonusOnGold = 0;
  this.iCanTownHollLevelUp = 0;
  this.fractionLevel = 1;
  this.iHaveTownHoll = false;
  this.canMechnick = false;
  this.canLuchnick = false;
  this.canFarm = false;
  this.canLesopilka = false;
  this.canBarack = false;
  this.canTower = false;
  this.canGuardTower = false;
  this.canCannonTower = false;
  this.canKuznya = false;
  this.canBallista = false;
  this.canOgreBase = false;
  this.canRizar = false;
  this.canAltar = false;
  //this.canMagTower=false;
  this.canDragon_roost = false;
  this.canMagick = false;
  this.canTransport = false;
  this.canDistroer = false;
  this.canOilTanker = false;
  this.canOilRef = false;
  this.canFoundry = false;
  this.canLinkor = false;
  this.canDragoon = false;
  this.canTemple = false;
  this.canPort = false;

  for (let i = 0; i < this.dragon_roosts.length; i++) {
    if (
      this.dragon_roosts[i].buildready >= this.dragon_roosts[i].hpfull &&
      this.dragon_roosts[i].hp > 0
    ) {
      this.canDragoon = true;
    }
  }

  for (let i = 0; i < this.oil_Refs.length; i++) {
    if (
      this.oil_Refs[i].buildready >= this.oil_Refs[i].hpfull &&
      this.oil_Refs[i].hp > 0
    ) {
      this.canOilTanker = true;
      this.canFoundry = true;
    }
  }

  for (let i = 0; i < this.ports.length; i++) {
    if (
      this.ports[i].buildready >= this.ports[i].hpfull &&
      this.ports[i].hp > 0
    ) {
      this.canTransport = true;
      this.canDistroer = true;
      this.canOilRef = true;
    }
  }

  for (let i = 0; i < this.lesopilkas.length; i++) {
    if (
      this.lesopilkas[i].hp > 0 &&
      this.lesopilkas[i].buildready >= this.lesopilkas[i].hpfull
    ) {
      this.lesopilkaBonusOnWood = 100;
      this.canGuardTower = true;
      this.canTower = true;
      this.canPort = true;
      this.canLuchnick = true;

      break;
    }
  }

  this.lesopilka();

  for (let i = 0; i < this.baracks.length; i++) {
    if (
      this.baracks[i].hp > 0 &&
      this.baracks[i].buildready >= this.baracks[i].hpfull
    ) {
      this.canMechnick = true;

      //console.log(this.canMechnick);
    }
  }

  for (let i = 0; i < this.kuznyas.length; i++) {
    if (
      this.kuznyas[i].hp > 0 &&
      this.kuznyas[i].buildready >= this.kuznyas[i].hpfull
    ) {
      //if(this.iCanTownHollLevelUp===false){this.iCanTownHollLevelUp=1;};

      //if(this.canMechnick){
      this.canBallista = true;
      //};
    }
  }

  this.kuznya();

  for (let i = 0; i < this.townHolls.length; i++) {
    if (this.townHolls[i].hp > 0) {
      if (
        this.townHolls[i].buildready >= this.townHolls[i].hpfull &&
        this.canTower &&
        this.canBallista &&
        this.canMechnick
      ) {
        this.iCanTownHollLevelUp = 1;
      }

      if (this.townHolls[i].level > this.fractionLevel) {
        this.fractionLevel = this.townHolls[i].level;
      }

      if (this.townHolls[i].buildready >= this.townHolls[i].hpfull) {
        this.iHaveTownHoll = true;

        this.canFarm = true;
        this.canLesopilka = true;
        this.canBarack = true;
        this.canKuznya = true;

        this.townHolls[i].panzer = 30 * this.townHolls[i].level;
      }
    }
  }

  for (let i = 0; i < this.foundrys.length; i++) {
    if (
      this.foundrys[i].hp > 0 &&
      this.foundrys[i].buildready >= this.foundrys[i].hpfull
    ) {
      //if(this.iCanTownHollLevelUp===false){this.iCanTownHollLevelUp=1;};

      this.canLinkor = true;
    }
  }

  this.foundry();

  if (!this.canLinkor) {
    this.myJoube_fou = false;
    this.myJoubeTimer_fou = false;

    this.dopAttack = 1;
    this.dopAttack_update = false;
    this.dopAttack_level = 0;
  }

  if (!this.canBallista) {
    this.dopNoFlyAttack = 1;
    this.dopNoFlyAttack_update = false;
    this.dopNoFlyAttack_level = 0;

    this.dopNoFlyPanzer = 1;
    this.dopNoPanzer_update = false;
    this.dopNoFlyPanzer_level = 0;

    this.dopBallista_level = 0;
    this.dopBallista = 1;

    this.myJoube_kuz = 0;
    this.myJoubeTimer_kuz = false;
  }

  if (!this.lesopilkaBonusOnWood) {
    this.dopFlyAttack = 1;
    this.dopFlyAttack_update = false;
    this.dopFlyAttack_level = 0;

    this.dopFlySee = 0;
    this.dopFlySee_update = false;
    this.dopFlySee_level = 0;

    this.myJoubeTimer_leso = 0;
    this.myJoube_leso = false;
  }

  //console.log(this.fractionLevel);

  //if(this.fractionLevel>1){this.canOgreBase=true;};

  for (let i = 0; i < this.ogreBases.length; i++) {
    if (
      this.ogreBases[i].hp > 0 &&
      this.ogreBases[i].buildready >= this.ogreBases[i].hpfull
    ) {
      this.canRizar = true;
    }
  }

  for (let i = 0; i < this.altars.length; i++) {
    if (
      this.altars[i].hp > 0 &&
      this.altars[i].buildready >= this.altars[i].hpfull
    ) {
      this.canMagick = true;
    }
  }

  /////////////////////////////////////

  if (!this.canMagick) {
    this.manaTimer = false;
  } else {
    if (this.manaTimer === false) {
      this.manaTimer = floorGlobalTimer;

      for (let i = 0; i < this.peoples.length; i++) {
        if (this.peoples[i].type === "rizar") {
          this.peoples[i].manaTimer = this.manaTimer;
        }
      }
    }
  }

  ////////////////////////////////////////////

  if (this.canRizar && this.iCanTownHollLevelUp === 1) {
    this.iCanTownHollLevelUp = 2;
  }

  if (this.fractionLevel === 2) {
    this.lesopilkaBonusOnWood += 50;
    this.fractionLevelBonusOnGold = 100;

    if (this.canMechnick && this.canBallista && this.canLuchnick) {
      this.canOgreBase = true;
    }
  } else if (this.fractionLevel === 3) {
    this.lesopilkaBonusOnWood += 100;
    this.fractionLevelBonusOnGold = 200;

    if (this.canMechnick && this.canBallista && this.canLuchnick) {
      this.canOgreBase = true;

      this.canAltar = true;
      this.canMagTower = true;
      this.canDragon_roost = true;
      this.canTemple = true;
    }
  }

  /////////////////////////////////////////////////

  //console.log(this.fractionLevelBonusOnGold);
  //console.log(this.persolalNumber)
  //this.canMagick=true;

  if (title.style) {
    if (level === 1) {
      //this.canLesopilka=false;
      this.canTower = false;
      this.canGuardTower = false;
      this.canCannonTower = false;
      this.canKuznya = false;
      this.canBallista = false;
      this.canOgreBase = false;
      this.canRizar = false;
      this.canAltar = false;
      //this.canMagTower=false;
      this.canDragon_roost = false;
      this.canMagick = false;
      this.canTransport = false;
      this.canDistroer = false;
      this.canOilTanker = false;
      this.canOilRef = false;
      this.canFoundry = false;
      this.canLinkor = false;
      this.canDragoon = false;
      this.canTemple = false;
      this.canPort = false;
    }
  }

  if (
    player &&
    unit_dop_menu.length &&
    this.persolalNumber === player.persolalNumber
  ) {
    this.unit_dop_menu_create();
  }
};

Fraction.prototype.unit_dop_menu_create = function () {
  //	check_resurs
  //this.canMagick=true;
  //menu_unit_for_update.mana=100 stop hold position

  if (groop_mem_unit === true) {
    groop_mem_unit = false;

    let ok = true;

    let all_free = true;
    let all_hold = true;

    for (let i = 0; i < all_units.length; i++) {
      let obj = all_units[i];

      if (obj.hold_position) {
        all_free = false;
      } else {
        all_hold = false;
      }

      if (!obj.canHold) {
        ok = false;
      }
    }

    if (ok) {
      //////////////////////////////////////	HOLD

      ind = 1;

      unit_dop_menu[ind].can = true;

      if (this.nation === "h") {
        unit_dop_menu[ind].face_animY = 10000;
        unit_dop_menu[ind].menu_name = "Free";
        unit_dop_menu[ind].menu_name_2 = "groop";
      } else {
        unit_dop_menu[ind].face_animY = 10100;
        unit_dop_menu[ind].menu_name = "Free";
        unit_dop_menu[ind].menu_name_2 = "groop";
      }

      unit_dop_menu[ind].name = "hold_stop groop";

      unit_dop_menu[ind].resurs = !all_free; //true;//menu_unit_for_update.hold_position//this.check_resurs_pro(unit_dop_menu[ind].name)===unit_dop_menu[ind].name;

      //console.log(unit_dop_menu[0].resurs)check_resurs

      //unit_dop_menu[ind].gold=1500;
      //unit_dop_menu[ind].wood=500;
      //unit_dop_menu[ind].oil=0;

      ////////////////////////////////////////

      //////////////////////////////////////	HOLD

      ind = 0;

      unit_dop_menu[ind].can = true;

      if (this.nation === "h") {
        unit_dop_menu[ind].face_animY = 9800;
        unit_dop_menu[ind].menu_name = "Hold position";
        unit_dop_menu[ind].menu_name_2 = "groop";
      } else {
        unit_dop_menu[ind].face_animY = 9900;
        unit_dop_menu[ind].menu_name = "Hold position";
        unit_dop_menu[ind].menu_name_2 = "groop";
      }

      unit_dop_menu[ind].name = "hold groop";

      unit_dop_menu[ind].resurs = !all_hold; //true;//!menu_unit_for_update.hold_position//this.check_resurs_pro(unit_dop_menu[ind].name)===unit_dop_menu[ind].name;

      //console.log(unit_dop_menu[0].resurs)check_resurs

      //unit_dop_menu[ind].gold=1500;
      //unit_dop_menu[ind].wood=500;
      //unit_dop_menu[ind].oil=0;

      ////////////////////////////////////////
    }
  } else {
    all_units = false;

    if (menu_unit_for_update && menu_unit_for_update.cell) {
      ///*
      unit_dop_menu[0].can = false;
      unit_dop_menu[1].can = false;
      unit_dop_menu[2].can = false;
      unit_dop_menu[3].can = false;
      unit_dop_menu[4].can = false;
      unit_dop_menu[5].can = false;
      unit_dop_menu[6].can = false;
      unit_dop_menu[7].can = false;
      unit_dop_menu[8].can = false;
      unit_dop_menu[9].can = false;
      unit_dop_menu[10].can = false;
      unit_dop_menu[11].can = false;
      unit_dop_menu[12].can = false;
      unit_dop_menu[13].can = false;
      unit_dop_menu[14].can = false;
      unit_dop_menu[15].can = false;
      unit_dop_menu[16].can = false;
      unit_dop_menu[17].can = false;
      unit_dop_menu[18].can = false;
      unit_dop_menu[19].can = false;
      unit_dop_menu[20].can = false;
      unit_dop_menu[21].can = false;
      unit_dop_menu[22].can = false;
      unit_dop_menu[23].can = false;
      //unit_dop_menu[24].can=false;
      //*/

      if (menu_unit_for_update.type === "transport") {
        //console.log("here");

        ///////////////////////////////////////////////////////////////////////////////

        ind = 0;

        unit_dop_menu[ind].can = true;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 12300;
          unit_dop_menu[ind].menu_name = "Passagers out";
          //unit_dop_menu[ind].name="nar";
        } else {
          unit_dop_menu[ind].face_animY = 12400;
          unit_dop_menu[ind].menu_name = "Passagers out";
          //unit_dop_menu[ind].name="z";
        }

        unit_dop_menu[ind].name = "passagers out";

        unit_dop_menu[ind].resurs =
          menu_unit_for_update.landing && menu_unit_for_update.passagers.length;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        //unit_dop_menu[ind].gold=5000;
        //unit_dop_menu[ind].wood=0;
        //	unit_dop_menu[ind].oil=0;
        //unit_dop_menu[ind].mana=100;
        //unit_dop_menu[ind].doo=["dragoon",myJoube_time("dragoon")];

        ///////////////////////////////////////////////////////////////////////////////
      } else if (menu_unit_for_update.type === "mag") {
        //menu_unit_for_update.mana=100;

        let ind;

        ///////////////////////////////////////////////////////////////////////////////

        ind = 11;

        unit_dop_menu[ind].can = true;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 10800;
          unit_dop_menu[ind].menu_name = "Freeze";
          unit_dop_menu[ind].name = "nar";
        } else {
          unit_dop_menu[ind].face_animY = 10900;
          unit_dop_menu[ind].menu_name = "Dead";
          unit_dop_menu[ind].name = "z";
        }

        //unit_dop_menu[ind].name="z";

        unit_dop_menu[ind].resurs = menu_unit_for_update.mana === 100;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        //unit_dop_menu[ind].gold=5000;
        //unit_dop_menu[ind].wood=0;
        //	unit_dop_menu[ind].oil=0;
        unit_dop_menu[ind].mana = 100;
        //unit_dop_menu[ind].doo=["dragoon",myJoube_time("dragoon")];

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 10;

        unit_dop_menu[ind].can = true;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 10700;
          unit_dop_menu[ind].menu_name = "Tornado";
        } else {
          unit_dop_menu[ind].face_animY = 10700;
          unit_dop_menu[ind].menu_name = "Tornado";
        }

        unit_dop_menu[ind].name = "tor";

        unit_dop_menu[ind].resurs = menu_unit_for_update.mana === 100;

        unit_dop_menu[ind].mana = 100;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        //unit_dop_menu[ind].gold=5000;
        //unit_dop_menu[ind].wood=0;
        //	unit_dop_menu[ind].oil=0;
        //unit_dop_menu[ind].foot=1;
        //unit_dop_menu[ind].doo=["dragoon",myJoube_time("dragoon")];

        ///////////////////////////////////////////////////////////////////////////////

        if (
          menu_unit_for_update.magick &&
          !menu_unit_for_update.anim_magick_timer
        ) {
          unit_dop_menu[24].can = true;
          unit_dop_menu[24].face_animY = 900;
          unit_dop_menu[24].resurs = true;
          unit_dop_menu[24].name = "out";
          unit_dop_menu[24].menu_name = "Stop magick";
        } else {
          unit_dop_menu[24].can = false;
          //unit_dop_menu[24].face_animY=900;
          //unit_dop_menu[24].resurs=true;
          //unit_dop_menu[24].name="out";
          //unit_dop_menu[24].menu_name="stop magick";
        }
      }

      if (menu_unit_for_update.type === "rizar" && this.canMagick) {
        //console.log("here");

        ///////////////////////////////////////////////////////////////////////////////

        ind = 10;

        unit_dop_menu[ind].can = true;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 10600;
          unit_dop_menu[ind].menu_name = "Cure";
          unit_dop_menu[ind].name = "cure";
        } else {
          unit_dop_menu[ind].face_animY = 11000;
          unit_dop_menu[ind].menu_name = "Rage";
          unit_dop_menu[ind].name = "rage";
        }

        unit_dop_menu[ind].resurs = menu_unit_for_update.mana === 100;

        unit_dop_menu[ind].mana = 100;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        //unit_dop_menu[ind].gold=5000;
        //unit_dop_menu[ind].wood=0;
        //	unit_dop_menu[ind].oil=0;
        //unit_dop_menu[ind].foot=1;
        //unit_dop_menu[ind].doo=["dragoon",myJoube_time("dragoon")];

        ///////////////////////////////////////////////////////////////////////////////

        if (menu_unit_for_update.magick && !menu_unit_for_update.magickTarget) {
          unit_dop_menu[24].can = true;
          unit_dop_menu[24].face_animY = 900;
          unit_dop_menu[24].resurs = true;
          unit_dop_menu[24].name = "out";
          unit_dop_menu[24].menu_name = "Stop magick";
        } else {
          unit_dop_menu[24].can = false;
          //unit_dop_menu[24].face_animY=900;
          //unit_dop_menu[24].resurs=true;
          //unit_dop_menu[24].name="out";
          //unit_dop_menu[24].menu_name="stop magick";
        }
      }

      if (menu_unit_for_update.type === "oil_tanker") {
        let ind;

        //console.log(this.canGuardTower);

        ///////////////////////////////////////////////////////////////////////////////

        ind = 0;

        unit_dop_menu[ind].can = true;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 11300;
          unit_dop_menu[ind].menu_name = "Oil platform";
        } else {
          unit_dop_menu[ind].face_animY = 11400;
          unit_dop_menu[ind].menu_name = "Oil platform";
        }

        unit_dop_menu[ind].name = "oil_platform";

        unit_dop_menu[ind].resurs = this.gold >= 1000 && this.wood >= 300;
        //&&
        //menu_unit_for_update.fatherFraction.maxUnits>menu_unit_for_update.fatherFraction.peoples.length;
        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 1000;
        unit_dop_menu[ind].wood = 300;
        unit_dop_menu[ind].oil = 0;
        //unit_dop_menu[ind].foot=1;
        //unit_dop_menu[ind].doo=["oil_platform",myJoube_time("towerOnUpgrade")];

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        let ok;

        for (let i = 0; i < this.oil_platforms.length; i++) {
          if (this.oil_platforms[i].hp > 0 && this.oil_platforms[i].iComplite) {
            ok = true;
            break;
          }
        }

        ind = 20;

        unit_dop_menu[ind].can = this.canFoundry && ok;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 11900;
          unit_dop_menu[ind].menu_name = "Get oil";
        } else {
          unit_dop_menu[ind].face_animY = 12000;
          unit_dop_menu[ind].menu_name = "Get oil";
        }

        unit_dop_menu[ind].name = "get oil";

        unit_dop_menu[ind].resurs = true;
        //&&
        //menu_unit_for_update.fatherFraction.maxUnits>menu_unit_for_update.fatherFraction.peoples.length;
        //console.log(unit_dop_menu[0].resurs)check_resurs

        //unit_dop_menu[ind].gold=1000;
        //unit_dop_menu[ind].wood=300;
        //unit_dop_menu[ind].oil=0;
        //unit_dop_menu[ind].foot=1;
        //unit_dop_menu[ind].doo=["oil_platform",myJoube_time("towerOnUpgrade")];

        ///////////////////////////////////////////////////////////////////////////////
      } else if (menu_unit_for_update.canHold) {
        let ind;

        //////////////////////////////////////	HOLD

        ind = 1;

        unit_dop_menu[ind].can = true;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 10000;
          unit_dop_menu[ind].menu_name = "Free";
        } else {
          unit_dop_menu[ind].face_animY = 10100;
          unit_dop_menu[ind].menu_name = "Free";
        }

        unit_dop_menu[ind].name = "hold_stop";

        unit_dop_menu[ind].resurs = menu_unit_for_update.hold_position; //this.check_resurs_pro(unit_dop_menu[ind].name)===unit_dop_menu[ind].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        //unit_dop_menu[ind].gold=1500;
        //unit_dop_menu[ind].wood=500;
        //unit_dop_menu[ind].oil=0;

        ////////////////////////////////////////

        //////////////////////////////////////	HOLD

        ind = 0;

        unit_dop_menu[ind].can = true;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 9800;
          unit_dop_menu[ind].menu_name = "Hold position";
        } else {
          unit_dop_menu[ind].face_animY = 9900;
          unit_dop_menu[ind].menu_name = "Hold position";
        }

        unit_dop_menu[ind].name = "hold";

        unit_dop_menu[ind].resurs = !menu_unit_for_update.hold_position; //this.check_resurs_pro(unit_dop_menu[ind].name)===unit_dop_menu[ind].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        //unit_dop_menu[ind].gold=1500;
        //unit_dop_menu[ind].wood=500;
        //unit_dop_menu[ind].oil=0;

        ////////////////////////////////////////
      } else if (menu_unit_for_update.unitName === "tower") {
        let ind;

        //console.log(this.canGuardTower);

        ///////////////////////////////////////////////////////////////////////////////

        ind = 0;

        unit_dop_menu[ind].can =
          this.canGuardTower && !menu_unit_for_update.iBee;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 10200;
          unit_dop_menu[ind].menu_name = "Guard tower";
        } else {
          unit_dop_menu[ind].face_animY = 10400;
          unit_dop_menu[ind].menu_name = "Guard tower";
        }

        unit_dop_menu[ind].name = "guard";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
          unit_dop_menu[ind].name;
        //&&
        //menu_unit_for_update.fatherFraction.maxUnits>menu_unit_for_update.fatherFraction.peoples.length;
        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 500;
        unit_dop_menu[ind].wood = 200;
        unit_dop_menu[ind].oil = 0;
        //unit_dop_menu[ind].foot=1;
        unit_dop_menu[ind].doo = ["guard", myJoube_time("towerOnUpgrade")];

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 1;

        unit_dop_menu[ind].can =
          this.canGuardTower && !menu_unit_for_update.iBee;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 10300;
          unit_dop_menu[ind].menu_name = "Cannon tower";
        } else {
          unit_dop_menu[ind].face_animY = 10500;
          unit_dop_menu[ind].menu_name = "Cannon tower";
        }

        unit_dop_menu[ind].name = "cannon";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
          unit_dop_menu[ind].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 500;
        unit_dop_menu[ind].wood = 200;
        unit_dop_menu[ind].oil = 0;
        //unit_dop_menu[ind].foot=1;
        unit_dop_menu[ind].doo = ["cannon", myJoube_time("towerOnUpgrade")];

        ///////////////////////////////////////////////////////////////////////////////
      } else if (menu_unit_for_update.unitName === "dragon_roost") {
        let ind;

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 0;

        unit_dop_menu[ind].can = this.canDragoon;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 9500;
          unit_dop_menu[ind].menu_name = "Gryphon rider";
        } else {
          unit_dop_menu[ind].face_animY = 9600;
          unit_dop_menu[ind].menu_name = "Dragon";
        }

        unit_dop_menu[ind].name = "dragoon";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name &&
          menu_unit_for_update.fatherFraction.maxUnits >
            menu_unit_for_update.fatherFraction.peoples.length;
        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 5000;
        unit_dop_menu[ind].wood = 0;
        unit_dop_menu[ind].oil = 0;
        unit_dop_menu[ind].foot = 1;
        unit_dop_menu[ind].doo = ["dragoon", myJoube_time("dragoon")];

        ///////////////////////////////////////////////////////////////////////////////
      } else if (menu_unit_for_update.unitName === "temple") {
        let ind;

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 0;

        unit_dop_menu[ind].can = this.temples.length;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 9300;
          unit_dop_menu[ind].menu_name = "Mag";
        } else {
          unit_dop_menu[ind].face_animY = 9400;
          unit_dop_menu[ind].menu_name = "Death knight";
        }

        unit_dop_menu[ind].name = "mag";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name &&
          menu_unit_for_update.fatherFraction.maxUnits >
            menu_unit_for_update.fatherFraction.peoples.length;
        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 1500;
        unit_dop_menu[ind].wood = 0;
        unit_dop_menu[ind].oil = 0;
        unit_dop_menu[ind].foot = 1;
        unit_dop_menu[ind].doo = ["mag", myJoube_time("mag")];

        ///////////////////////////////////////////////////////////////////////////////
      } else if (menu_unit_for_update.unitName === "port") {
        let ind;

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 0;

        unit_dop_menu[ind].can = this.canTransport;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 8300;
          unit_dop_menu[ind].menu_name = "Transport";
        } else {
          unit_dop_menu[ind].face_animY = 8400;
          unit_dop_menu[ind].menu_name = "Transport";
        }

        unit_dop_menu[ind].name = "transport";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name &&
          menu_unit_for_update.fatherFraction.maxUnits >
            menu_unit_for_update.fatherFraction.peoples.length;
        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 1000;
        unit_dop_menu[ind].wood = 300;
        unit_dop_menu[ind].oil = 0;
        unit_dop_menu[ind].foot = 1;
        unit_dop_menu[ind].doo = ["transport", myJoube_time("transport")];

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 1;

        unit_dop_menu[ind].can = this.canOilTanker;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 8500;
          unit_dop_menu[ind].menu_name = "Oil tanker";
        } else {
          unit_dop_menu[ind].face_animY = 8600;
          unit_dop_menu[ind].menu_name = "Oil tanker";
        }

        unit_dop_menu[ind].name = "oil_tanker";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name &&
          menu_unit_for_update.fatherFraction.maxUnits >
            menu_unit_for_update.fatherFraction.peoples.length;
        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 1000;
        unit_dop_menu[ind].wood = 300;
        unit_dop_menu[ind].oil = 0;
        unit_dop_menu[ind].foot = 1;
        unit_dop_menu[ind].doo = ["oil_tanker", myJoube_time("oil_tanker")];

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 5;

        unit_dop_menu[ind].can = this.canDistroer;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 8700;
          unit_dop_menu[ind].menu_name = "Elven destroyer";
        } else {
          unit_dop_menu[ind].face_animY = 8800;
          unit_dop_menu[ind].menu_name = "Troll destroyer";
        }

        unit_dop_menu[ind].name = "distroer";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name &&
          menu_unit_for_update.fatherFraction.maxUnits >
            menu_unit_for_update.fatherFraction.peoples.length;
        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 1000;
        unit_dop_menu[ind].wood = 300;
        unit_dop_menu[ind].oil = 0;
        unit_dop_menu[ind].foot = 1;
        unit_dop_menu[ind].doo = ["distroer", myJoube_time("distroer")];

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 6;

        unit_dop_menu[ind].can = this.canLinkor;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 9100;
          unit_dop_menu[ind].menu_name = "Gnomish submarine";
        } else {
          unit_dop_menu[ind].face_animY = 9200;
          unit_dop_menu[ind].menu_name = "Giant turtle";
        }

        unit_dop_menu[ind].name = "turtle";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name &&
          menu_unit_for_update.fatherFraction.maxUnits >
            menu_unit_for_update.fatherFraction.peoples.length;
        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 1200;
        unit_dop_menu[ind].wood = 300;
        unit_dop_menu[ind].oil = 0;
        unit_dop_menu[ind].foot = 1;
        unit_dop_menu[ind].doo = ["turtle", myJoube_time("turtle")];

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 7;

        unit_dop_menu[ind].can = this.canLinkor;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 8900;
          unit_dop_menu[ind].menu_name = "Battleship";
        } else {
          unit_dop_menu[ind].face_animY = 9000;
          unit_dop_menu[ind].menu_name = "Ogre juggernaught";
        }

        unit_dop_menu[ind].name = "linkor";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name &&
          menu_unit_for_update.fatherFraction.maxUnits >
            menu_unit_for_update.fatherFraction.peoples.length;
        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 1500;
        unit_dop_menu[ind].wood = 500;
        unit_dop_menu[ind].oil = 0;
        unit_dop_menu[ind].foot = 1;
        unit_dop_menu[ind].doo = ["linkor", myJoube_time("linkor")];

        ///////////////////////////////////////////////////////////////////////////////
      } else if (
        menu_unit_for_update.unitName === "foundry" &&
        !this.myJoubeTimer_fou
      ) {
        let ind;

        /////////////////////////////////////////////////////

        /*	
this.dopNoFlyAttack_level<5
||
this.dopNoFlyPanzer_level<5
||
this.dopBallista_level<3	
*/

        ind = 0;

        unit_dop_menu[ind].can =
          this.canLinkor &&
          //&&
          //!this.myJoubeTimer_kuz

          this.dopAttack_level < 5;

        //console.log(this.dopNoFlyAttack_level);

        if (this.dopAttack_level < 5) {
          if (this.nation === "h") {
            if (this.dopAttack_level < 2) {
              unit_dop_menu[ind].face_animY = 7700;
            } else if (this.dopAttack_level < 4) {
              unit_dop_menu[ind].face_animY = 7800;
            } else if (this.dopAttack_level === 4) {
              unit_dop_menu[ind].face_animY = 7900;
            }

            unit_dop_menu[ind].menu_name =
              "Ships fire up + " + String(20) + "%";
          } else {
            if (this.dopAttack_level < 2) {
              unit_dop_menu[ind].face_animY = 8000;
            } else if (this.dopAttack_level < 4) {
              unit_dop_menu[ind].face_animY = 8100;
            } else if (this.dopAttack_level === 4) {
              unit_dop_menu[ind].face_animY = 8200;
            }

            unit_dop_menu[ind].menu_name =
              "Ships fire up + " + String(20) + "%";
          }

          unit_dop_menu[ind].name = "dopAttack";

          unit_dop_menu[ind].resurs =
            this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name;

          //console.log(unit_dop_menu[0].resurs)check_resurs

          unit_dop_menu[ind].gold = 1000;
          unit_dop_menu[ind].wood = 500;
          unit_dop_menu[ind].oil = 0;

          ///////////////////////////////////////////////////////////////////////////////
        }
      } else if (
        menu_unit_for_update.unitName === "kuznya" &&
        !this.myJoubeTimer_kuz
      ) {
        let ind;

        /////////////////////////////////////////////////////

        /*	
this.dopNoFlyAttack_level<5
||
this.dopNoFlyPanzer_level<5
||
this.dopBallista_level<3	
*/

        ind = 0;

        unit_dop_menu[ind].can =
          this.canBallista &&
          //&&
          //!this.myJoubeTimer_kuz

          this.dopNoFlyAttack_level < 5;
        //||
        //this.dopFlySee_level<3

        //console.log(this.dopNoFlyAttack_level);

        if (this.dopNoFlyAttack_level < 5) {
          if (this.nation === "h") {
            if (this.dopNoFlyAttack_level < 2) {
              unit_dop_menu[ind].face_animY = 6400;
            } else if (this.dopNoFlyAttack_level < 4) {
              unit_dop_menu[ind].face_animY = 6500;
            } else if (this.dopNoFlyAttack_level === 4) {
              unit_dop_menu[ind].face_animY = 6600;
            }

            unit_dop_menu[ind].menu_name = "Swords up + " + String(20) + "%";
          } else {
            if (this.dopNoFlyAttack_level < 2) {
              unit_dop_menu[ind].face_animY = 11600;
            } else if (this.dopNoFlyAttack_level < 4) {
              unit_dop_menu[ind].face_animY = 11700;
            } else if (this.dopNoFlyAttack_level === 4) {
              unit_dop_menu[ind].face_animY = 11800;
            }

            unit_dop_menu[ind].menu_name = "Axes up + " + String(20) + "%";
          }

          unit_dop_menu[ind].name = "dopNoFlyAttack_level";

          unit_dop_menu[ind].resurs =
            this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name;

          //console.log(unit_dop_menu[0].resurs)check_resurs

          unit_dop_menu[ind].gold = 1000;
          unit_dop_menu[ind].wood = 500;
          unit_dop_menu[ind].oil = 0;

          ///////////////////////////////////////////////////////////////////////////////
        }

        if (this.dopNoFlyPanzer_level < 5) {
          ind = 1;

          unit_dop_menu[ind].can = this.canBallista;
          //&&
          //!this.myJoubeTimer_kuz;

          if (this.nation === "h") {
            if (this.dopNoFlyPanzer_level < 2) {
              unit_dop_menu[ind].face_animY = 6700;
            } else if (this.dopNoFlyPanzer_level < 4) {
              unit_dop_menu[ind].face_animY = 6800;
            } else if (this.dopNoFlyPanzer_level === 4) {
              unit_dop_menu[ind].face_animY = 6900;
            }

            unit_dop_menu[ind].menu_name = "Shilds up + " + String(20) + "%";
          } else {
            if (this.dopNoFlyPanzer_level < 2) {
              unit_dop_menu[ind].face_animY = 7000;
            } else if (this.dopNoFlyPanzer_level < 4) {
              unit_dop_menu[ind].face_animY = 7100;
            } else if (this.dopNoFlyPanzer_level === 4) {
              unit_dop_menu[ind].face_animY = 7200;
            }

            unit_dop_menu[ind].menu_name = "Shilds up + " + String(20) + "%";
          }

          unit_dop_menu[ind].name = "dopNoFlyPanzer_level";
          unit_dop_menu[ind].resurs =
            this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name;

          unit_dop_menu[ind].gold = 1000;
          unit_dop_menu[ind].wood = 500;
          unit_dop_menu[ind].oil = 0;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////

        if (this.dopBallista_level < 3) {
          ind = 2;

          unit_dop_menu[ind].can = this.canBallista;
          //&&
          //!this.myJoubeTimer_kuz;

          if (this.nation === "h") {
            if (this.dopBallista_level < 2) {
              unit_dop_menu[ind].face_animY = 7300;
            } else {
              unit_dop_menu[ind].face_animY = 7400;
            }

            unit_dop_menu[ind].menu_name = "Ballista bolt up";
            unit_dop_menu[ind].menu_name_2 = " + " + String(20) + "%";
          } else {
            if (this.dopBallista_level < 2) {
              unit_dop_menu[ind].face_animY = 7500;
            } else {
              unit_dop_menu[ind].face_animY = 7600;
            }

            unit_dop_menu[ind].menu_name = "Catapult carnel up";
            unit_dop_menu[ind].menu_name_2 = " + " + String(20) + "%";
          }

          unit_dop_menu[ind].name = "dopBallista";

          unit_dop_menu[ind].resurs =
            this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name;

          //console.log(unit_dop_menu[0].resurs)check_resurs

          unit_dop_menu[ind].gold = 1000;
          unit_dop_menu[ind].wood = 500;
          unit_dop_menu[ind].oil = 0;

          ///////////////////////////////////////////////////////////////////////////////
        }
      } else if (menu_unit_for_update.unitName === "barack") {
        let ind;

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 3;

        unit_dop_menu[ind].can = this.canRizar;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 6200;
          unit_dop_menu[ind].menu_name = "Knight";
        } else {
          unit_dop_menu[ind].face_animY = 6300;
          unit_dop_menu[ind].menu_name = "Ogre";
        }

        unit_dop_menu[ind].name = "rizar";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name &&
          menu_unit_for_update.fatherFraction.maxUnits >
            menu_unit_for_update.fatherFraction.peoples.length;
        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 1000;
        unit_dop_menu[ind].wood = 100;
        unit_dop_menu[ind].oil = 0;
        unit_dop_menu[ind].foot = 1;
        unit_dop_menu[ind].doo = ["rizar", myJoube_time("rizar")];

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 0;

        unit_dop_menu[ind].can = this.canMechnick;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 5600;
          unit_dop_menu[ind].menu_name = "Footman";
        } else {
          unit_dop_menu[ind].face_animY = 5700;
          unit_dop_menu[ind].menu_name = "Grunt";
        }

        unit_dop_menu[ind].name = "mechnick";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name &&
          menu_unit_for_update.fatherFraction.maxUnits >
            menu_unit_for_update.fatherFraction.peoples.length;
        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 600;
        unit_dop_menu[ind].wood = 0;
        unit_dop_menu[ind].oil = 0;
        unit_dop_menu[ind].foot = 1;
        unit_dop_menu[ind].doo = ["mechnick", myJoube_time("mechnick")];

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 1;

        unit_dop_menu[ind].can = this.canLuchnick;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 5800;
          unit_dop_menu[ind].menu_name = "Elven archer";
        } else {
          unit_dop_menu[ind].face_animY = 5900;
          unit_dop_menu[ind].menu_name = "Troll axethrower";
        }

        unit_dop_menu[ind].name = "luchnik";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name &&
          menu_unit_for_update.fatherFraction.maxUnits >
            menu_unit_for_update.fatherFraction.peoples.length;
        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 500;
        unit_dop_menu[ind].wood = 50;
        unit_dop_menu[ind].oil = 0;
        unit_dop_menu[ind].foot = 1;
        unit_dop_menu[ind].doo = ["luchnik", myJoube_time("luchnik")];

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 2;

        unit_dop_menu[ind].can = this.canBallista;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 6000;
          unit_dop_menu[ind].menu_name = "Ballista";
        } else {
          unit_dop_menu[ind].face_animY = 6100;
          unit_dop_menu[ind].menu_name = "Catapult";
        }

        unit_dop_menu[ind].name = "ballista";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
            unit_dop_menu[ind].name &&
          menu_unit_for_update.fatherFraction.maxUnits >
            menu_unit_for_update.fatherFraction.peoples.length;
        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 1000;
        unit_dop_menu[ind].wood = 300;
        unit_dop_menu[ind].oil = 0;
        unit_dop_menu[ind].foot = 1;
        unit_dop_menu[ind].doo = ["ballista", myJoube_time("ballista")];

        ///////////////////////////////////////////////////////////////////////////////
      } else if (menu_unit_for_update.unitName === "peon") {
        let ind;

        //////////////////////////////////////	gold

        unit_dop_menu[20].can = !player_pro_building;

        if (this.nation === "h") {
          unit_dop_menu[20].face_animY = 1100;
        } else {
          unit_dop_menu[20].face_animY = 1000;
        }

        unit_dop_menu[20].name = "gold";

        unit_dop_menu[20].menu_name = "Get gold";

        if (
          menu_unit_for_update.gold &&
          menu_unit_for_update.fatherFraction.canFarm
        ) {
          unit_dop_menu[20].resurs = true;
        } else if (
          menu_unit_for_update.gold &&
          !menu_unit_for_update.fatherFraction.canFarm
        ) {
          unit_dop_menu[20].resurs = false;
        } else if (
          !menu_unit_for_update.gold &&
          !allContinents[menu_unit_for_update.cell.continent].shahts.length
        ) {
          unit_dop_menu[20].resurs = false;
        } else {
          unit_dop_menu[20].resurs = true;
        }

        ////////////////////////////////////////

        //////////////////////////////////////	wood

        unit_dop_menu[21].can = !player_pro_building;

        if (this.nation === "h") {
          unit_dop_menu[21].face_animY = 1200;
        } else {
          unit_dop_menu[21].face_animY = 1200;
        }

        unit_dop_menu[21].name = "wood";

        unit_dop_menu[21].menu_name = "Get wood";

        if (
          menu_unit_for_update.wood &&
          (menu_unit_for_update.fatherFraction.canFarm ||
            menu_unit_for_update.fatherFraction.canLuchnick)
        ) {
          unit_dop_menu[21].resurs = true;
        } else if (
          menu_unit_for_update.wood &&
          !menu_unit_for_update.fatherFraction.canFarm &&
          !menu_unit_for_update.fatherFraction.canLuchnick
        ) {
          unit_dop_menu[21].resurs = false;
        } else if (
          !menu_unit_for_update.wood &&
          !allContinents[menu_unit_for_update.cell.continent].woods.length
        ) {
          unit_dop_menu[21].resurs = false;
        } else {
          unit_dop_menu[21].resurs = true;
        }

        ////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 9;

        unit_dop_menu[ind].can = this.canTower;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 5400;
          unit_dop_menu[ind].menu_name = "Scout tower";
        } else {
          unit_dop_menu[ind].face_animY = 5500;
          unit_dop_menu[ind].menu_name = "Watch tower";
        }

        unit_dop_menu[ind].name = "tower";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
          unit_dop_menu[ind].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 1500;
        unit_dop_menu[ind].wood = 500;
        unit_dop_menu[ind].oil = 0;

        ///////////////////////////////////////////////////////////////////////////////

        /////////////////////////////////////////////////////

        unit_dop_menu[0].can = true;

        if (this.nation === "h") {
          unit_dop_menu[0].face_animY = 400;
          unit_dop_menu[0].menu_name = "Town hall";
        } else {
          unit_dop_menu[0].face_animY = 500;
          unit_dop_menu[0].menu_name = "Great hall";
        }

        unit_dop_menu[0].name = "townHoll";

        unit_dop_menu[0].resurs =
          this.check_resurs_pro(unit_dop_menu[0].name) ===
          unit_dop_menu[0].name;

        //console.log(unit_dop_menu[0].resurs) check_resurs

        unit_dop_menu[0].gold = 1000;
        unit_dop_menu[0].wood = 1000;
        unit_dop_menu[0].oil = 0;

        ///////////////////////////////////////////////////////////////////////////////

        unit_dop_menu[1].can = this.canFarm;

        if (this.nation === "h") {
          unit_dop_menu[1].face_animY = 700;
          unit_dop_menu[1].menu_name = "Farm";
        } else {
          unit_dop_menu[1].face_animY = 800;
          unit_dop_menu[1].menu_name = "Pig farm";
        }

        unit_dop_menu[1].name = "farm";

        unit_dop_menu[1].resurs =
          this.check_resurs_pro(unit_dop_menu[1].name) ===
          unit_dop_menu[1].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[1].gold = 500;
        unit_dop_menu[1].wood = 300;
        unit_dop_menu[1].oil = 0;

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        unit_dop_menu[2].can = this.canLesopilka;

        if (this.nation === "h") {
          unit_dop_menu[2].face_animY = 2400;
          unit_dop_menu[2].menu_name = "Elven lumber mill";
        } else {
          unit_dop_menu[2].face_animY = 2500;
          unit_dop_menu[2].menu_name = "Troll lumber mill";
        }

        unit_dop_menu[2].name = "lesopilka";

        unit_dop_menu[2].resurs =
          this.check_resurs_pro(unit_dop_menu[2].name) ===
          unit_dop_menu[2].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[2].gold = 700;
        unit_dop_menu[2].wood = 500;
        unit_dop_menu[2].oil = 0;

        ///////////////////////////////////////////////////////////////////////////////

        //Great hall

        ///////////////////////////////////////////////////////////////////////////////

        unit_dop_menu[3].can = this.canBarack;

        if (this.nation === "h") {
          unit_dop_menu[3].face_animY = 2600;
          unit_dop_menu[3].menu_name = "Barracks";
        } else {
          unit_dop_menu[3].face_animY = 2700;
          unit_dop_menu[3].menu_name = "Barracks";
        }

        unit_dop_menu[3].name = "barack";

        unit_dop_menu[3].resurs =
          this.check_resurs_pro(unit_dop_menu[3].name) ===
          unit_dop_menu[3].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[3].gold = 700;
        unit_dop_menu[3].wood = 500;
        unit_dop_menu[3].oil = 0;

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        unit_dop_menu[4].can = this.canKuznya;

        if (this.nation === "h") {
          unit_dop_menu[4].face_animY = 3800;
        } else {
          unit_dop_menu[4].face_animY = 3900;
        }

        unit_dop_menu[4].name = "kuznya";
        unit_dop_menu[4].menu_name = "Blacksmith";

        unit_dop_menu[4].resurs =
          this.check_resurs_pro(unit_dop_menu[4].name) ===
          unit_dop_menu[4].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[4].gold = 700;
        unit_dop_menu[4].wood = 500;
        unit_dop_menu[4].oil = 0;

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 17;

        unit_dop_menu[ind].can = this.canPort;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 4000;
        } else {
          unit_dop_menu[ind].face_animY = 4100;
        }

        unit_dop_menu[ind].name = "port";
        unit_dop_menu[ind].menu_name = "Shipyard";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
          unit_dop_menu[ind].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 1000;
        unit_dop_menu[ind].wood = 300;
        unit_dop_menu[ind].oil = 0;

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 18;

        unit_dop_menu[ind].can = this.canOilRef;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 4200;
        } else {
          unit_dop_menu[ind].face_animY = 4300;
        }

        unit_dop_menu[ind].name = "oil_Ref";
        unit_dop_menu[ind].menu_name = "Refinary";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
          unit_dop_menu[ind].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 1000;
        unit_dop_menu[ind].wood = 300;
        unit_dop_menu[ind].oil = 0;

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 19;

        //console.log(this.canFoundry);

        unit_dop_menu[ind].can = this.canFoundry;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 4400;
        } else {
          unit_dop_menu[ind].face_animY = 4500;
        }

        unit_dop_menu[ind].name = "foundry";
        unit_dop_menu[ind].menu_name = "Foundry";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
          unit_dop_menu[ind].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 1000;
        unit_dop_menu[ind].wood = 300;
        unit_dop_menu[ind].oil = 0;

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 5;

        unit_dop_menu[ind].can = this.canOgreBase;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 4600;
          unit_dop_menu[ind].menu_name = "Stables";
        } else {
          unit_dop_menu[ind].face_animY = 4700;
          unit_dop_menu[ind].menu_name = "Ogre mound";
        }

        unit_dop_menu[ind].name = "ogreBase";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
          unit_dop_menu[ind].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 2000;
        unit_dop_menu[ind].wood = 1000;
        unit_dop_menu[ind].oil = 0;

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 10;

        unit_dop_menu[ind].can = this.canAltar;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 4800;
          unit_dop_menu[ind].menu_name = "Church";
        } else {
          unit_dop_menu[ind].face_animY = 4900;
          unit_dop_menu[ind].menu_name = "Altar of storms";
        }

        unit_dop_menu[ind].name = "altar";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
          unit_dop_menu[ind].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 2000;
        unit_dop_menu[ind].wood = 1000;
        unit_dop_menu[ind].oil = 0;

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 11;

        unit_dop_menu[ind].can = this.canTemple;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 5000;
          unit_dop_menu[ind].menu_name = "Mage tower";
        } else {
          unit_dop_menu[ind].face_animY = 5100;
          unit_dop_menu[ind].menu_name = "Temple of the damned";
        }

        unit_dop_menu[ind].name = "temple";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
          unit_dop_menu[ind].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 2000;
        unit_dop_menu[ind].wood = 1000;
        unit_dop_menu[ind].oil = 0;

        ///////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////

        ind = 12;

        unit_dop_menu[ind].can = this.canDragon_roost;

        if (this.nation === "h") {
          unit_dop_menu[ind].face_animY = 5200;
          unit_dop_menu[ind].menu_name = "Gryphon aviary";
        } else {
          unit_dop_menu[ind].face_animY = 5300;
          unit_dop_menu[ind].menu_name = "Dragon roost";
        }

        unit_dop_menu[ind].name = "dragon_roost";

        unit_dop_menu[ind].resurs =
          this.check_resurs_pro(unit_dop_menu[ind].name) ===
          unit_dop_menu[ind].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[ind].gold = 2000;
        unit_dop_menu[ind].wood = 1000;
        unit_dop_menu[ind].oil = 0;

        ///////////////////////////////////////////////////////////////////////////////
      } else if (menu_unit_for_update.unitName === "townHoll") {
        /////////////////////////////////////////////////////

        unit_dop_menu[0].can = true;

        if (this.nation === "h") {
          unit_dop_menu[0].face_animY = 0;
          unit_dop_menu[0].menu_name = "Batrak";
        } else {
          unit_dop_menu[0].face_animY = 600;
          unit_dop_menu[0].menu_name = "Peon";
        }

        unit_dop_menu[0].name = "batrak";

        unit_dop_menu[0].resurs =
          this.check_resurs_pro(unit_dop_menu[0].name) ===
            unit_dop_menu[0].name &&
          menu_unit_for_update.fatherFraction.maxUnits >
            menu_unit_for_update.fatherFraction.peoples.length;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[0].gold = 400;
        unit_dop_menu[0].wood = 0;
        unit_dop_menu[0].oil = 0;
        unit_dop_menu[0].foot = 1;

        ///////////////////////////////////////////////////////////////////////////////

        unit_dop_menu[1].can =
          (menu_unit_for_update.level === 1 &&
            this.canLuchnick &&
            this.canBallista &&
            this.canMechnick) ||
          (menu_unit_for_update.level === 2 &&
            this.canLuchnick &&
            this.canBallista &&
            this.canMechnick &&
            this.canRizar);
        //this.iCanTownHollLevelUp===this.fractionLevel;

        if (this.nation === "h") {
          if (menu_unit_for_update.level === 1) {
            unit_dop_menu[1].face_animY = 2200;
          } else {
            unit_dop_menu[1].face_animY = 2300;
          }
        } else {
          if (menu_unit_for_update.level === 1) {
            unit_dop_menu[1].face_animY = 2000;
          } else {
            unit_dop_menu[1].face_animY = 2100;
          }
        }

        unit_dop_menu[1].name = "levelUpgrade";
        unit_dop_menu[1].menu_name =
          "Level up " + String(menu_unit_for_update.level);

        unit_dop_menu[1].resurs =
          this.check_resurs_pro(unit_dop_menu[1].name) ===
          unit_dop_menu[1].name;

        //console.log(unit_dop_menu[0].resurs)check_resurs

        unit_dop_menu[1].gold = 2000;
        unit_dop_menu[1].wood = 1000;
        unit_dop_menu[1].oil = 0;

        ///////////////////////////////////////////////////////////////////////////////
      } else if (menu_unit_for_update.unitName === "lesopilka") {
        //console.log("here");

        /*
this.dopFlyAttack_level<5
||
this.dopFlySee_level<3
*/

        /////////////////////////////////////////////////////

        unit_dop_menu[0].can =
          this.canLuchnick &&
          !this.myJoubeTimer_leso &&
          this.dopFlyAttack_level < 5;
        //||
        //this.dopFlySee_level<3

        //24

        //console.log(this.dopFlyAttack_level);

        if (this.dopFlyAttack_level < 5) {
          if (this.nation === "h") {
            if (this.dopFlyAttack_level < 2) {
              unit_dop_menu[0].face_animY = 2800;
            } else if (this.dopFlyAttack_level < 4) {
              unit_dop_menu[0].face_animY = 3000;
            } else if (this.dopFlyAttack_level === 4) {
              unit_dop_menu[0].face_animY = 3200;
            }

            unit_dop_menu[0].menu_name = "Elven archers";
            unit_dop_menu[0].menu_name_2 = "attack + " + String(20) + "%";
          } else {
            if (this.dopFlyAttack_level < 2) {
              unit_dop_menu[0].face_animY = 2900;
            } else if (this.dopFlyAttack_level < 4) {
              unit_dop_menu[0].face_animY = 3100;
            } else if (this.dopFlyAttack_level === 4) {
              unit_dop_menu[0].face_animY = 3300;
            }

            unit_dop_menu[0].menu_name = "Troll axethrower";
            unit_dop_menu[0].menu_name_2 = "attack + " + String(20) + "%";
          }

          unit_dop_menu[0].name = "dopFlyAttack_level";

          unit_dop_menu[0].resurs =
            this.check_resurs_pro(unit_dop_menu[0].name) ===
            unit_dop_menu[0].name;

          //console.log(unit_dop_menu[0].resurs)check_resurs

          unit_dop_menu[0].gold = 1000;
          unit_dop_menu[0].wood = 500;
          unit_dop_menu[0].oil = 0;

          ///////////////////////////////////////////////////////////////////////////////
        }

        if (this.dopFlySee_level < 3) {
          unit_dop_menu[1].can =
            this.canLuchnick &&
            !this.myJoubeTimer_leso &&
            //this.dopFlyAttack_level<5
            //||
            this.dopFlySee_level < 3;

          if (this.nation === "h") {
            unit_dop_menu[1].face_animY = 3500;

            unit_dop_menu[1].menu_name = "Elven archers";
            unit_dop_menu[1].menu_name_2 = "sight+" + String(50);
          } else {
            unit_dop_menu[1].face_animY = 3600;

            unit_dop_menu[1].menu_name = "Troll axethrower";
            unit_dop_menu[1].menu_name_2 = "sight+" + String(50);
          }

          unit_dop_menu[1].name = "dopFlySee_level";

          unit_dop_menu[1].resurs =
            this.check_resurs_pro(unit_dop_menu[1].name) ===
            unit_dop_menu[1].name;

          //console.log(unit_dop_menu[0].resurs)check_resurs

          unit_dop_menu[1].gold = 1000;
          unit_dop_menu[1].wood = 500;
          unit_dop_menu[1].oil = 0;

          ///////////////////////////////////////////////////////////////////////////////
        }
      }
    }
  }
};

Fraction.prototype.check_resurs_pro = function (prioritetToDo) {
  //levelUpgrade

  if (prioritetToDo) {
    if (
      prioritetToDo === "townHoll" &&
      (this.gold < 1000 || this.wood < 1000)
    ) {
      if (this.gold < 1000) {
        prioritetToDo = "gold";
      } else if (this.wood < 1000) {
        prioritetToDo = "wood";
      }
    } else if (
      prioritetToDo === "farm" &&
      (this.gold < 500 || this.wood < 300)
    ) {
      if (this.gold < 500) {
        prioritetToDo = "gold";
      } else if (this.wood < 300) {
        prioritetToDo = "wood";
      }
    } else if (prioritetToDo === "batrak") {
      if (this.gold < 400) {
        prioritetToDo = "gold";
      }
    } else if (
      prioritetToDo === "lesopilka" ||
      prioritetToDo === "barack" ||
      prioritetToDo === "kuznya"
    ) {
      if (this.gold < 700) {
        prioritetToDo = "gold";
      } else if (this.wood < 500) {
        prioritetToDo = "wood";
      }
    } else if (prioritetToDo === "rizar") {
      if (this.gold < 1000) {
        prioritetToDo = "gold";
      } else if (this.wood < 100) {
        prioritetToDo = "wood";
      }
    } else if (prioritetToDo === "mechnick") {
      if (this.gold < 600) {
        prioritetToDo = "gold";
      }
    } else if (prioritetToDo === "luchnik") {
      if (this.gold < 500) {
        prioritetToDo = "gold";
      } else if (this.wood < 50) {
        prioritetToDo = "wood";
      }
    } else if (prioritetToDo === "ballista") {
      if (this.gold < 1000) {
        prioritetToDo = "gold";
      } else if (this.wood < 300) {
        prioritetToDo = "wood";
      }
    } else if (prioritetToDo === "tower") {
      if (this.gold < 1500) {
        prioritetToDo = "gold";
      } else if (this.wood < 500) {
        prioritetToDo = "wood";
      }
    } else if (prioritetToDo === "towerOnUpgrade") {
      if (this.gold < 500) {
        prioritetToDo = "gold";
      } else if (this.wood < 200) {
        prioritetToDo = "wood";
      }
    } else if (
      prioritetToDo === "dopNoFlyAttack_level" ||
      prioritetToDo === "dopNoFlyPanzer_level" ||
      prioritetToDo === "dopFlyAttack_level" ||
      prioritetToDo === "dopFlySee_level" ||
      prioritetToDo === "dopBallista" ||
      prioritetToDo === "dopAttack"
    ) {
      if (this.gold < 1000) {
        prioritetToDo = "gold";
      } else if (this.wood < 500) {
        prioritetToDo = "wood";
      }
    } else if (prioritetToDo === "levelUpgrade") {
      if (this.gold < 2000) {
        prioritetToDo = "gold";
      } else if (this.wood < 1000) {
        prioritetToDo = "wood";
      }
    } else if (
      prioritetToDo === "ogreBase" ||
      prioritetToDo === "altar" ||
      prioritetToDo === "dragon_roost" ||
      prioritetToDo === "temple"
    ) {
      if (this.gold < 2000) {
        prioritetToDo = "gold";
      } else if (this.wood < 1000) {
        prioritetToDo = "wood";
      }
    } else if (prioritetToDo === "port") {
      if (this.gold < 1000) {
        prioritetToDo = "gold";
      } else if (this.wood < 300) {
        prioritetToDo = "wood";
      }
    } else if (
      prioritetToDo === "transport" ||
      prioritetToDo === "oil_tanker"
    ) {
      if (this.gold < 1000) {
        prioritetToDo = "gold";
      } else if (this.wood < 300) {
        prioritetToDo = "wood";
      }
    } else if (prioritetToDo === "oil_Ref" || prioritetToDo === "foundry") {
      if (this.gold < 1000) {
        prioritetToDo = "gold";
      } else if (this.wood < 300) {
        prioritetToDo = "wood";
      }
    } else if (prioritetToDo === "distroer") {
      if (this.gold < 1000) {
        prioritetToDo = "gold";
      } else if (this.wood < 300) {
        prioritetToDo = "wood";
      }
    } else if (prioritetToDo === "linkor") {
      if (this.gold < 1500) {
        prioritetToDo = "gold";
      } else if (this.wood < 500) {
        prioritetToDo = "wood";
      }
    } else if (prioritetToDo === "turtle") {
      if (this.gold < 1200) {
        prioritetToDo = "gold";
      } else if (this.wood < 300) {
        prioritetToDo = "wood";
      }
    } else if (prioritetToDo === "mag") {
      if (this.gold < 1500) {
        prioritetToDo = "gold";
      }
    } else if (prioritetToDo === "dragoon") {
      if (this.gold < 5000) {
        prioritetToDo = "gold";
      }
    }
  }

  //console.log("gold : "+this.gold)
  //console.log(prioritetToDo)

  //if(this.gold<0){pausa=1;};

  return prioritetToDo;
};

Unit.prototype.checkGetTarget_sweeme = function () {
  let dis = get_distanse_on_lineyka(
    this.cell,
    100,
    this.target.cell,
    this.target.gabarit
  );

  if (dis <= this.seeing && this.target.visible) {
    return true;
  }

  return false;
};

Unit.prototype.checkGetTarget = function () {
  if (this.cell) {
    if (
      this.type === 1 ||
      this.type === 2 ||
      this.type === "rizar" ||
      this.type === "mag"
    ) {
      for (let i = 0; i < this.cell.iContaktWith.length; i++) {
        if (
          this.cell.iContaktWith[i].father.persolalNumber ===
          this.target.persolalNumber
        ) {
          this.moveVektor = this.cell.iContaktWith[i].moveVektor;

          return true;
        }
      }
    } else if (
      this.type === 3 ||
      this.type === "ballista" ||
      this.type === "dragoon"
    ) {
      let a = this.target.damagePointX - this.damagePointX;
      let b = this.target.damagePointY - this.damagePointY;

      let c = Math.sqrt(a * a + b * b);

      if (c <= this.seeing) {
        return true;
      }
    }
  }

  return false;
};

Unit.prototype.checkGetHandTarget_sweeme = function () {
  let a = this.damagePointX - this.handTarget.damagePointX;
  let b = this.damagePointY - this.handTarget.damagePointY;

  let dis = Math.sqrt(a * a + b * b); //get_distanse_on_lineyka(this.cell.unit,100,this.handTarget.cell,this.handTarget.gabarit);

  if (dis <= this.seeing) {
    return true;
  }

  return false;
};

Unit.prototype.checkGetHandTarget = function () {
  if (this.type === 2 || this.type === "rizar" || this.type === "mag") {
    for (let i = 0; i < this.cell.iContaktWith.length; i++) {
      if (
        this.cell.iContaktWith[i].father.persolalNumber ===
        this.handTarget.persolalNumber
      ) {
        return true;
      }
    }
  } else if (
    this.type === 3 ||
    this.type === "ballista" ||
    this.type === "dragoon"
  ) {
    if (
      !this.handTarget.neitral &&
      this.handTarget.fatherFraction.union !== this.fatherFraction.union
    ) {
      //zhivie vragy

      let a = this.handTarget.damagePointX - this.damagePointX;
      let b = this.handTarget.damagePointY - this.damagePointY;

      let c = Math.sqrt(a * a + b * b);

      //if(10-(this.cell.x+25)===10-this.cell.x+25){console.log("ok")};
      //console.log(c);

      if (c <= this.seeing) {
        return true;
      }
    } else if (
      this.handTarget.neitral ||
      this.handTarget.fatherFraction.union === this.fatherFraction.union
    ) {
      //ne vragy

      for (let i = 0; i < this.cell.iContaktWith.length; i++) {
        if (
          this.cell.iContaktWith[i].father.persolalNumber ===
          this.handTarget.persolalNumber
        ) {
          return true;
        }
      }
    }
  }

  return false;
};

////////////////////////////////////////////////////////////////////////   new new new!!!!!!!!!!!!!!!!!!!!!!

Unit.prototype.checkValideTarget = function () {
  if (!this.target) {
    return;
  }

  if (
    this.target.unitName === "barack" ||
    this.target.unitName === "kuznya" ||
    this.target.unitName === "ogreBase" ||
    this.target.unitName === "altar" ||
    this.target.unitName === "port" ||
    this.target.unitName === "oil_Ref" ||
    this.target.unitName === "foundry" ||
    this.target.unitName === "dragon_roost" ||
    this.target.unitName === "temple"
  ) {
    if (
      this.target.hp <= 0 ||
      (this.target.hp >= this.target.hpfull &&
        this.target.buildready >= this.target.hpfull)
    ) {
      return false;
    }

    return true;
  } else if (this.target.unitName === "lesopilka") {
    if (
      this.target.hp <= 0 ||
      (this.iGoBuild &&
        this.target.buildready >= this.target.hpfull &&
        this.target.hp >= this.target.hpfull)
    ) {
      return false;
    }

    return true;
  } else if (this.target.unitName === "wood") {
    if (
      this.target.lesorub &&
      (this.target.lesorub.hp <= 0 ||
        !this.target.lesorub.cell ||
        !this.target.lesorub.target ||
        (this.target.lesorub.target &&
          this.target.lesorub.target.persolalNumber !==
            this.target.persolalNumber))
    ) {
      this.target.lesorub = 0;
    }

    if (
      this.target.hp <= 0 ||
      this.target.lesorub ||
      this.target.isBlocked(this.cell.unit)
    ) {
      return false;
    }

    return true;
  } else if (this.target.unitName === "shahta") {
    if (this.target.hp <= 0 || this.target.gold <= 0) {
      return false;
    }

    return true;
  } else if (this.target.unitName === "townHoll") {
    if (
      this.target.hp <= 0 ||
      (this.iGoBuild &&
        this.target.buildready >= this.target.hpfull &&
        this.target.hp >= this.target.hpfull)
    ) {
      return false;
    }

    return true;
  } else if (
    this.target.unitName === "farm" ||
    this.target.unitName === "tower"
  ) {
    if (
      this.target.hp <= 0 ||
      (this.target.hp >= this.target.hpfull &&
        this.target.buildready >= this.target.hpfull)
    ) {
      return false;
    }

    return true;
  }
};

Unit.prototype.getWayToTargetAndCheckGetting = function (arg) {
  if (this.target && this.cell) {
    let optimalContaktCell = this.getOptimalContaktCell();

    //console.log(this.target);
    this.finish = optimalContaktCell; //this.target.cell;
    this.sosFin = optimalContaktCell; //this.target.cell;

    if (!this.finish) {
      this.finish = this.target.cell;
      this.sosFin = this.target.cell;
    }

    this.potentialTarget = 0;
    this.potentialWay = [];

    getWay(arg, this.iSee, 10000, this.target);

    ///////////////////////////////////////////////////////

    //console.log(this.potentialWay);

    if (this.way.length) {
      for (let i = 0; i < this.target.contaktCells.length; i++) {
        if (
          this.way[0].vertikal === this.target.contaktCells[i].vertikal &&
          this.way[0].horizont === this.target.contaktCells[i].horizont
        ) {
          return true;
        }
      }
    }
  }

  return false;
};

Unit.prototype.isBlockedShip = function () {
  let block = 0;

  if (
    !gameFielg[this.vertikal] ||
    !gameFielg[this.vertikal][this.horizont - 1] ||
    !gameFielg[this.vertikal - 1][this.horizont - 1] ||
    gameFielg[this.vertikal][this.horizont - 1].unit ||
    gameFielg[this.vertikal][this.horizont - 1].vossalObj ||
    gameFielg[this.vertikal - 1][this.horizont - 1].unit ||
    gameFielg[this.vertikal - 1][this.horizont - 1].vossalObj
  ) {
    block++;
  }

  if (
    !gameFielg[this.vertikal - 2] ||
    !gameFielg[this.vertikal - 2][this.horizont] ||
    !gameFielg[this.vertikal - 2][this.horizont + 1] ||
    gameFielg[this.vertikal - 2][this.horizont].unit ||
    gameFielg[this.vertikal - 2][this.horizont].vossalObj ||
    gameFielg[this.vertikal - 2][this.horizont + 1].unit ||
    gameFielg[this.vertikal - 2][this.horizont + 1].vossalObj
  ) {
    block++;
  }

  if (
    !gameFielg[this.vertikal] ||
    !gameFielg[this.vertikal][this.horizont + 2] ||
    !gameFielg[this.vertikal - 1][this.horizont + 2] ||
    gameFielg[this.vertikal][this.horizont + 2].unit ||
    gameFielg[this.vertikal][this.horizont + 2].vossalObj ||
    gameFielg[this.vertikal - 1][this.horizont + 2].unit ||
    gameFielg[this.vertikal - 1][this.horizont + 2].vossalObj
  ) {
    block++;
  }

  if (
    !gameFielg[this.vertikal + 1] ||
    !gameFielg[this.vertikal + 1][this.horizont] ||
    !gameFielg[this.vertikal + 1][this.horizont + 1] ||
    gameFielg[this.vertikal + 1][this.horizont].unit ||
    gameFielg[this.vertikal + 1][this.horizont].vossalObj ||
    gameFielg[this.vertikal + 1][this.horizont + 1].unit ||
    gameFielg[this.vertikal + 1][this.horizont + 1].vossalObj
  ) {
    block++;
  }

  if (block === 4) {
    return true;
  }

  return false;
};

Unit.prototype.isBlockedDrag = function () {
  let block = 0;

  if (
    !gameFielg[this.vertikal] ||
    !gameFielg[this.vertikal][this.horizont - 1] ||
    !gameFielg[this.vertikal - 1][this.horizont - 1] ||
    gameFielg[this.vertikal][this.horizont - 1].dragoon ||
    gameFielg[this.vertikal - 1][this.horizont - 1].dragoon
  ) {
    block++;
  }

  if (
    !gameFielg[this.vertikal - 2] ||
    !gameFielg[this.vertikal - 2][this.horizont] ||
    !gameFielg[this.vertikal - 2][this.horizont + 1] ||
    gameFielg[this.vertikal - 2][this.horizont].dragoon ||
    gameFielg[this.vertikal - 2][this.horizont + 1].dragoon
  ) {
    block++;
  }

  if (
    !gameFielg[this.vertikal] ||
    !gameFielg[this.vertikal][this.horizont + 2] ||
    !gameFielg[this.vertikal - 1][this.horizont + 2] ||
    gameFielg[this.vertikal][this.horizont + 2].dragoon ||
    gameFielg[this.vertikal - 1][this.horizont + 2].dragoon
  ) {
    block++;
  }

  if (
    !gameFielg[this.vertikal + 1] ||
    !gameFielg[this.vertikal + 1][this.horizont] ||
    !gameFielg[this.vertikal + 1][this.horizont + 1] ||
    gameFielg[this.vertikal + 1][this.horizont].dragoon ||
    gameFielg[this.vertikal + 1][this.horizont + 1].dragoon
  ) {
    block++;
  }

  if (block === 4) {
    return true;
  }

  return false;
};

const isBlocked = function (arg) {
  //if(this.hp<=0){return true;};
  //console.log(this.contaktCells[0]);

  for (let i = 0; i < this.contaktCells.length; i++) {
    if (
      gameFielg[this.contaktCells[i].vertikal][this.contaktCells[i].horizont]
        .free ||
      (arg &&
        arg.horizont === this.contaktCells[i].horizont &&
        arg.vertikal === this.contaktCells[i].vertikal)
    ) {
      return false;
    }
  }

  return true;
};

Unit.prototype.isBlocked = isBlocked;
LandObj.prototype.isBlocked = isBlocked;

//////////////////////////////////////////////////////////////////////////

Unit.prototype.checkValideFreeCell = function () {
  if (this.cell.iContaktWith.length && this.gabarit === 50) {
    //this.way[this.way.length-1].free

    if (
      this.way[this.way.length - 1].vertikal === this.vertikal - 1 &&
      this.way[this.way.length - 1].horizont === this.horizont - 1
      //||
      //(this.way[this.way.length-1].vertikal===this.vertikal-1&&this.way[this.way.length-1].horizont===this.horizont+1)||
      //(this.way[this.way.length-1].vertikal===this.vertikal+1&&this.way[this.way.length-1].horizont===this.horizont-1)||
      //(this.way[this.way.length-1].vertikal===this.vertikal+1&&this.way[this.way.length-1].horizont===this.horizont+1)
    ) {
      if (
        (gameFielg[this.vertikal - 1] &&
          gameFielg[this.vertikal - 1][this.horizont] &&
          gameFielg[this.vertikal - 1][this.horizont].unit &&
          gameFielg[this.vertikal - 1][this.horizont].unit.cell &&
          gameFielg[this.vertikal - 1][this.horizont].unit.gabarit === 50 &&
          gameFielg[this.vertikal - 1][this.horizont].unit.unitStatus ===
            "life" &&
          gameFielg[this.vertikal - 1][this.horizont].unit.hotCell.vertikal ===
            this.vertikal &&
          gameFielg[this.vertikal - 1][this.horizont].unit.hotCell.horizont ===
            this.horizont - 1) ||
        (gameFielg[this.vertikal] &&
          gameFielg[this.vertikal][this.horizont - 1] &&
          gameFielg[this.vertikal][this.horizont - 1].unit &&
          gameFielg[this.vertikal][this.horizont - 1].unit.cell &&
          gameFielg[this.vertikal][this.horizont - 1].unit.gabarit === 50 &&
          gameFielg[this.vertikal][this.horizont - 1].unit.unitStatus ===
            "life" &&
          gameFielg[this.vertikal][this.horizont - 1].unit.hotCell.vertikal ===
            this.vertikal - 1 &&
          gameFielg[this.vertikal][this.horizont - 1].unit.hotCell.horizont ===
            this.horizont)
      ) {
        return false;
      }
    } else if (
      this.way[this.way.length - 1].vertikal === this.vertikal - 1 &&
      this.way[this.way.length - 1].horizont === this.horizont + 1
    ) {
      if (
        (gameFielg[this.vertikal - 1] &&
          gameFielg[this.vertikal - 1][this.horizont] &&
          gameFielg[this.vertikal - 1][this.horizont].unit &&
          gameFielg[this.vertikal - 1][this.horizont].unit.cell &&
          gameFielg[this.vertikal - 1][this.horizont].unit.gabarit === 50 &&
          gameFielg[this.vertikal - 1][this.horizont].unit.unitStatus ===
            "life" &&
          gameFielg[this.vertikal - 1][this.horizont].unit.hotCell.vertikal ===
            this.vertikal &&
          gameFielg[this.vertikal - 1][this.horizont].unit.hotCell.horizont ===
            this.horizont + 1) ||
        (gameFielg[this.vertikal] &&
          gameFielg[this.vertikal][this.horizont + 1] &&
          gameFielg[this.vertikal][this.horizont + 1].unit &&
          gameFielg[this.vertikal][this.horizont + 1].unit.cell &&
          gameFielg[this.vertikal][this.horizont + 1].unit.gabarit === 50 &&
          gameFielg[this.vertikal][this.horizont + 1].unit.unitStatus ===
            "life" &&
          gameFielg[this.vertikal][this.horizont + 1].unit.hotCell.vertikal ===
            this.vertikal - 1 &&
          gameFielg[this.vertikal][this.horizont + 1].unit.hotCell.horizont ===
            this.horizont)
      ) {
        return false;
      }
    } else if (
      this.way[this.way.length - 1].vertikal === this.vertikal + 1 &&
      this.way[this.way.length - 1].horizont === this.horizont - 1
    ) {
      if (
        (gameFielg[this.vertikal] &&
          gameFielg[this.vertikal][this.horizont - 1] &&
          gameFielg[this.vertikal][this.horizont - 1].unit &&
          gameFielg[this.vertikal][this.horizont - 1].unit.cell &&
          gameFielg[this.vertikal][this.horizont - 1].unit.gabarit === 50 &&
          gameFielg[this.vertikal][this.horizont - 1].unit.unitStatus ===
            "life" &&
          gameFielg[this.vertikal][this.horizont - 1].unit.hotCell.vertikal ===
            this.vertikal + 1 &&
          gameFielg[this.vertikal][this.horizont - 1].unit.hotCell.horizont ===
            this.horizont) ||
        (gameFielg[this.vertikal + 1] &&
          gameFielg[this.vertikal + 1][this.horizont] &&
          gameFielg[this.vertikal + 1][this.horizont].unit &&
          gameFielg[this.vertikal + 1][this.horizont].unit.cell &&
          gameFielg[this.vertikal + 1][this.horizont].unit.gabarit === 50 &&
          gameFielg[this.vertikal + 1][this.horizont].unit.unitStatus ===
            "life" &&
          gameFielg[this.vertikal + 1][this.horizont].unit.hotCell.vertikal ===
            this.vertikal &&
          gameFielg[this.vertikal + 1][this.horizont].unit.hotCell.horizont ===
            this.horizont - 1)
      ) {
        return false;
      }
    } else if (
      this.way[this.way.length - 1].vertikal === this.vertikal + 1 &&
      this.way[this.way.length - 1].horizont === this.horizont + 1
    ) {
      if (
        (gameFielg[this.vertikal + 1] &&
          gameFielg[this.vertikal + 1][this.horizont] &&
          gameFielg[this.vertikal + 1][this.horizont].unit &&
          gameFielg[this.vertikal + 1][this.horizont].unit.cell &&
          gameFielg[this.vertikal + 1][this.horizont].unit.gabarit === 50 &&
          gameFielg[this.vertikal + 1][this.horizont].unit.unitStatus ===
            "life" &&
          gameFielg[this.vertikal + 1][this.horizont].unit.hotCell.vertikal ===
            this.vertikal &&
          gameFielg[this.vertikal + 1][this.horizont].unit.hotCell.horizont ===
            this.horizont + 1) ||
        (gameFielg[this.vertikal] &&
          gameFielg[this.vertikal][this.horizont + 1] &&
          gameFielg[this.vertikal][this.horizont + 1].unit &&
          gameFielg[this.vertikal][this.horizont + 1].unit.cell &&
          gameFielg[this.vertikal][this.horizont + 1].unit.gabarit === 50 &&
          gameFielg[this.vertikal][this.horizont + 1].unit.unitStatus ===
            "life" &&
          gameFielg[this.vertikal][this.horizont + 1].unit.hotCell.vertikal ===
            this.vertikal + 1 &&
          gameFielg[this.vertikal][this.horizont + 1].unit.hotCell.horizont ===
            this.horizont)
      ) {
        return false;
      }
    }
  }

  return true;
};

Unit.prototype.getOptimalContaktCell = function () {
  let min = [];

  for (let i = 0; i < this.target.contaktCells.length; i++) {
    let a = this.target.contaktCells[i].x - this.x;
    let b = this.target.contaktCells[i].y - this.y;

    let c = Math.sqrt(a * a + b * b);

    if (
      (!min.length || c < min[0]) &&
      (gameFielg[this.target.contaktCells[i].vertikal][
        this.target.contaktCells[i].horizont
      ].free ||
        this.type === 1)
    ) {
      min = [c, this.target.contaktCells[i]];
    }
  }

  if (min.length) {
    return gameFielg[min[1].vertikal][min[1].horizont];
  }
};

Unit.prototype.updateSpeed = function () {
  this.rightVSP = Math.sin((0 * Math.PI) / 180) * this.speed;
  this.rightGSP = Math.cos((0 * Math.PI) / 180) * this.speed;

  this.right_DownVSP = Math.sin((45 * Math.PI) / 180) * this.speed;
  this.right_DownGSP = Math.cos((45 * Math.PI) / 180) * this.speed;

  this.downVSP = Math.sin((90 * Math.PI) / 180) * this.speed;
  this.downGSP = Math.cos((90 * Math.PI) / 180) * this.speed;

  this.down_LeftVSP = Math.sin((135 * Math.PI) / 180) * this.speed;
  this.down_LeftGSP = Math.cos((135 * Math.PI) / 180) * this.speed;

  this.leftVSP = Math.sin((180 * Math.PI) / 180) * this.speed;
  this.leftGSP = Math.cos((180 * Math.PI) / 180) * this.speed;

  this.left_UpVSP = Math.sin((225 * Math.PI) / 180) * this.speed;
  this.left_UpGSP = Math.cos((225 * Math.PI) / 180) * this.speed;

  this.upVSP = Math.sin((270 * Math.PI) / 180) * this.speed;
  this.upGSP = Math.cos((270 * Math.PI) / 180) * this.speed;

  this.up_RightVSP = Math.sin((315 * Math.PI) / 180) * this.speed;
  this.up_RightGSP = Math.cos((315 * Math.PI) / 180) * this.speed;
};

Unit.prototype.getTownH_or_Lesopilka = function () {
  let min = [];

  for (let i = 0; i < this.fatherFraction.lesopilkas.length; i++) {
    let a = this.fatherFraction.lesopilkas[i].x - this.x;
    let b = this.fatherFraction.lesopilkas[i].y - this.y;

    let c = Math.sqrt(a * a + b * b);

    if (!min.length || c < min[0]) {
      min = [c, this.fatherFraction.lesopilkas[i]];
    }
  }

  for (let i = 0; i < this.fatherFraction.townHolls.length; i++) {
    let a = this.fatherFraction.townHolls[i].x - this.x;
    let b = this.fatherFraction.townHolls[i].y - this.y;

    let c = Math.sqrt(a * a + b * b);

    if (!min.length || c < min[0]) {
      min = [c, this.fatherFraction.townHolls[i]];
    }
  }

  if (min.length) {
    return min[1];
  }

  return 0;
};

Unit.prototype.getFightVector = function (target) {
  let a = target.damagePointX - this.damagePointX;
  let b = target.damagePointY - this.damagePointY;

  let conor = ((Math.atan2(b, a) + (180 / 180) * Math.PI) / Math.PI) * 180;

  if (this.type === "distroer") {
    conor += 90;
  }

  if (conor > 360) {
    conor = conor - 360;
  }

  let vector;

  if (conor >= 67.5 && conor < 112.5) {
    vector = "up";
  } else if (conor >= 112.5 && conor < 157.5) {
    vector = "up_Right";
  } else if (conor >= 157.5 && conor < 202.5) {
    vector = "right";
  } else if (conor >= 202.5 && conor < 247.5) {
    vector = "right_Down";
  } else if (conor >= 247.5 && conor < 292.5) {
    vector = "down";
  } else if (conor >= 292.5 && conor < 337.5) {
    vector = "down_Left";
  } else if ((conor >= 337.5 && conor <= 360) || (conor >= 0 && conor < 22.5)) {
    vector = "left";
  } else if (conor >= 22.5 && conor < 67.5) {
    vector = "left_Up";
  }

  //console.log(vector);

  return vector;
};

Unit.prototype.peonGo = function (target) {
  ////////////////////////////////////////////////////////////peon

  if (
    target.unitStatus === "life" &&
    target.type === 1 &&
    target.fatherFraction.union !== this.fatherFraction.union &&
    target.cell &&
    !target.way.length &&
    target.stepTakt === 0 &&
    target.myJoube !== "i build" &&
    !target.isBlocked() &&
    !target.clickSave &&
    target.waitTime === 30
  ) {
    let max = [];

    for (let i = target.vertikal - 5; i <= target.vertikal + 5; i++) {
      for (let k = target.horizont - 5; k <= target.horizont + 5; k++) {
        if (gameFielg[i] && gameFielg[i][k]) {
          let a = this.x - gameFielg[i][k].x;
          let b = this.y - gameFielg[i][k].y;

          let c = Math.sqrt(a * a + b * b);

          if (gameFielg[i][k].free && (!max.length || c > max[0])) {
            max = [c, gameFielg[i][k]];
          }
        }
      }
    }

    if (max.length) {
      target.clickSave = new ClickSave(0, max[1]);

      if (target.fatherFraction.activeUnits.indexOf(target) === -1) {
        target.fatherFraction.activeUnits.push(target);
      }

      //console.log("karaul");
    }

    //console.log("karaul");
  }

  ////////////////////////////////////////////////////////////peon
};

Axes.prototype.draw = function (mySelf) {
  //pausa

  if (this.type === "ballista") {
    if (
      this.x >= centerDrawPoint.cellObj.x - 350 &&
      this.x < centerDrawPoint.cellObj.x + 350 &&
      this.y >= centerDrawPoint.cellObj.y - 350 &&
      this.y < centerDrawPoint.cellObj.y + 350
    ) {
      if (!this.boo_draw && !this.boo && !this.inviz) {
        this.gabX = 80;
        this.gabY = 80;

        ctx.save();

        ctx.translate(this.x + removeX, this.y + removeY);

        ctx.rotate(this.conor);

        ctx.drawImage(
          b_s,
          0,
          0,
          100,
          100,
          -this.gabX,
          -this.gabY / 2,
          this.gabX,
          this.gabY
        );

        //ctx.fillStyle="blue";
        //ctx.fillRect(-2.5,-2.5,5,5);

        ctx.restore();
      } else {
        if (!this.s) {
          this.s = true;

          ////////////////////////////////////////////////  SOUND
          if (sounds_fly.length + sounds_fight.length < 35) {
            let dis; //=get_distanse_on_lineyka(this.target.cell,this.target.gabarit,gameFielg[centerDrawPoint.cellObj.vertikal][centerDrawPoint.cellObj.horizont],50);

            let a =
              this.x -
              gameFielg[centerDrawPoint.cellObj.vertikal][
                centerDrawPoint.cellObj.horizont
              ].x;
            let b =
              this.y -
              gameFielg[centerDrawPoint.cellObj.vertikal][
                centerDrawPoint.cellObj.horizont
              ].y;

            dis = Math.sqrt(a * a + b * b);

            let volume = (450 - dis) / 450;

            //console.log(volume); pausa=1;
            if (volume < 0) {
              volume = 0;
            }

            select_sound_fly(undefined, "boo", volume);
          }
          //////////////////////////////////////////////////
        }

        ctx.drawImage(
          boo_ball,
          this.animX_v,
          this.animY_v,
          100,
          98,
          this.boo_point.x + removeX - 75,
          this.boo_point.y + removeY - 70,
          150,
          150
        );

        //ctx.fillStyle="red";
        //ctx.fillRect(this.boo_point.x+removeX,this.boo_point.y+removeY,5,5);

        //console.log(this.animX_v);
        //pausa=1
      }
    }
  } else if (this.type === "luk") {
    /*
let dis=get_distanse_on_lineyka(this.cell,50,gameFielg[centerDrawPoint.cellObj.vertikal][centerDrawPoint.cellObj.horizont],50);


let volume=(450-dis)/450;

//console.log(volume); pausa=1;
if(volume<0){volume=0;};
	
select_sound_fight(this.cell.unit,"tree_sound",volume);
*/

    if (this.stopDraw) {
      this.stopDraw--;
    } else if (
      this.x >= centerDrawPoint.cellObj.x - 350 &&
      this.x < centerDrawPoint.cellObj.x + 350 &&
      this.y >= centerDrawPoint.cellObj.y - 350 &&
      this.y < centerDrawPoint.cellObj.y + 350
    ) {
      ////////////////////////////////////////////////  SOUND
      if (this.takt === 0 && sounds_fly.length + sounds_fight.length < 35) {
        let dis = get_distanse_on_lineyka(
          this.target.cell,
          this.target.gabarit,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fly(undefined, "luk", volume);
      }
      //////////////////////////////////////////////////

      if (!this.stop) {
        let a = this.target.damagePointX - this.x;
        let b = this.target.damagePointY - this.y;

        let c = Math.sqrt(a * a + b * b);

        let a2 = this.target.damagePointX - this.father.damagePointX;
        let b2 = this.target.damagePointY - this.father.damagePointY;

        let c2 = Math.sqrt(a2 * a2 + b2 * b2);

        if (c < 25 && c2 > 100) {
          this.stop = true;
        }

        //console.log(c2);

        //if(this.x>=centerDrawPoint.cellObj.x-350&&this.x<centerDrawPoint.cellObj.x+350
        //&&this.y>=centerDrawPoint.cellObj.y-350&&this.y<centerDrawPoint.cellObj.y+350
        //&&!this.stop
        //){

        //console.log(this.xy_mass.length)
        ///*

        //ctx.fillStyle="red";
        //ctx.fillRect(this.x+removeX,this.y+removeY,5,5);

        //pausa=1;

        this.gabX = 50;
        this.gabY = 50;

        ctx.save();

        ctx.translate(this.x + removeX, this.y + removeY);

        ctx.rotate(this.conor);

        ctx.drawImage(
          elf_str,
          0,
          0,
          100,
          100,
          -this.gabX,
          -this.gabY / 2,
          this.gabX,
          this.gabY
        );

        //ctx.fillStyle="blue";
        //ctx.fillRect(-2.5,-2.5,5,5);

        ctx.restore();

        //pausa=1;

        //this.animX+=100;

        //if(this.animX===400){this.animX=0;};

        //};
      }
    }
  } else if (this.type === "tor") {
    if (
      this.x >= centerDrawPoint.cellObj.x - 350 &&
      this.x < centerDrawPoint.cellObj.x + 350 &&
      this.y >= centerDrawPoint.cellObj.y - 350 &&
      this.y < centerDrawPoint.cellObj.y + 350
    ) {
      ctx.drawImage(
        orc_tornado,
        this.animX,
        0,
        100,
        100,
        this.x + removeX - 8,
        this.y + removeY - 80,
        100,
        100
      );

      this.animX += 100;

      if (this.animX >= 400) {
        this.animX = 0;
      }
    }
    //ctx.fillStyle="red";
    //ctx.fillRect(this.x+removeX,this.y+removeY,5,5);
  } else if (this.type === "z") {
    if (this.stopDraw) {
      this.stopDraw--;
    } else if (!this.dop) {
      let a = this.target.damagePointX - this.x;
      let b = this.target.damagePointY - this.y;

      let c = Math.sqrt(a * a + b * b);

      let a2 = this.target.damagePointX - this.father.damagePointX;
      let b2 = this.target.damagePointY - this.father.damagePointY;

      let c2 = Math.sqrt(a2 * a2 + b2 * b2);

      if (c < 25 && c2 > 100) {
        this.stop = true;
      }

      //console.log(c2);

      if (
        this.x >= centerDrawPoint.cellObj.x - 350 &&
        this.x < centerDrawPoint.cellObj.x + 350 &&
        this.y >= centerDrawPoint.cellObj.y - 350 &&
        this.y < centerDrawPoint.cellObj.y + 350 &&
        !this.stop
      ) {
        //console.log(this.xy_mass.length)
        ///*

        //ctx.fillStyle="red";
        //ctx.fillRect(this.x+removeX,this.y+removeY,5,5);

        //console.log(this.animX); pausa=1;

        this.gabX = 100;
        this.gabY = 100;
        //pausa=1;
        //ctx.drawImage(orc_z,this.animX,0,100,100,this.x+removeX,this.y+removeY,100,100);

        ctx.save();

        ctx.translate(this.x + removeX, this.y + removeY);

        ctx.rotate(this.conor);

        ctx.drawImage(
          orc_z,
          this.animX,
          0,
          100,
          100,
          -this.gabX,
          -this.gabY / 2,
          this.gabX,
          this.gabY
        );

        //ctx.fillStyle="blue";
        //ctx.fillRect(-2.5,-2.5,5,5);

        ctx.restore();

        //pausa=1;

        //if(!this.dop){
        this.animX += 100;

        if (this.animX === 500) {
          this.animX = 0;
        }
        //};
      }
    } else {
      ctx.drawImage(
        orc_z,
        this.animX,
        0,
        100,
        100,
        this.x + removeX - this.gabX / 2,
        this.y + removeY - this.gabY / 2,
        this.gabX,
        this.gabY
      );
    }
  } else if (this.type === "dragoonFire") {
    //pausa=1
    if (
      this.x >= centerDrawPoint.cellObj.x - 350 &&
      this.x < centerDrawPoint.cellObj.x + 350 &&
      this.y >= centerDrawPoint.cellObj.y - 350 &&
      this.y < centerDrawPoint.cellObj.y + 350
    ) {
      if (!this.boo_draw && !this.boo) {
        let koof = (this.takt * 50) / this.sT;

        this.gabX = 100 + koof;
        this.gabY = 100 + koof;

        //console.log(this.gabX)

        let imageToDraw = dragoonFire;

        if (this.father.fatherFraction.nation === "h") {
          imageToDraw = gry_fire;
        }

        ctx.save();
        ctx.translate(this.x + removeX, this.y + removeY);
        ctx.rotate(this.conorAnim);

        ctx.drawImage(
          imageToDraw,
          this.animX,
          this.animY,
          100,
          100,
          -this.gabX / 5,
          -this.gabY / 2,
          this.gabX,
          this.gabY
        );

        //ctx.fillStyle="black";
        //ctx.fillRect(-25,-25,50,50);

        //ctx.fillStyle="red";
        //ctx.fillRect(0,0,5,5);

        ctx.restore();

        //console.log(this.target);
        /*
let a=this.target.damagePointX-this.father.damagePointX;
let b=this.target.damagePointY-this.father.damagePointY;

let c=Math.sqrt(a*a+b*b);


	
this.x2+=Math.cos(this.conor)*(c/this.sT);	
this.y2+=Math.sin(this.conor)*(c/this.sT);	
	
	
	//console.log(x)
	//console.log(this.father)
ctx.fillStyle="blue";
ctx.fillRect(this.x2+removeX,this.y2+removeY,5,5);	
	*/
        //pausa=1

        this.animY += 100;

        if (this.animY >= 400) {
          this.animY = 0;
        }
      }
    }
  } else if (this.type === "orc_ballista") {
    if (
      this.x >= centerDrawPoint.cellObj.x - 350 &&
      this.x < centerDrawPoint.cellObj.x + 350 &&
      this.y >= centerDrawPoint.cellObj.y - 350 &&
      this.y < centerDrawPoint.cellObj.y + 350
    ) {
      if (!this.boo_draw && !this.boo && !this.inviz) {
        ctx.drawImage(
          ballista_ball,
          this.animX,
          0,
          100,
          100,
          this.x + removeX - 28,
          this.y + removeY - 23,
          50,
          50
        );

        //ctx.fillStyle="blue";
        //ctx.fillRect(this.x+removeX,this.y+removeY,5,5);

        //pausa=1

        this.animX += 100;
        if (this.animX === 600) {
          this.animX = 0;
        }
      } else {
        if (!this.s && this.animY_v === 0) {
          this.s = true;

          ////////////////////////////////////////////////  SOUND
          if (sounds_fly.length + sounds_fight.length < 35) {
            //console.log(this.takt); pausa=1

            let dis; //=get_distanse_on_lineyka(this.target.cell,this.target.gabarit,gameFielg[centerDrawPoint.cellObj.vertikal][centerDrawPoint.cellObj.horizont],50);

            let a =
              this.x -
              gameFielg[centerDrawPoint.cellObj.vertikal][
                centerDrawPoint.cellObj.horizont
              ].x;
            let b =
              this.y -
              gameFielg[centerDrawPoint.cellObj.vertikal][
                centerDrawPoint.cellObj.horizont
              ].y;

            dis = Math.sqrt(a * a + b * b);

            let volume = (450 - dis) / 450;

            //console.log(volume); pausa=1;
            if (volume < 0) {
              volume = 0;
            }

            select_sound_fly(undefined, "boo", volume);
          }
          //////////////////////////////////////////////////
        }

        //console.log(this.animY_v); pausa=1

        ctx.drawImage(
          boo_ball,
          this.animX_v,
          this.animY_v,
          100,
          98,
          this.boo_point.x + removeX - 75,
          this.boo_point.y + removeY - 70,
          150,
          150
        );

        //ctx.fillStyle="red";
        //ctx.fillRect(this.boo_point.x+removeX,this.boo_point.y+removeY,5,5);

        //console.log(this.animX_v);
        //pausa=1
      }
    }
    //console.log(this.takt);
  } else if (this.type === "cannon_tower" || this.type === "distroer_canon") {
    //if(!this.gabX){this.gabX=30; this.gabY=30;};

    if (this.type === "cannon_tower") {
      if (sounds_fly.length + sounds_fight.length < 35 && !this.b) {
        this.b = true;

        let dis; //=get_distanse_on_lineyka(this.target.cell,this.target.gabarit,gameFielg[centerDrawPoint.cellObj.vertikal][centerDrawPoint.cellObj.horizont],50);

        let a =
          this.x -
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ].x;
        let b =
          this.y -
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ].y;

        dis = Math.sqrt(a * a + b * b);

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fly(undefined, "cannon", volume);
      }
    }

    if (this.takt < 1000) {
      if (this.stopDraw) {
        this.stopDraw--;
      } else {
        if (
          this.x >= centerDrawPoint.cellObj.x - 350 &&
          this.x < centerDrawPoint.cellObj.x + 350 &&
          this.y >= centerDrawPoint.cellObj.y - 350 &&
          this.y < centerDrawPoint.cellObj.y + 350
        ) {
          //pausa=1;
          //console.log(this.xy_mass.length)
          ///*

          if (this.takt > 1) {
            //console.log(this.gabX);

            ctx.drawImage(
              yadro,
              this.animX,
              this.animY,
              100,
              100,
              this.x + removeX - this.gabX / 2,
              this.y + removeY - this.gabY / 2,
              this.gabX,
              this.gabY
            );

            //ctx.fillStyle="red";
            //ctx.fillRect(this.x+removeX,this.y+removeY,5,5);
            this.animX += 100;

            if (this.animX === 300) {
              this.animX = 0;
            }

            //console.log("ksdgh")
          } else {
            ctx.drawImage(
              yadro_vzryv,
              this.animX_v,
              this.animY_v,
              100,
              100,
              this.xy.x + removeX - 67,
              this.xy.y + removeY - 62,
              150,
              150
            );

            ////////////////////////////////////////////////  SOUND
            if (sounds_fly.length + sounds_fight.length < 35 && !this.bbb) {
              this.bbb = true;

              let dis; //=get_distanse_on_lineyka(this.target.cell,this.target.gabarit,gameFielg[centerDrawPoint.cellObj.vertikal][centerDrawPoint.cellObj.horizont],50);

              let a =
                this.x -
                gameFielg[centerDrawPoint.cellObj.vertikal][
                  centerDrawPoint.cellObj.horizont
                ].x;
              let b =
                this.y -
                gameFielg[centerDrawPoint.cellObj.vertikal][
                  centerDrawPoint.cellObj.horizont
                ].y;

              dis = Math.sqrt(a * a + b * b);

              let volume = (450 - dis) / 450;

              //console.log(volume); pausa=1;
              if (volume < 0) {
                volume = 0;
              }

              select_sound_fly(undefined, "disboo", volume);
            }
            //////////////////////////////////////////////////
          }

          //ctx.fillStyle="blue";
          //ctx.fillRect(this.xy.x+removeX,this.xy.y+removeY,5,5);

          //pausa=1;

          //this.animX+=100;

          //if(this.animX===400){this.animX=0;};
        }
      }
    }
  } else if (this.type === "turtle") {
    if (this.stopDraw) {
      this.stopDraw--;
    } else {
      let a = this.target.damagePointX - this.x;
      let b = this.target.damagePointY - this.y;

      let c = Math.sqrt(a * a + b * b);

      let a2 = this.target.damagePointX - this.father.damagePointX;
      let b2 = this.target.damagePointY - this.father.damagePointY;

      let c2 = Math.sqrt(a2 * a2 + b2 * b2);

      if (c < 25 && c2 > 100) {
        this.stop = true;
      }

      //console.log(c2);

      if (
        this.x >= centerDrawPoint.cellObj.x - 350 &&
        this.x < centerDrawPoint.cellObj.x + 350 &&
        this.y >= centerDrawPoint.cellObj.y - 350 &&
        this.y < centerDrawPoint.cellObj.y + 350 &&
        !this.stop
      ) {
        //console.log(this.xy_mass.length)
        ///*

        //ctx.fillStyle="red";
        //ctx.fillRect(this.x+removeX,this.y+removeY,5,5);

        //pausa=1;

        ctx.save();

        ctx.translate(this.x + removeX, this.y + removeY);

        ctx.rotate(this.conor);

        ctx.drawImage(
          turtle_m,
          this.animX,
          this.animY,
          100,
          100,
          -this.gabX,
          -this.gabY / 2,
          this.gabX,
          this.gabY
        );

        //ctx.fillStyle="blue";
        //ctx.fillRect(-2.5,-2.5,5,5);

        ctx.restore();

        //pausa=1;

        this.animX += 100;

        if (this.animX === 400) {
          this.animX = 0;
        }
      }
    }
  } else if (this.type === "strela_tower") {
    if (
      this.x >= centerDrawPoint.cellObj.x - 350 &&
      this.x < centerDrawPoint.cellObj.x + 350 &&
      this.y >= centerDrawPoint.cellObj.y - 350 &&
      this.y < centerDrawPoint.cellObj.y + 350 &&
      !this.stop
    ) {
      ////////////////////////////////////////////////  SOUND
      if (
        this.takt <= 2 &&
        sounds_fly.length + sounds_fight.length < 35 &&
        !this.hit
      ) {
        this.hit = true;

        let dis; //=get_distanse_on_lineyka(this.target.cell,this.target.gabarit,gameFielg[centerDrawPoint.cellObj.vertikal][centerDrawPoint.cellObj.horizont],50);

        let a =
          this.x -
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ].x;
        let b =
          this.y -
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ].y;

        dis = Math.sqrt(a * a + b * b);

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fly(undefined, "hit", volume);
      }
      //////////////////////////////////////////////////

      ////////////////////////////////////////////////  SOUND
      if (sounds_fly.length + sounds_fight.length < 35 && !this.start) {
        this.start = true;
        //console.log(this.takt); pausa=1

        let dis; //=get_distanse_on_lineyka(this.target.cell,this.target.gabarit,gameFielg[centerDrawPoint.cellObj.vertikal][centerDrawPoint.cellObj.horizont],50);

        let a =
          this.x -
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ].x;
        let b =
          this.y -
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ].y;

        dis = Math.sqrt(a * a + b * b);

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fly(undefined, "strela", volume);
      }
      //////////////////////////////////////////////////

      if (this.stopDraw) {
        this.stopDraw--;
      } else {
        let a = this.target.damagePointX - this.x;
        let b = this.target.damagePointY - this.y;

        let c = Math.sqrt(a * a + b * b);

        let a2 = this.target.damagePointX - this.father.damagePointX;
        let b2 = this.target.damagePointY - this.father.damagePointY;

        let c2 = Math.sqrt(a2 * a2 + b2 * b2);

        if (c < 25 && c2 > 100) {
          this.stop = true;
        }

        //console.log(c2);

        //console.log(this.xy_mass.length)
        ///*

        //ctx.fillStyle="red";
        //ctx.fillRect(this.x+removeX,this.y+removeY,5,5);

        //pausa=1;

        ctx.save();

        ctx.translate(this.x + removeX, this.y + removeY);

        ctx.rotate(this.conor);

        ctx.drawImage(
          tower_strela,
          this.animX,
          this.animY,
          100,
          100,
          -this.gabX,
          -this.gabY / 2,
          this.gabX,
          this.gabY
        );

        //ctx.fillStyle="blue";
        //ctx.fillRect(-2.5,-2.5,5,5);

        ctx.restore();

        //pausa=1;

        this.animX += 100;

        if (this.animX === 400) {
          this.animX = 0;
        }
      }
    }
  } else if (this.type === "topor") {
    if (
      this.x >= centerDrawPoint.cellObj.x - 350 &&
      this.x < centerDrawPoint.cellObj.x + 350 &&
      this.y >= centerDrawPoint.cellObj.y - 350 &&
      this.y < centerDrawPoint.cellObj.y + 350
    ) {
      ///*
      ////////////////////////////////////////////////  SOUND
      if (this.takt === 0 && sounds_fly.length + sounds_fight.length < 35) {
        let dis = get_distanse_on_lineyka(
          this.target.cell,
          this.target.gabarit,
          gameFielg[centerDrawPoint.cellObj.vertikal][
            centerDrawPoint.cellObj.horizont
          ],
          50
        );

        let volume = (450 - dis) / 450;

        //console.log(volume); pausa=1;
        if (volume < 0) {
          volume = 0;
        }

        select_sound_fly(undefined, "topor", volume);
      }
      //////////////////////////////////////////////////
      //*/

      //ctx.fillStyle="red";
      //ctx.fillRect(this.x+removeX,this.y+removeY,5,5);
      //console.log(this.x+removeX);
      //pausa=1;

      ctx.drawImage(
        trollAxe,
        this.animX,
        this.animY,
        100,
        100,
        this.x + removeX - 22,
        this.y + removeY - 22,
        45,
        45
      );

      this.animX += 100;

      if (this.animX === 800) {
        this.animX = 0;
      }
    }
  }
};

Axes.prototype.prog = function (arg) {
  if (this.type === "tor") {
    this.vertikal = Math.floor(this.y / 50);
    this.horizont = Math.floor(this.x / 50);

    /*
if(gameFielg[this.vertikal][this.horizont].dragoonDamages.indexOf(arg)===-1){gameFielg[this.vertikal][this.horizont].dragoonDamages.push(arg);};


if(this.cells.indexOf(gameFielg[this.vertikal][this.horizont])===-1){this.cells.push(gameFielg[this.vertikal][this.horizont]);};




for(let i=0;i<this.cells.length;i++){

if(this.cells[i].persolalNumber!==gameFielg[this.vertikal][this.horizont].persolalNumber){	
this.cells[i].dragoonDamages.splice(this.cells[i].dragoonDamages.indexOf(arg),1);	
};	
	
};
*/

    if (this.life_timer % 50 == 0) {
      let x_ran = Math.floor(Math.random() * 2);
      let y_ran = Math.floor(Math.random() * 2);

      this.gSp = Math.random() * 0.7;
      this.vSp = Math.random() * 0.7;

      if (!x_ran) {
        this.gSp = -this.gSp;
      }
      if (!y_ran) {
        this.vSp = -this.vSp;
      }
    }

    if (this.x + this.gSp > 0 && this.x + this.gSp < gameFielg.length * 50) {
      this.x += this.gSp;
    }

    if (this.y + this.vSp > 0 && this.y + this.vSp < gameFielg.length * 50) {
      this.y += this.vSp;
    }

    if (this.life_timer % 10 == 0) {
      let objs = [];

      for (let i = this.vertikal - 2; i <= this.vertikal + 2; i++) {
        for (let k = this.horizont - 2; k <= this.horizont + 2; k++) {
          if (
            gameFielg[i] &&
            gameFielg[i][k] &&
            gameFielg[i][k].unit &&
            gameFielg[i][k].unit.cell &&
            !gameFielg[i][k].unit.neitral &&
            gameFielg[i][k].unit.hp > 0 &&
            objs.indexOf(gameFielg[i][k].unit) === -1
          ) {
            objs.push(gameFielg[i][k].unit);

            let obj = gameFielg[i][k].unit;

            let c;

            if (gameFielg[i][k].unit.unitStatus === "life") {
              let hp = gameFielg[i][k].unit.hp;

              if (!gameFielg[i][k].unit.active) {
                if (!gameFielg[i][k].unit.sweeme) {
                  gameFielg[i][k].unit.ground_panick(this.father);
                } else {
                  gameFielg[i][k].unit.sea_panick(this.father);
                }
              }

              let a; //=(gameFielg[i][k].unit.x+25)-(this.boo_point.x);
              let b; //=(gameFielg[i][k].unit.y+25)-(this.boo_point.y);

              if (gameFielg[i][k].unit.gabarit === 50) {
                a = gameFielg[i][k].unit.x + 25 - this.x;
                b = gameFielg[i][k].unit.y + 25 - this.y;
              } else if (gameFielg[i][k].unit.gabarit === 100) {
                a = gameFielg[i][k].unit.x + 50 - this.x;
                b = gameFielg[i][k].unit.y - this.y;
              }

              c = Math.sqrt(a * a + b * b);
              //console.log("life : "+c);

              if (c < 110) {
                //console.log(c);
                let attack = this.attack - c * (this.attack / 110);

                gameFielg[i][k].unit.hp -=
                  attack - (attack * gameFielg[i][k].unit.panzer) / 100;

                //console.log("life att: "+attack)
                //indexOf
                if (!gameFielg[i][k].unit.active) {
                  gameFielg[i][k].unit.fatherFraction.activeUnits.push(
                    gameFielg[i][k].unit
                  );
                  gameFielg[i][k].unit.active = true;
                }

                ////////////////////////
                if (title.style && hp > 0 && gameFielg[i][k].unit.hp <= 0) {
                  this.father.fatherFraction.kills++;
                }

                //////////////////////////////
              }

              //console.log(c);
            } else if (gameFielg[i][k].unit.unitStatus === "building") {
              let hp;

              let a = gameFielg[i][k].unit.damagePointX - this.x;
              let b = gameFielg[i][k].unit.damagePointY - this.y;

              c = Math.sqrt(a * a + b * b);

              //console.log(c);

              if (c < 110) {
                let attack = this.attack - c * (this.attack / 110);

                //console.log(" att: "+attack)

                if (
                  gameFielg[i][k].unit.buildready >= gameFielg[i][k].unit.hpfull
                ) {
                  hp = gameFielg[i][k].unit.hp;

                  gameFielg[i][k].unit.hp -=
                    attack - (attack * gameFielg[i][k].unit.panzer) / 100;

                  ////////////////////////
                  if (title.style && hp > 0 && gameFielg[i][k].unit.hp <= 0) {
                    this.father.fatherFraction.kills++;
                  }

                  //////////////////////////////
                } else {
                  hp = gameFielg[i][k].unit.buildready;

                  gameFielg[i][k].unit.buildready -=
                    attack - (attack * gameFielg[i][k].unit.panzer) / 100;

                  ////////////////////////
                  if (
                    title.style &&
                    hp > 0 &&
                    gameFielg[i][k].unit.buildready <= 0
                  ) {
                    this.father.fatherFraction.razings++;
                  }

                  //////////////////////////////
                }

                if (
                  gameFielg[i][k].unit.fatherFraction.activeBuildings.indexOf(
                    gameFielg[i][k].unit
                  ) === -1
                ) {
                  gameFielg[i][k].unit.fatherFraction.activeBuildings.push(
                    gameFielg[i][k].unit
                  );
                }

                if (!gameFielg[i][k].unit.alarmTimer) {
                  gameFielg[i][k].unit.alarmTimer = 500;
                  gameFielg[i][k].unit.agressor = this.father;
                }
              }
            }
          }
        }
      }
    }

    this.life_timer--;

    if (!this.life_timer) {
      this.readyToOut = true;
      /*
for(let i=0;i<this.cells.length;i++){
	
this.cells[i].dragoonDamages.splice(this.cells[i].dragoonDamages.indexOf(arg),1);	
	
	
};
*/
    }
  } else if (this.type === "z") {
    /*
if(!this.stopDraw){
let a={x:this.x,y:this.y,gabX:this.gabX,gabY:this.gabY};

this.xy_mass.unshift(a);

if(this.xy_mass.length>=5){this.xy_mass.pop();};
};
*/
    //console.log(this.x);

    if (this.dop) {
      //pausa=1;

      if (this.dop % 3 === 0) {
        //pausa=1;

        this.animX += 100;

        //console.log(this.animX);

        this.x = this.sx;
        this.y = this.sy;

        if (this.target.hp > 0 && this.target.cell) {
          let hp = this.target.hp;

          this.x = this.target.x + 25;
          this.y = this.target.y + 25;

          this.target.hp -= 50;
          if (!this.target.active) {
            this.target.fatherFraction.activeUnits.push(this.target);
            this.target.active = true;
          }

          //////////////////
          if (title.style && hp > 0 && this.target.hp <= 0) {
            this.father.fatherFraction.kills++;
          }
          ////////////////////
        }

        //if(this.target.unitStatus==="life"){
      }

      this.dop--;

      if (!this.dop) {
        this.takt = 0;
      }

      return;
    }

    this.x += this.gSp;
    this.y += this.vSp;

    this.takt--;

    //this.gabX-=this.dopGabKoof;
    //this.gabY-=this.dopGabKoof;

    if (this.takt === 0 && !this.dop && this.target.cell) {
      this.dop = 15;
      this.takt = 10;
      this.animX = 400;
      this.x = this.target.x + 25;
      this.y = this.target.y + 25;

      this.sx = this.target.x + 25;
      this.sy = this.target.y + 25;

      if (this.target.fly) {
        this.x = this.target.x + 50;
        this.y = this.target.y;

        this.sx = this.target.x + 50;
        this.sy = this.target.y;
      }

      //};
      //if(this.target.unitStatus==="building"){	if(this.target&&this.target.fatherFraction.activeBuildings.indexOf(this.target)===-1){this.target.fatherFraction.activeBuildings.push(this.target);};};
    }
  } else if (this.type === "distroer_canon") {
    /*
if(!this.stopDraw){
let a={x:this.x,y:this.y,gabX:this.gabX,gabY:this.gabY};

this.xy_mass.unshift(a); cell

if(this.xy_mass.length>=5){this.xy_mass.pop();};
};

gabX
*/

    if (this.takt < 1000) {
      if (this.takt > 1) {
        this.x += this.gSp;
        this.y += this.vSp;
      } else {
        this.x = this.xy.x;
        this.y = this.xy.y;

        this.animX_v += 100;

        if (this.animX_v === 800) {
          this.animX_v = 0;
          this.animY_v += 100;
        }
      }

      ///////////////////////////////////
      if (!this.s_t) {
        this.s_t = this.takt;

        this.dopGabKoof = 50 / this.s_t;
      }

      if (!this.target.fly) {
        if (this.s_t > 10) {
          if (this.takt > this.s_t / 1.8) {
            this.gabX += 2; //this.dopGabKoof;
            this.gabY += 2; //this.dopGabKoof;
          } else {
            this.gabX -= 2; //this.dopGabKoof;
            this.gabY -= 2; //this.dopGabKoof;
          }
        }
      } else {
        this.gabX += this.dopGabKoof;
        this.gabY += this.dopGabKoof;
      }
      /////////////////////////////////

      if (!this.stopTakt) {
        this.takt--;
      } else {
        this.stopTakt--;
      }

      //this.gabX-=this.dopGabKoof;
      //this.gabY-=this.dopGabKoof;

      if (this.takt === 1 && this.stopTakt === false) {
        this.stopTakt = 33;

        if (!this.target.fly) {
          //  if(this.target.hp>0&&this.target.cell){
          //	this.target.hp-=this.attack-((this.attack*this.target.panzer)/100);

          //console.log(this.xy.x);

          let vertikal = Math.floor(this.xy.y / 50);
          let horizont = Math.floor(this.xy.x / 50);

          let bu = [];

          for (let i = vertikal - 2; i <= vertikal + 2; i++) {
            for (let k = horizont - 2; k <= horizont + 2; k++) {
              if (
                gameFielg[i] &&
                gameFielg[i][k] &&
                gameFielg[i][k].unit &&
                !gameFielg[i][k].unit.neitral &&
                gameFielg[i][k].unit.cell &&
                //gameFielg[i][k].unit.unitStatus!=="building"&&
                gameFielg[i][k].unit.hp > 0 &&
                bu.indexOf(gameFielg[i][k].unit) === -1
              ) {
                bu.push(gameFielg[i][k].unit);

                let c;

                let a; //=(gameFielg[i][k].unit.x+25)-(this.xy.x);
                let b; //=(gameFielg[i][k].unit.y+25)-(this.xy.y);

                if (
                  gameFielg[i][k].unit.gabarit === 50 ||
                  gameFielg[i][k].unit.gabarit === 150
                ) {
                  a = gameFielg[i][k].unit.x + 25 - this.xy.x;
                  b = gameFielg[i][k].unit.y + 25 - this.xy.y;
                } else if (gameFielg[i][k].unit.gabarit === 100) {
                  a = gameFielg[i][k].unit.x + 50 - this.xy.x;
                  b = gameFielg[i][k].unit.y - this.xy.y;
                }

                c = Math.sqrt(a * a + b * b);

                if (c < 75) {
                  let attack = this.attack - c * (this.attack / 75);

                  //gameFielg[i][k].unit.hp-=attack-((attack*gameFielg[i][k].unit.panzer)/100);

                  if (
                    gameFielg[i][k].unit.unitStatus === "life"
                    //&&
                    //!gameFielg[i][k].unit.active
                  ) {
                    let hp = gameFielg[i][k].unit.hp;

                    if (!gameFielg[i][k].unit.active) {
                      if (!gameFielg[i][k].unit.sweeme) {
                        gameFielg[i][k].unit.ground_panick(this.father);
                      } else {
                        gameFielg[i][k].unit.sea_panick(this.father);
                      }
                    }

                    gameFielg[i][k].unit.hp -=
                      attack - (attack * gameFielg[i][k].unit.panzer) / 100;

                    if (!gameFielg[i][k].unit.active) {
                      gameFielg[i][k].unit.fatherFraction.activeUnits.push(
                        gameFielg[i][k].unit
                      );
                      gameFielg[i][k].unit.active = true;
                    }

                    //////////////////////////
                    if (title.style) {
                      if (hp > 0 && gameFielg[i][k].unit.hp <= 0) {
                        this.father.fatherFraction.kills++;
                      }
                    }

                    ////////////////////////////
                  } else if (
                    gameFielg[i][k].unit.unitStatus === "building" &&
                    !gameFielg[i][k].unit.neitral
                    //&&
                    //gameFielg[i][k].unit.fatherFraction.activeBuildings.indexOf(gameFielg[i][k].unit)===-1
                  ) {
                    let hp;

                    if (
                      gameFielg[i][k].unit.buildready >=
                      gameFielg[i][k].unit.hpfull
                    ) {
                      hp = gameFielg[i][k].unit.hp;

                      gameFielg[i][k].unit.hp -=
                        attack - (attack * gameFielg[i][k].unit.panzer) / 100;

                      //////////////////////////
                      if (
                        title.style &&
                        hp > 0 &&
                        gameFielg[i][k].unit.hp <= 0
                      ) {
                        this.father.fatherFraction.razings++;
                      }
                      /////////////////////////////
                    } else {
                      hp = gameFielg[i][k].unit.buildready;

                      gameFielg[i][k].unit.buildready -=
                        attack - (attack * gameFielg[i][k].unit.panzer) / 100;

                      //////////////////////////
                      if (
                        title.style &&
                        hp > 0 &&
                        gameFielg[i][k].unit.buildready <= 0
                      ) {
                        this.father.fatherFraction.razings++;
                      }
                      /////////////////////////////
                    }

                    if (
                      gameFielg[i][
                        k
                      ].unit.fatherFraction.activeBuildings.indexOf(
                        gameFielg[i][k].unit
                      ) === -1
                    ) {
                      gameFielg[i][k].unit.fatherFraction.activeBuildings.push(
                        gameFielg[i][k].unit
                      );
                    }
                  }

                  //indexOf
                }

                //console.log(c);
              }
            }
          }

          if (
            !this.boo &&
            gameFielg[vertikal] &&
            gameFielg[vertikal][horizont] &&
            !gameFielg[vertikal][horizont].water
          ) {
            //type,horizont,vertikal,speed,fraction

            //console.log(horizont);

            this.boo = new Unit("boo");

            this.boo.x = this.x;
            this.boo.y = this.y;
            this.boo.horizont = horizont;
            this.boo.vertikal = vertikal;
            this.boo.alpf = 1;

            gameFielg[vertikal][horizont].pen.unshift(this.boo);
          }
        } else {
          let hp = this.target.hp;

          this.target.hp -=
            this.attack - (this.attack * this.target.panzer) / 100;

          //console.log("okokokok");
          this.readyToOut = true;

          //////////////////////////
          if (title.style && hp > 0 && this.target.hp <= 0) {
            this.father.fatherFraction.kills++;
          }
          /////////////////////////////
        }
      } // 000
    } else {
      this.takt--;

      if (this.takt <= 1100 && this.boo) {
        this.boo.alpf -= 0.01;
      }

      if (this.takt === 1001) {
        // console.log(this.takt);
        this.readyToOut = true;

        if (this.boo) {
          gameFielg[this.boo.vertikal][this.boo.horizont].pen.splice(
            gameFielg[this.boo.vertikal][this.boo.horizont].pen.indexOf(
              this.boo
            ),
            1
          );
        }

        //console.log("okokokokokok");
      }
    }

    ////////////////////////////////////////

    if (this.takt === 0) {
      this.takt = 2000;
    }

    //////////////////////////////////////

    //if(this.target.unitStatus==="life"){	if(this.target.fatherFraction.activeUnits.indexOf(this.target)===-1){this.target.fatherFraction.activeUnits.push(this.target);};};
    //if(this.target.unitStatus==="building"){	if(this.target&&this.target.fatherFraction.activeBuildings.indexOf(this.target)===-1){this.target.fatherFraction.activeBuildings.push(this.target);};};

    //console.log("ok");
  } else if (this.type === "dragoonFire") {
    //pausa=1

    this.x += this.gSp;
    this.y += this.vSp;

    if (!this.sT) {
      this.sT = this.takt;
    }

    if (this.takt) {
      this.takt--;
    }

    if (!this.takt) {
      //pausa=1;

      //let vertikal=Math.floor(this.boo_point.y/50);
      //let horizont=Math.floor(this.boo_point.x/50);

      //this.x2+=Math.cos(this.conor)*(c/this.sT);
      //this.y2+=Math.sin(this.conor)*(c/this.sT);
      //(x,y,timer,dragoon,cell)

      //console.log(this.sT)

      //console.log(this.father.conor)

      for (let i = -2; i < 5; i++) {
        let x = this.boo_point.x + Math.cos(this.conor) * (i * 50);
        let y = this.boo_point.y + Math.sin(this.conor) * (i * 50);

        let vertikal = Math.floor(y / 50);
        let horizont = Math.floor(x / 50);

        if (gameFielg[vertikal] && gameFielg[vertikal][horizont]) {
          let obj = new DragoonDamage(
            x,
            y,
            60 + Math.abs(i * 15),
            this.father,
            gameFielg[vertikal][horizont],
            vertikal,
            horizont
          );

          gameFielg[vertikal][horizont].dragoonDamages.push(obj);

          dragoonDamages.push(obj);
        }
      }

      //pausa=1
      this.readyToOut = true;
    }
  } else if (this.type === "orc_ballista" || this.type === "ballista") {
    //indexOf
    //let axe=new Axes(this.firePoint.x,this.firePoint.y,"orc_ballista",undefined,this.attack,this.cell.unit,conor);

    if (this.inviz) {
      this.inviz--;
    }

    if (this.takt) {
      this.takt--;
    }

    if (!this.takt) {
      if (!this.boo) {
        let vertikal = Math.floor(this.boo_point.y / 50);
        let horizont = Math.floor(this.boo_point.x / 50);

        let bu = [];

        for (let i = vertikal - 3; i <= vertikal + 3; i++) {
          for (let k = horizont - 3; k <= horizont + 3; k++) {
            if (
              gameFielg[i] &&
              gameFielg[i][k] &&
              gameFielg[i][k].unit &&
              gameFielg[i][k].unit.cell &&
              gameFielg[i][k].unit.persolalNumber !==
                this.father.persolalNumber &&
              bu.indexOf(gameFielg[i][k].unit) === -1 &&
              ((gameFielg[i][k].unit.unitStatus === "life" &&
                gameFielg[i][k].unit.hp > 0) ||
                (gameFielg[i][k].unit.unitStatus === "building" &&
                  !gameFielg[i][k].unit.neitral &&
                  gameFielg[i][k].unit.hp > 0 &&
                  gameFielg[i][k].unit.buildready > 0))
            ) {
              bu.push(gameFielg[i][k].unit);

              let c;

              if (gameFielg[i][k].unit.unitStatus === "life") {
                let hp = gameFielg[i][k].unit.hp;

                if (!gameFielg[i][k].unit.active) {
                  if (!gameFielg[i][k].unit.sweeme) {
                    gameFielg[i][k].unit.ground_panick(this.father);
                  } else {
                    gameFielg[i][k].unit.sea_panick(this.father);
                  }
                }

                let a; //=(gameFielg[i][k].unit.x+25)-(this.boo_point.x);
                let b; //=(gameFielg[i][k].unit.y+25)-(this.boo_point.y);

                if (gameFielg[i][k].unit.gabarit === 50) {
                  a = gameFielg[i][k].unit.x + 25 - this.boo_point.x;
                  b = gameFielg[i][k].unit.y + 25 - this.boo_point.y;
                } else if (gameFielg[i][k].unit.gabarit === 100) {
                  a = gameFielg[i][k].unit.x + 50 - this.boo_point.x;
                  b = gameFielg[i][k].unit.y - this.boo_point.y;
                }

                c = Math.sqrt(a * a + b * b);
                //console.log("life : "+c);

                if (c < 110) {
                  //console.log(c);
                  let attack = this.attack - c * (this.attack / 110);

                  gameFielg[i][k].unit.hp -=
                    attack - (attack * gameFielg[i][k].unit.panzer) / 100;

                  //console.log("life att: "+attack)
                  //indexOf
                  if (!gameFielg[i][k].unit.active) {
                    gameFielg[i][k].unit.fatherFraction.activeUnits.push(
                      gameFielg[i][k].unit
                    );
                    gameFielg[i][k].unit.active = true;
                  }
                }

                ///////////////////////////
                if (title.style && hp > 0 && gameFielg[i][k].unit.hp <= 0) {
                  this.father.fatherFraction.kills++;
                }
                ////////////////////////////////////
              } else if (gameFielg[i][k].unit.unitStatus === "building") {
                let hp;

                let a = gameFielg[i][k].unit.damagePointX - this.boo_point.x;
                let b = gameFielg[i][k].unit.damagePointY - this.boo_point.y;

                c = Math.sqrt(a * a + b * b);

                //console.log(c);

                if (c < 110) {
                  let attack = this.attack - c * (this.attack / 110);

                  //console.log(" att: "+attack)

                  if (
                    gameFielg[i][k].unit.buildready >=
                    gameFielg[i][k].unit.hpfull
                  ) {
                    hp = gameFielg[i][k].unit.hp;

                    gameFielg[i][k].unit.hp -=
                      attack - (attack * gameFielg[i][k].unit.panzer) / 100;

                    ///////////////////////////
                    if (title.style && hp > 0 && gameFielg[i][k].unit.hp <= 0) {
                      this.father.fatherFraction.razings++;
                    }
                    ////////////////////////////////////
                  } else {
                    let hp = gameFielg[i][k].unit.buildready;

                    gameFielg[i][k].unit.buildready -=
                      attack - (attack * gameFielg[i][k].unit.panzer) / 100;

                    ///////////////////////////
                    if (
                      title.style &&
                      hp > 0 &&
                      gameFielg[i][k].unit.buildready <= 0
                    ) {
                      this.father.fatherFraction.razings++;
                    }
                    ////////////////////////////////////
                  }

                  if (
                    gameFielg[i][k].unit.fatherFraction.activeBuildings.indexOf(
                      gameFielg[i][k].unit
                    ) === -1
                  ) {
                    gameFielg[i][k].unit.fatherFraction.activeBuildings.push(
                      gameFielg[i][k].unit
                    );
                  }

                  if (!gameFielg[i][k].unit.alarmTimer) {
                    gameFielg[i][k].unit.alarmTimer = 500;
                    gameFielg[i][k].unit.agressor = this.father;
                  }
                }
              }
            }
          }
        }

        this.boo = true;
        this.boo_draw = 100;
        this.takt = "boo";

        this.animX_v = 0;
        this.animY_v = 0;
      } else {
        if (this.boo_draw) {
          this.boo_draw--;

          if (this.boo_draw % 2 === 0) {
            this.animX_v += 100;

            if (this.animX_v === 800) {
              this.animX_v = 0;
              this.animY_v += 100;
              this.boo_point.y -= 2;
              this.boo_point.x += 1;
              //pausa=1
            }
          }
        }
      }

      if (this.boo_draw === 0) {
        this.readyToOut = true;
      }

      //this.readyToOut=true;
    } else {
      this.x += this.gSp;
      this.y += this.vSp;
    }

    //console.log(this.takt);
  } else if (this.type === "cannon_tower") {
    /*
if(!this.stopDraw){
let a={x:this.x,y:this.y,gabX:this.gabX,gabY:this.gabY};

this.xy_mass.unshift(a);

if(this.xy_mass.length>=5){this.xy_mass.pop();};
};

gabX
*/

    if (this.takt < 1000) {
      if (this.takt > 1) {
        this.x += this.gSp;
        this.y += this.vSp;
      } else {
        this.x = this.xy.x;
        this.y = this.xy.y;

        this.animX_v += 100;

        if (this.animX_v === 800) {
          this.animX_v = 0;
          this.animY_v += 100;
        }
      }

      ///////////////////////////////////
      if (!this.s_t) {
        this.s_t = this.takt;

        //this.dopGabKoof=100/this.s_t;
      }

      if (this.s_t > 10) {
        if (this.takt > this.s_t / 1.8) {
          this.gabX += 2; //this.dopGabKoof;
          this.gabY += 2; //this.dopGabKoof;
        } else {
          this.gabX -= 2; //this.dopGabKoof;
          this.gabY -= 2; //this.dopGabKoof;
        }
      }

      /////////////////////////////////

      if (!this.stopTakt) {
        this.takt--;
      } else {
        this.stopTakt--;
      }

      //this.gabX-=this.dopGabKoof;
      //this.gabY-=this.dopGabKoof;

      if (this.takt === 1 && this.stopTakt === false) {
        this.stopTakt = 33;

        //  if(this.target.hp>0&&this.target.cell){
        //	this.target.hp-=this.attack-((this.attack*this.target.panzer)/100);

        //console.log(this.xy.x);

        let vertikal = Math.floor(this.xy.y / 50);
        let horizont = Math.floor(this.xy.x / 50);

        let bu = [];

        for (let i = vertikal - 2; i <= vertikal + 2; i++) {
          for (let k = horizont - 2; k <= horizont + 2; k++) {
            if (
              gameFielg[i] &&
              gameFielg[i][k] &&
              gameFielg[i][k].unit &&
              gameFielg[i][k].unit.cell &&
              gameFielg[i][k].unit.unitStatus !== "building" &&
              gameFielg[i][k].unit.hp > 0
            ) {
              let c;

              if (
                gameFielg[i][k].unit.unitStatus === "life" &&
                gameFielg[i][k].unit.hp > 0 &&
                //&&
                //gameFielg[i][k].unit.cell
                bu.indexOf(gameFielg[i][k].unit) === -1
              ) {
                let hp = gameFielg[i][k].unit.hp;

                bu.push(gameFielg[i][k].unit);

                let a; //=(gameFielg[i][k].unit.x+25)-(this.xy.x);
                let b; //=(gameFielg[i][k].unit.y+25)-(this.xy.y);

                if (gameFielg[i][k].unit.gabarit === 50) {
                  a = gameFielg[i][k].unit.x + 25 - this.xy.x;
                  b = gameFielg[i][k].unit.y + 25 - this.xy.y;
                } else if (gameFielg[i][k].unit.gabarit === 100) {
                  a = gameFielg[i][k].unit.x + 50 - this.xy.x;
                  b = gameFielg[i][k].unit.y - this.xy.y;
                }

                c = Math.sqrt(a * a + b * b);

                if (c < 75) {
                  //console.log("crash");

                  let attack = this.attack - c * (this.attack / 75);

                  gameFielg[i][k].unit.hp -=
                    attack - (attack * gameFielg[i][k].unit.panzer) / 100;

                  if (!gameFielg[i][k].unit.active) {
                    gameFielg[i][k].unit.fatherFraction.activeUnits.push(
                      gameFielg[i][k].unit
                    );
                    gameFielg[i][k].unit.active = true;
                  }

                  //indexOf
                }

                ///////////////////////////
                if (title.style && hp > 0 && gameFielg[i][k].unit.hp <= 0) {
                  this.father.fatherFraction.kills++;
                }
                ////////////////////////////////////
              }
            }
          }
        }

        if (
          !this.boo &&
          gameFielg[vertikal] &&
          gameFielg[vertikal][horizont] &&
          !gameFielg[vertikal][horizont].water
        ) {
          //type,horizont,vertikal,speed,fraction

          //console.log(horizont);

          this.boo = new Unit("boo");

          this.boo.x = this.x;
          this.boo.y = this.y;
          this.boo.horizont = horizont;
          this.boo.vertikal = vertikal;
          this.boo.alpf = 1;

          gameFielg[vertikal][horizont].pen.unshift(this.boo);
        }
      }
    } else {
      this.takt--;

      if (this.takt <= 1100 && this.boo) {
        this.boo.alpf -= 0.01;
      }

      if (this.takt === 1001) {
        this.readyToOut = true;

        //console.log("ok");

        if (this.boo) {
          gameFielg[this.boo.vertikal][this.boo.horizont].pen.splice(
            gameFielg[this.boo.vertikal][this.boo.horizont].pen.indexOf(
              this.boo
            ),
            1
          );
        }

        //console.log("okokokokokok");
      }
    }

    ////////////////////////////////////////

    if (this.takt === 0) {
      this.takt = 2000;
    }

    //////////////////////////////////////

    //if(this.target.unitStatus==="life"){	if(this.target.fatherFraction.activeUnits.indexOf(this.target)===-1){this.target.fatherFraction.activeUnits.push(this.target);};};
    //if(this.target.unitStatus==="building"){	if(this.target&&this.target.fatherFraction.activeBuildings.indexOf(this.target)===-1){this.target.fatherFraction.activeBuildings.push(this.target);};};
  } else if (
    this.type === "strela_tower" ||
    this.type === "turtle" ||
    this.type === "luk"
  ) {
    /*
if(!this.stopDraw){
let a={x:this.x,y:this.y,gabX:this.gabX,gabY:this.gabY};

this.xy_mass.unshift(a);

if(this.xy_mass.length>=5){this.xy_mass.pop();};
};
*/
    //console.log(this.x);

    this.x += this.gSp;
    this.y += this.vSp;

    this.takt--;

    this.gabX -= this.dopGabKoof;
    this.gabY -= this.dopGabKoof;

    if (this.takt === 0) {
      let hp;

      if (
        this.target.unitStatus === "building" &&
        this.target.buildready < this.target.hpfull &&
        this.target.buildready > 0
      ) {
        hp = this.target.buildready;

        this.target.buildready -=
          this.attack - (this.attack * this.target.panzer) / 100;
      } else if (this.target.hp > 0 && this.target.cell) {
        hp = this.target.hp;

        this.target.hp -=
          this.attack - (this.attack * this.target.panzer) / 100;
      }

      if (this.target.unitStatus === "life") {
        if (!this.target.active) {
          this.target.fatherFraction.activeUnits.push(this.target);
          this.target.active = true;
        }

        if (!this.target.warrior) {
          if (!this.target.alarmTimer) {
            this.target.alarmTimer = 500;
            this.target.agressor = this.father;
          }
        }

        ///////////////////////////
        if (title.style && hp && hp > 0 && this.target.hp <= 0) {
          this.father.fatherFraction.kills++;
        }
        ////////////////////////////////////
      }
      if (this.target.unitStatus === "building") {
        if (
          this.target &&
          this.target.fatherFraction.activeBuildings.indexOf(this.target) === -1
        ) {
          this.target.fatherFraction.activeBuildings.push(this.target);
        }

        if (this.type === "luk" || this.type === "turtle") {
          if (!this.target.alarmTimer) {
            this.target.alarmTimer = 500;
            this.target.agressor = this.father;
          }
        }

        ///////////////////////////
        if (
          title.style &&
          hp &&
          hp > 0 &&
          (this.target.buildready <= 0 || this.target.hp <= 0)
        ) {
          this.father.fatherFraction.razings++;
        }
        ////////////////////////////////////
      }
    }
  } else if (this.type === "topor") {
    this.x += this.gSp;
    this.y += this.vSp;

    this.takt--;

    if (this.takt === 0) {
      let hp;

      if (
        this.target.unitStatus === "building" &&
        this.target.buildready < this.target.hpfull &&
        this.target.buildready > 0
      ) {
        hp = this.target.buildready;

        this.target.buildready -=
          this.attack - (this.attack * this.target.panzer) / 100;
      } else if (this.target.hp > 0 && this.target.cell) {
        hp = this.target.hp;

        this.target.hp -=
          this.attack - (this.attack * this.target.panzer) / 100;
      }

      if (this.target.unitStatus === "life") {
        if (!this.target.active) {
          this.target.fatherFraction.activeUnits.push(this.target);
          this.target.active = true;
        }

        ///////////////////////////
        if (title.style && hp && hp > 0 && this.target.hp <= 0) {
          this.father.fatherFraction.kills++;
        }
        ////////////////////////////////////
      }
      if (this.target.unitStatus === "building") {
        if (
          this.target &&
          this.target.fatherFraction.activeBuildings.indexOf(this.target) === -1
        ) {
          this.target.fatherFraction.activeBuildings.push(this.target);

          ///////////////////////////
          if (
            title.style &&
            hp &&
            hp > 0 &&
            (this.target.buildready <= 0 || this.target.hp <= 0)
          ) {
            this.father.fatherFraction.razings++;
          }
          ////////////////////////////////////
        }

        if (!this.target.alarmTimer) {
          this.target.alarmTimer = 500;
          this.target.agressor = this.father;
        }
      }
    }
  }
};

Unit.prototype.getFirePoint = function () {
  /*	
if(conor>=67.5&&conor<112.5){
	vector="up";////////////////////////////////////////////////////
	}
else if(conor>=112.5&&conor<157.5){
	vector="up_Right";////////////////////////////////////////////
}
else if(conor>=157.5&&conor<202.5){
	vector="right";//////////////////////////////////////////
}
else if(conor>=202.5&&conor<247.5){
	vector="right_Down";//////////////////////////////////
}
else if(conor>=247.5&&conor<292.5){
	vector="down";/////////////////////////////
}
else if(conor>=292.5&&conor<337.5){
	vector="down_Left";///////////////////////////////
}
else if((conor>=337.5&&conor<=360)||(conor>=0&&conor<22.5)){
	vector="left";//////////////////////////////////////////////
}
else if(conor>=22.5&&conor<67.5){
	vector="left_Up";////////////////////////////////////////
}	
*/
  if (this.type === "distroer") {
    this.firePoint = { x: this.damagePointX, y: this.damagePointY };
  } else if (this.type === "dragoon") {
    //this.firePoint={x:this.x+50,y:this.y};
    if (this.moveVektor === "up") {
      this.firePoint = { x: this.x + 50, y: this.y - 90 };
    } else if (this.moveVektor === "up_Right") {
      this.firePoint = { x: this.x + 70, y: this.y - 95 };
    } else if (this.moveVektor === "left_Up") {
      this.firePoint = { x: this.x + 45, y: this.y - 95 };
    } else if (this.moveVektor === "right") {
      this.firePoint = { x: this.x + 90, y: this.y - 50 };
    } else if (this.moveVektor === "left") {
      this.firePoint = { x: this.x + 30, y: this.y - 55 };
    } else if (this.moveVektor === "right_Down") {
      this.firePoint = { x: this.x + 95, y: this.y - 15 };
    } else if (this.moveVektor === "down") {
      this.firePoint = { x: this.x + 50, y: this.y };
    } else if (this.moveVektor === "down_Left") {
      this.firePoint = { x: this.x + 10, y: this.y - 10 };
    }
  } else if (this.type === 3) {
    if (this.moveVektor === "up") {
      this.firePoint = { x: this.x + 10, y: this.y };
    } else if (this.moveVektor === "up_Right") {
      this.firePoint = { x: this.x + 10, y: this.y };
    } else if (this.moveVektor === "left_Up") {
      this.firePoint = { x: this.x + 10, y: this.y };
    } else if (this.moveVektor === "right") {
      this.firePoint = { x: this.x + 35, y: this.y };
    } else if (this.moveVektor === "left") {
      this.firePoint = { x: this.x + 10, y: this.y };
    } else if (this.moveVektor === "right_Down") {
      this.firePoint = { x: this.x + 35, y: this.y + 10 };
    } else if (this.moveVektor === "down") {
      this.firePoint = { x: this.x + 20, y: this.y + 20 };
    } else if (this.moveVektor === "down_Left") {
      this.firePoint = { x: this.x + 20, y: this.y + 20 };
    }
  } else if (this.type === "ballista") {
    if (this.moveVektor === "up") {
      this.firePoint = {
        x: this.damagePointX + Math.cos((270 * Math.PI) / 180) * 50,
        y: this.damagePointY + Math.sin((270 * Math.PI) / 180) * 50,
      };
    } else if (this.moveVektor === "up_Right") {
      this.firePoint = {
        x: this.damagePointX + Math.cos((315 * Math.PI) / 180) * 50,
        y: this.damagePointY + Math.sin((315 * Math.PI) / 180) * 50,
      };
    } else if (this.moveVektor === "left_Up") {
      this.firePoint = {
        x: this.damagePointX + Math.cos((225 * Math.PI) / 180) * 50,
        y: this.damagePointY + Math.sin((225 * Math.PI) / 180) * 50,
      };
    } else if (this.moveVektor === "right") {
      this.firePoint = {
        x: this.damagePointX + Math.cos((0 * Math.PI) / 180) * 50,
        y: this.damagePointY + Math.sin((0 * Math.PI) / 180) * 50,
      };
    } else if (this.moveVektor === "left") {
      this.firePoint = {
        x: this.damagePointX + Math.cos((180 * Math.PI) / 180) * 50,
        y: this.damagePointY + Math.sin((180 * Math.PI) / 180) * 50,
      };
    } else if (this.moveVektor === "right_Down") {
      this.firePoint = {
        x: this.damagePointX + Math.cos((45 * Math.PI) / 180) * 50,
        y: this.damagePointY + Math.sin((45 * Math.PI) / 180) * 50,
      };
    } else if (this.moveVektor === "down") {
      this.firePoint = {
        x: this.damagePointX + Math.cos((90 * Math.PI) / 180) * 50,
        y: this.damagePointY + Math.sin((90 * Math.PI) / 180) * 50,
      };
    } else if (this.moveVektor === "down_Left") {
      this.firePoint = {
        x: this.damagePointX + Math.cos((135 * Math.PI) / 180) * 50,
        y: this.damagePointY + Math.sin((135 * Math.PI) / 180) * 50,
      };
    }
  }
};

Unit.prototype.axeInitialization = function (target, type, father) {
  if (type === "ballista") {
    let c;

    let a2;
    let b2;

    let a;
    let b;

    let conor;
    let conor2;

    let xy;

    a = target.damagePointX - this.firePoint.x;
    b = target.damagePointY - this.firePoint.y;

    c = Math.sqrt(a * a + b * b);

    conor = Math.atan2(b, a);

    //x,y,type,target,attack,father,conor,xy

    let rage = 1;

    if (father.rage) {
      rage = 1.5;
    }

    let attack = this.attack * rage;

    let axe = new Axes(
      this.damagePointX,
      this.damagePointY,
      "ballista",
      undefined,
      attack,
      this.cell.unit,
      conor
    );

    axe.takt = Math.floor(c / 10);

    axe.boo_point = { x: target.damagePointX, y: target.damagePointY };

    axe.gSp = a / axe.takt;
    axe.vSp = b / axe.takt;

    axesFly.push(axe);
  } else if (type === "luk") {
    let a = target.damagePointX - father.damagePointX;
    let b = target.damagePointY - father.damagePointY;

    let c = Math.sqrt(a * a + b * b);

    //x,y,type,target,attack,father

    let conor = Math.atan2(b, a);

    let axe = new Axes(
      father.damagePointX,
      father.damagePointY,
      "luk",
      undefined,
      father.attack,
      father,
      conor
    );

    axe.takt = Math.floor(c / 24);

    ////////////////////////

    axe.dopGabKoof = 40 / axe.takt;

    /////////////////////////////

    axe.gSp = a / axe.takt;
    axe.vSp = b / axe.takt;

    axe.stopDraw = 2;

    axe.target = target;
    //axe.attack=this.attack;
    //x,y,type,target,attack,father,conor

    axesFly.push(axe);

    //console.log(axe); pausa=1
  } else if (type === "turtle") {
    let a = target.damagePointX - father.damagePointX;
    let b = target.damagePointY - father.damagePointY;

    let c = Math.sqrt(a * a + b * b);

    //x,y,type,target,attack,father

    let conor = Math.atan2(b, a);

    let axe = new Axes(
      father.damagePointX,
      father.damagePointY,
      "turtle",
      undefined,
      father.attack,
      father,
      conor
    );

    axe.takt = Math.floor(c / 24);

    ////////////////////////

    axe.dopGabKoof = 40 / axe.takt;

    /////////////////////////////

    axe.gSp = a / axe.takt;
    axe.vSp = b / axe.takt;

    axe.stopDraw = 2;

    axe.target = target;
    //axe.attack=this.attack;
    //x,y,type,target,attack,father,conor

    axesFly.push(axe);

    //console.log(axe); pausa=1
  } else if (type === "linkor") {
    let c;

    let a2;
    let b2;

    let a;
    let b;

    let conor;
    let conor2;

    let xy;

    a = target.damagePointX - this.damagePointX;
    b = target.damagePointY - this.damagePointY;

    c = Math.sqrt(a * a + b * b);

    conor = Math.atan2(b, a);

    //x,y,type,target,attack,father,conor,xy

    let rage = 1;

    if (father.rage) {
      rage = 1.5;
    }

    let attack = this.attack;

    let axe = new Axes(
      this.damagePointX,
      this.damagePointY,
      "orc_ballista",
      undefined,
      attack,
      this.cell.unit,
      conor
    );

    axe.inviz = 5;

    axe.takt = Math.floor(c / 10);

    axe.boo_point = { x: target.damagePointX, y: target.damagePointY };

    axe.gSp = a / axe.takt;
    axe.vSp = b / axe.takt;

    axesFly.push(axe);
  } else if (type === "distroer_canon") {
    let c;

    let a2;
    let b2;

    let a;
    let b;

    let conor;
    let conor2;

    let xy;

    //if(this.target.unitStatus==="life"){

    let damagePointX;
    let damagePointY;

    damagePointX = target.damagePointX;
    damagePointY = target.damagePointY;

    //console.log(target)

    a = damagePointX - this.damagePointX;
    b = damagePointY - this.damagePointY;

    c = Math.sqrt(a * a + b * b);

    a2 = damagePointX - this.damagePointX;
    b2 = damagePointY - this.damagePointY;

    //x,y,type,target,attack,father

    conor = Math.atan2(b2, a2);
    conor2 = Math.atan2(b, a);

    if (c >= 125) {
      xy = { x: damagePointX, y: damagePointY };
    } else {
      xy = {
        x: this.damagePointX + Math.cos(conor2) * 125,
        y: this.damagePointY + Math.sin(conor2) * 125,
      };

      a = xy.x - this.damagePointX;
      b = xy.y - this.damagePointY;

      c = Math.sqrt(a * a + b * b);

      //console.log(c);

      a2 = xy.x - this.damagePointX;
      b2 = xy.y - this.damagePointY;
    }

    //};

    //x,y,type,target,attack,father,conor,xy

    let axe = new Axes(
      this.damagePointX,
      this.damagePointY,
      "distroer_canon",
      undefined,
      this.attack,
      this.cell.unit,
      conor,
      xy
    );

    axe.takt = Math.floor(c / 10);

    ////////////////////////

    axe.dopGabKoof = 10 / axe.takt;

    /////////////////////////////

    axe.gSp = a2 / axe.takt;
    axe.vSp = b2 / axe.takt;

    axe.stopDraw = 2;

    axe.target = target;
    //axe.attack=this.attack;
    //x,y,type,target,attack,father,conor

    axesFly.push(axe);

    //console.log(axe);	pausa=1;
  } else if (type === "dragoonFire") {
    //pausa=1;

    let c;

    let a2;
    let b2;

    let a;
    let b;

    let conor;
    let conor2;

    let xy;

    a = target.damagePointX - this.damagePointX; //this.firePoint.x;
    b = target.damagePointY - this.damagePointY; //this.firePoint.y;

    c = Math.sqrt(a * a + b * b) + 50;

    a2 = target.damagePointX - this.firePoint.x;
    b2 = target.damagePointY - this.firePoint.y;

    conor = Math.atan2(b2, a2);

    //console.log("c : "+c);

    //x,y,type,target,attack,father,conor,xy

    let attack = this.attack;

    let axe = new Axes(
      this.firePoint.x,
      this.firePoint.y,
      "dragoonFire",
      target,
      attack,
      this.cell.dragoon,
      Math.atan2(b, a)
    );

    axe.conorAnim = conor;

    axe.takt = Math.floor(c / 10);

    axe.boo_point = { x: target.damagePointX, y: target.damagePointY };

    axe.gSp = a2 / axe.takt;
    axe.vSp = b2 / axe.takt;

    axesFly.push(axe);
  } else if (type === "orc_ballista") {
    let c;

    let a2;
    let b2;

    let a;
    let b;

    let conor;
    let conor2;

    let xy;

    a = target.damagePointX - this.firePoint.x;
    b = target.damagePointY - this.firePoint.y;

    c = Math.sqrt(a * a + b * b);

    conor = Math.atan2(b, a);

    //x,y,type,target,attack,father,conor,xy

    let rage = 1;

    if (father.rage) {
      rage = 1.5;
    }

    let attack = this.attack * rage;

    let axe = new Axes(
      this.firePoint.x,
      this.firePoint.y,
      "orc_ballista",
      undefined,
      attack,
      this.cell.unit,
      conor
    );

    axe.takt = Math.floor(c / 10);

    axe.boo_point = { x: target.damagePointX, y: target.damagePointY };

    axe.gSp = a / axe.takt;
    axe.vSp = b / axe.takt;

    axesFly.push(axe);
  } else if (type === "topor" && this.firePoint) {
    //ok x,y,type,target,attack,father
    let rage = 1;

    if (father.rage) {
      rage = 1.5;
    }

    let attack = this.attack * rage;

    //console.log(attack);

    let axe = new Axes(
      this.firePoint.x,
      this.firePoint.y,
      "topor",
      undefined,
      attack,
      father
    );

    let a;
    let b;

    let a2;
    let b2;

    if (!target.fly) {
      a = target.damagePointX - this.damagePointX;
      b = target.damagePointY - this.damagePointY;

      a2 = target.damagePointX - this.firePoint.x;
      b2 = target.damagePointY - this.firePoint.y;
    } else {
      a = target.damagePointX - this.damagePointX;
      b = target.damagePointY - 30 - this.damagePointY;

      a2 = target.damagePointX - this.firePoint.x;
      b2 = target.damagePointY - 30 - this.firePoint.y;
    }

    let c = Math.sqrt(a * a + b * b);

    axe.takt = Math.floor(c / 20);

    /*
if(target.fly){
 a2=(target.damagePointX)-(this.damagePointX);
 b2=(target.damagePointY-30)-(this.damagePointY);	
// console.log("drdrdrd");
};
*/

    axe.gSp = a2 / axe.takt;
    axe.vSp = b2 / axe.takt;

    axe.target = target;
    //axe.attack=this.attack;
    //console.log(axe.takt);

    axesFly.push(axe);
  }
};

Fraction.prototype.update_createShablon = function (terpila_cell) {
  if (this.ii_crash) {
    //console.log("here");

    //console.log(this.ii_crash.terpila.hp);

    if (
      this.ii_crash.terpila &&
      this.ii_crash.terpila.unitStatus === "building" &&
      this.ii_crash.terpila.hp <= 300 &&
      this.towers.length < Math.floor(this.createShablon.towers.length) * 1.5
    ) {
      //console.log("crash "+this.ii_crash.terpila.hp);	pausa=1;

      let cell = this.ii_crash.terpila.cell;

      let farm_cells = [];

      let ok = 0;

      //let cells=[];

      let min = [];

      let cells = [];

      for (let i = cell.vertikal - 8; i <= cell.vertikal + 8; i++) {
        for (let k = cell.horizont - 8; k <= cell.horizont + 8; k++) {
          let ok = 0;

          for (let v = i - 2; v <= i + 1; v++) {
            for (let h = k - 1; h <= k + 2; h++) {
              if (
                gameFielg[v] &&
                gameFielg[v][h] &&
                gameFielg[v][h].ii_free &&
                gameFielg[v][h].persolalNumber !== cell.persolalNumber &&
                !gameFielg[v][h].vossalObj &&
                !gameFielg[v][h].water_line &&
                gameFielg[v][h].continent === this.continent
                //&&
                //well_cell_for_building(gameFielg[i][k],100)
              ) {
                //cells.push(gameFielg[i][k]);
                ok++;
              }
            }
          }

          if (ok === 16) {
            cells.push(gameFielg[i][k]);
          }
        }
      }

      for (let i = 0; i < cells.length; i++) {
        let dis = get_distanse_on_lineyka(this.startPoint, 50, cells[i], 100);

        if (!min.length || min[0] > dis) {
          min = [dis, cells[i]];
        }
      }

      if (min.length) {
        let obj = min[1];

        this.ii_dop_towers.push(
          new SablonObj(obj.horizont, obj.vertikal, undefined, "guard")
        );

        console.log("here tower");
        /*
if(this.fraction==="redOrcs"){	
	console.log("!!!!!!!!!!!!!!!!!!!!!!!");
	console.log(this.ii_dop_towers.length);
	
	//pausa=1;
	
	//if(!this.kaput){this.kaput=true;};
	
};
*/
      }

      this.ii_crash = false;
    } //else{this.ii_crash=false;};
  }

  if (!this.alarmTimer) {
    this.ii_crash = false;
  }
};

Fraction.prototype.alarm_mor_warriors = function () {
  for (let i = 0; i < this.baracks.length; i++) {
    if (
      this.gold >= 2000 &&
      this.wood >= 1000 &&
      this.oil >= 500 &&
      this.peoples.length < this.maxUnits
    ) {
      let barack = this.baracks[i];

      if (!barack.myJoubeTimer) {
        let ran = Math.floor(Math.random() * 3);

        if (!ran && this.canLuchnick) {
          barack.myJoubeTimer = myJoube_time("luchnik");
          barack.myJoube = "luchnik";

          this.gold -= 500;
          this.wood -= 50;
        } else {
          if (this.canRizar) {
            barack.myJoubeTimer = myJoube_time("rizar");
            barack.myJoube = "rizar";

            this.gold -= 1000;
            this.wood -= 100;
          } else {
            barack.myJoubeTimer = myJoube_time("mechnick");
            barack.myJoube = "mechnick";

            this.gold -= 600;
          }
        }

        if (this.activeBuildings.indexOf(barack) === -1) {
          this.activeBuildings.push(barack);
        }
      }
    } else {
      break;
    }
  }
};

Fraction.prototype.checkAlarms_player = function () {
  if (this.player_alarm_timer) {
    this.player_alarm_timer--;
  }

  if (this.alarms.length) {
    if (this.alarms[0].terpila) {
      if (!this.player_alarm_timer) {
        this.player_alarm_timer = 500;

        if (this.nation === "h") {
          select_sound_fly(undefined, "alarm_h", 1);
        } else {
          select_sound_fly(undefined, "alarm_orc", 1);
        }
      }

      let a = {
        obj: this.alarms[0].terpila,
        timer: 10,
        list: 1,
        gabarit: 0,
        alfa: 1,
        drawGabaritRadar: 130 / gameFielgMap.length,
        radarX:
          radar.x +
          this.alarms[0].terpila.horizont * (130 / gameFielgMap.length),
        radarY:
          radar.y +
          this.alarms[0].terpila.vertikal * (130 / gameFielgMap.length),
        drawImage: new Image(),
      };

      a.drawImage.src = "wc/menu/star.png";

      this.radar_alarms.push(a);
    }

    //zst=new Image();
    //zst.src="menu/zst.png";

    this.alarms.shift();
  }
};

Fraction.prototype.checkAlarms = function () {
  if (this.alarms.length) {
    this.alarm_stop_build = 10;

    this.alarm_mor_warriors();

    ///////////////////////////////////////// sea
    //console.log(this.alarmTimer); pausa=1;

    if (
      !this.alarmTimer &&
      this.alarms[0].terpila &&
      this.alarms[0].terpila.unitStatus === "building"
    ) {
      this.alarmTimer = 300;

      this.ii_crash = {
        terpila: this.alarms[0].terpila,
        agressor: this.alarms[0].agressor,
      };
      //if(this.fraction==="redOrcs"){
      //	console.log("here");
      //};
    }

    if (this.alarms[0].agressor) {
      if (this.alarms[0].agressor.sweeme && this.sea) {
        let agressor = this.alarms[0].agressor;

        //console.log(agressor);
        let agressors = 0;

        for (let i = agressor.vertikal - 5; i < agressor.vertikal + 5; i++) {
          for (let k = agressor.horizont - 5; k < agressor.horizont + 5; k++) {
            let cell;

            if (gameFielg[i] && gameFielg[i][k]) {
              cell = gameFielg[i][k];
            }

            if (
              cell &&
              cell.unit &&
              !cell.unit.neitral &&
              cell.unit.warrior &&
              cell.unit.fatherFraction.union !== this.union
            ) {
              agressors++;
            }
          }
        }

        agressors = agressors / 2;

        //console.log(agressors)

        for (let i = 0; i < this.ballistas.length; i++) {
          let obj = this.ballistas[i];

          if (
            !obj.target &&
            !obj.handTarget &&
            !obj.isBlocked() &&
            !obj.ii_strike
          ) {
            if (!obj.born_cell) {
              obj.born_cell = obj.cell;
            }

            //obj.clickSave=new ClickSave(agressor,0);

            //if(!obj.active){
            //this.activeUnits.push(obj);
            //obj.active=true;
            obj.ii_saveCell = obj.born_cell;

            //console.log(obj.born_cell)

            //};

            let a = new Strike(obj, agressor, agressor.cell);
            this.ii_warriors_on_strike.push(a);
            obj.ii_strike = true;
          }
        }

        for (let i = 0; i < this.warriors_on_seas[this.sea].length; i++) {
          if (!agressors) {
            break;
          }

          if (
            !this.warriors_on_seas[this.sea][i].target &&
            !this.warriors_on_seas[this.sea][i].handTarget &&
            !this.warriors_on_seas[this.sea][i].isBlockedShip() &&
            !this.warriors_on_seas[this.sea][i].ii_strike
          ) {
            //this.warriors_on_seas[this.sea][i].clickSave=new ClickSave(agressor,0);

            //if(!this.warriors_on_seas[this.sea][i].active){
            //this.activeUnits.push(this.warriors_on_seas[this.sea][i]);
            //this.warriors_on_seas[this.sea][i].active=true;
            this.warriors_on_seas[this.sea][i].ii_saveCell =
              this.warriors_on_seas[this.sea][i].cell;

            let a = new Strike(
              this.warriors_on_seas[this.sea][i],
              agressor,
              agressor.cell
            );
            this.ii_warriors_on_strike.push(a);
            this.warriors_on_seas[this.sea][i].ii_strike = true;

            //};

            agressors--;
          }
        }
      }

      /////////////////////////////////////////////

      let adeqvate = 0;

      for (
        let v = this.alarms[0].agressor.vertikal - 10;
        v <= this.alarms[0].agressor.vertikal + 10;
        v++
      ) {
        for (
          let h = this.alarms[0].agressor.horizont - 10;
          h <= this.alarms[0].agressor.horizont + 10;
          h++
        ) {
          if (gameFielg[v] && gameFielg[v][h]) {
            let cell = gameFielg[v][h];

            if (
              cell.unit &&
              !cell.unit.neitral &&
              cell.unit.fatherFraction.union !== this.union &&
              cell.unit.warrior
            ) {
              adeqvate++;
            }

            if (
              cell.dragoon &&
              cell.dragoon.fatherFraction.union !== this.union
            ) {
              adeqvate += 2;
            }
          }
        }
      }

      //adeqvate=adeqvate*3;///////////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      //console.log(adeqvate);pausa=1;

      let units = [];

      for (
        let i = 0;
        i < this.warriors_on_continents[this.continent].length;
        i++
      ) {
        let warrior = this.warriors_on_continents[this.continent][i];

        if (!adeqvate) {
          break;
        }

        if (
          !warrior.active &&
          !warrior.isBlocked() &&
          !warrior.ii_strike &&
          //&&
          //warrior.type!=="ballista"
          (warrior.type !== "mag" || warrior.mana === 100)
        ) {
          let a = new Strike(
            warrior,
            this.alarms[0].agressor,
            this.alarms[0].agressor.cell
          );
          this.ii_warriors_on_strike.push(a);
          warrior.ii_strike = true;

          //warrior.clickSave=new ClickSave(this.alarms[0].agressor,0);

          //this.activeUnits.push(warrior);
          //warrior.active=true;

          if (!warrior.born_cell) {
            warrior.born_cell = warrior.cell;
          }
          warrior.ii_saveCell = warrior.born_cell;

          adeqvate--;
        }
      }
    }

    this.alarms.splice(0, 1);

    //console.log("alarm");
  }
};

Unit.prototype.comeWithMee = function (min) {
  return;

  if (!this.target) {
    for (let i = this.vertikal - 5; i <= this.vertikal + 5; i++) {
      for (let k = this.horizont - 5; k <= this.horizont + 5; k++) {
        let cell;

        if (gameFielg[i] && gameFielg[i][k]) {
          cell = gameFielg[i][k];
        }

        if (
          cell &&
          cell.unit &&
          !cell.unit.neitral &&
          cell.unit.warrior &&
          cell.unit.unitStatus === "life" &&
          cell.unit.fatherFraction.fraction === this.fatherFraction.fraction &&
          cell.unit.hp > 0 &&
          !cell.unit.iFight &&
          !cell.unit.handTarget &&
          !cell.unit.target &&
          !cell.ii_strike &&
          cell.unit.persolalNumber !== this.persolalNumber &&
          (cell.unit.type !== "mag" || cell.unit.mana === 100)
          //&&!gameFielg[i][k].unit.ii_saveCell
        ) {
          let a = new Strike(cell.unit, min, min.cell);
          this.fatherFraction.ii_warriors_on_strike.push(a);
          cell.unit.ii_strike = true;

          //let wait=false;

          //if(!gameFielg[i][k].unit.ii_saveCell){wait=true;};

          //	gameFielg[i][k].unit.clickSave=new ClickSave(min,0,wait);

          //if(!gameFielg[i][k].unit.ii_saveCell){
          //	gameFielg[i][k].unit.ii_saveCell=gameFielg[i][k].unit.cell;
          //};

          //if(gameFielg[i][k].unit.fatherFraction.activeUnits.indexOf(gameFielg[i][k].unit)===-1){
          //gameFielg[i][k].unit.fatherFraction.activeUnits.push(gameFielg[i][k].unit);
          //};

          //console.log("ok");
        }
      }
    }
  }
};

const units_price = function (arg) {};

const myJoube_time = function (arg) {
  if (arg === "mag") {
    return 1000;
  } else if (arg === "dragoon") {
    return 2000;
  } else if (arg === "turtle") {
    return 500;
  } else if (arg === "linkor") {
    return 1000;
  } else if (arg === "transport") {
    return 500;
  } else if (arg === "rizar") {
    return 500;
  } else if (arg === "ballista") {
    return 500;
  } else if (arg === "towerOnUpgrade") {
    return 500;
  } else if (arg === "luchnik") {
    return 250;
  } else if (arg === "mechnick") {
    return 250;
  } else if (arg === "distroer") {
    return 500;
  } else if (arg === "oil_tanker") {
    return 300;
  } else if (arg === "batrak") {
    return 100;
  } else if (arg === "dopFlyAttack_level") {
    return 1500;
  } else if (arg === "dopFlySee_level") {
    return 1500;
  } else if (arg === "levelUpgrade") {
    return 1500;
  } else if (
    arg === "dopNoFlyAttack_level" ||
    arg === "dopNoFlyPanzer_level" ||
    arg === "dopBallista" ||
    arg === "dopAttack"
  ) {
    return 1500;
  }
  //dopNoFlyAttack_level
};

const hp_graf = function (x, res, max) {
  let hp_proc = (res * 100) / max;

  let gabarit_x = (res * x) / max;

  let color;

  if (hp_proc > 70) {
    color = "green";
  } else if (hp_proc > 40) {
    color = "yellow";
  } else {
    color = "red";
  }

  return { gabarit: gabarit_x, color: color, proc: hp_proc };
};

/*
fractions[0].townHolls[0].hp=0; fractions[0].activeUnits.push(fractions[0].townHolls[0]);
*/

/*
fractions[0].dragoons[0].hp=0; fractions[0].activeUnits.push(fractions[0].dragoons[0]);
*/

/*
fractions[0].kuznyas[0].hp=0; fractions[0].activeBuildings.push(fractions[0].kuznyas[0]);
*/

/*
for(let i=0;i<fractions.length;i++){
	

fractions[i].gold=500000;
	
	
};
*/

/*
for(let i=0;i<=1000000000;i++){
	
	let a=fractions[1].peoples[0].damagePointX-fractions[0].peoples[0].damagePointX;
	let b=fractions[1].peoples[0].damagePointY-fractions[0].peoples[0].damagePointY;
	
	let c=Math.sqrt(a*a+b*b);
	
	if(i===1000000000){console.log(c);};
	
};
*/

/*
for(let i=0;i<=1000000000;i++){
	
	let c=get_distanse_on_lineyka(fractions[1].peoples[0].cell,fractions[1].peoples[0].gabarit, fractions[0].peoples[0].cell,fractions[0].peoples[0].gabarit);
	
	if(i===1000000000){console.log(c);};
	
};
*/

/*
for(let i=0;i<=1000000000;i++){
	
	let c=get_distanse_on_lineyka_2(fractions[1].peoples[0].cell,fractions[1].peoples[0].gabarit, fractions[0].peoples[0].cell,fractions[0].peoples[0].gabarit);
	
	if(i===1000000000){console.log(c);};
	
};
*/

/*
fractions[1].oil_Refs[0].hp=0;
fractions[1].activeBuildings.push(fractions[1].ports[0]);
*/

//Math.sqrt(150*150+0*0);

/*

fractions[1].activeUnits;


fractions[1].townHolls[0].hp=0;

if(fractions[1].activeBuildings.indexOf(fractions[1].townHolls[0])===-1){
fractions[1].activeBuildings.push(fractions[1].townHolls[0]);
};

fractions[1].stop=true;

*/

/*
fractions[1].ports[0].hp=0;
fractions[1].activeBuildings.push(fractions[1].ports[0]);
*/

/*
for(let i=0;i<fractions[1].warriors.length;i++){
	fractions[1].warriors[i].ii_saveCell=false;
};
*/

/*

for(let i=0;i<fractions[0].warriors.length;i++){
	fractions[0].warriors[i].hp=0;
	
	if(!fractions[0].warriors[i].active){fractions[0].activeUnits.push(fractions[0].warriors[i]);fractions[0].warriors[i].active=true;};
	
};






for(let i=0;i<fractions[1].transports.length;i++){
	fractions[1].transports[i].hp=0;
	
	if(!fractions[1].transports[i].active){fractions[1].activeUnits.push(fractions[1].transports[i]);fractions[1].transports[i].active=true;};
	
};






*/

/*
for(let i=0;i<fractions[0].warriors.length;i++){
	
	
	if(fractions[0].warriors[i].cell&&!fractions[0].warriors[i].ii_attack){
		
		fractions[0].warriors[i].hp=0;
		
		if(!fractions[0].warriors[i].active){fractions[0].activeUnits.push(fractions[0].warriors[i]);fractions[0].warriors[i].active=true;};
		
	};
	
};

fractions[1].gold=0;

*/ //fraction

//fractions[1].transports[0].hp=0;

// woods[0].lesorub=3;  fractions[0].peoples[0].target=woods[0];fractions[0].activeUnits.push(fractions[0].peoples[0]);
//fractions[0].peoples[0].target=shahts[0];fractions[0].activeUnits.push(fractions[0].peoples[0]);

/*

woods[0].lesorub=3;

for(let i=0;i<fractions[0].peoples.length;i++){
	
	fractions[0].peoples[i].target=woods[0];fractions[0].activeUnits.push(fractions[0].peoples[i]);
	
};

*/

//fractions[0].peoples[0].wood=100;

//for(let i=0;i<fractions[1].farms.length;i++){fractions[1].farms[i].hp-=500;if(fractions[1].activeBuildings.indexOf(fractions[1].farms[i])===-1){fractions[1].activeBuildings.push(fractions[1].farms[i]);};}
//for(let i=0;i<fractions[1].baracks.length;i++){fractions[1].baracks[i].hp-=1499;fractions[1].activeBuildings.push(fractions[1].baracks[i]);};
//for(let i=0;i<fractions[1].farms.length;i++){fractions[1].farms[i].buildready-=500;};

//for(let i=0;i<fractions[1].townHolls.length;i++){fractions[1].townHolls[i].hp-=2000;fractions[1].activeBuildings.push(fractions[1].townHolls[i]);};

/*
for(let i=0;i<fractions[1].batraks.length;i++){
	
if(fractions[1].batraks[i].cell){	
	fractions[1].peoples[i].target="dead";
	fractions[1].batraks[i].hp=0;
	
	
	
	if(fractions[1].activeUnits.indexOf(fractions[1].batraks[i])===-1){
		
		fractions[1].activeUnits.push(fractions[1].batraks[i]);
	};
	};
	
};
*/

/*
for(let i=0;i<fractions[0].peoples.length;i++){
	
	fractions[0].peoples[i].hp=0;
	fractions[0].peoples[i].target="dead";
	
	if(fractions[0].activeUnits.indexOf(fractions[0].peoples[i])===-1){
		
		fractions[0].activeUnits.push(fractions[0].peoples[i]);
		//console.log("ok");
	};
	
};
//*/
//for(let i=0;i<fractions[0].selectUnits.length;i++){fractions[0].selectUnits[i].hp=1000000;};

//fractions[0].peoples;

//fractions[0].transports[0].hp=0;

/*
for(let i=0;i<1000000000000;i++){
	
	let test=get_distanse_on_lineyka(fractions[0].peoples[0].cell,50,gameFielg[230][230],50);
	
	if(i===1000000000){console.log(test); break};
	
};
*/

/*
for(let i=0;i<1000000000000;i++){
	
	let test=get_distanse_on_lineyka_2(fractions[0].peoples[0].cell,50,gameFielg[230][230],50);
	
	if(i===1000000000){console.log(test); break};
	
};
*/

/*
for(let i=0;i<fractions[2].baracks.length;i++){
fractions[2].baracks[i].hp=0;
if(fractions[2].activeBuildings.indexOf(fractions[2].baracks[i])===-1){
fractions[2].activeBuildings.push(fractions[2].baracks[i]);	
};
};



fractions[2].baracks[0].hp=0;
if(fractions[2].activeBuildings.indexOf(fractions[2].baracks[0])===-1){
fractions[2].activeBuildings.push(fractions[2].baracks[0]);	
};


*/

const pausa_menu = function () {
  ctx3.globalAlpha = 0.5;
  ctx3.fillStyle = "black";
  ctx3.fillRect(0, 0, width, height);
  ctx3.globalAlpha = 1;

  //////////////////////// zst_obj
  ctx3.globalAlpha = zst_obj.alfa;
  ctx3.drawImage(
    zst_obj.imageToDraw,
    0,
    0,
    1000,
    700,
    zst_obj.x - zst_obj.gabarit / 2,
    zst_obj.y - zst_obj.gabarit / 2,
    zst_obj.gabarit,
    zst_obj.gabarit
  );
  ctx3.globalAlpha = 1;

  if (zst_obj.alfa < 1 && !zst_obj.ret) {
    zst_obj.alfa += 0.01;
  } else if (zst_obj.alfa > 0 && zst_obj.ret) {
    zst_obj.alfa -= 0.05;

    if (zst_obj.alfa < 0) {
      zst_obj.alfa = 0;

      if (zst_obj.ret === "pausa") {
        pausa = 0;

        if (music) {
          music.go_command = 1;
        }
      } else if (zst_obj.ret === "res") {
        //console.log("ok");

        global_zanaves.alfa_step = 0.03;
        global_zanaves.timer = 0;
        global_zanaves.go_to = "night";
        global_zanaves.active = true;

        restart_map = 100;

        win_or_loose = false;

        if (music) {
          music.melody.pause();
          music = false;
        }

        player = false;
      } else if (zst_obj.ret === "exit") {
        //console.log("ok");

        global_zanaves.alfa_step = 0.03;
        global_zanaves.timer = 0;
        global_zanaves.go_to = "night";
        global_zanaves.active = true;

        exit_timer = 500;

        win_or_loose = false;

        if (music) {
          music.melody.pause();
          music = false;
        }

        player = false;
      }
    }
  }

  //////////////////////////////

  if (in_pausa_menu_obj_in.length && zst_obj.alfa > 0.9) {
    for (let i = 0; i < in_pausa_menu_obj_in.length - 1; i++) {
      let punkt = in_pausa_menu_obj_in[i];

      /*		
if(punkt.click){

if(punkt.mas<1){	
	punkt.mas+=0.01;
}
else{
	
zst_obj.ret=punkt.act;	
	
};
	
};		
*/

      ctx3.globalAlpha = punkt.alfa_shadow;
      ctx3.fillStyle = "black";
      ctx3.fillRect(
        punkt.x - punkt.gabX / 2 + 10,
        punkt.y - punkt.gabY / 2 + 10,
        punkt.gabX * punkt.mas,
        punkt.gabY * punkt.mas
      );

      if (punkt.alfa > 1) {
        punkt.alfa = 1;
      }

      ctx3.globalAlpha = punkt.alfa;
      ctx3.drawImage(
        sp,
        0,
        50,
        200,
        50,
        punkt.x - (punkt.gabX * punkt.mas) / 2,
        punkt.y - (punkt.gabY * punkt.mas) / 2,
        punkt.gabX * punkt.mas,
        punkt.gabY * punkt.mas
      );
      ctx3.globalAlpha = 1;

      if (punkt.alfa < 1) {
        punkt.alfa += 0.1;
        punkt.alfa_shadow += 0.05;
      } else {
        for (let i = 0; i < punkt.text_a.length; i++) {
          let ob = punkt.text_a[i];

          let imageToDraw; //=unit_menu_little_liters;

          imageToDraw = unit_menu_little_liters;

          let x = punkt.x - (punkt.text_a.length * 8 * punkt.mas) / 2;

          ctx3.drawImage(
            imageToDraw,
            menu_litera(ob),
            0,
            12,
            12,
            x + i * 8 * punkt.mas,
            punkt.y - 7.5 * punkt.mas,
            10 * punkt.mas,
            15 * punkt.mas
          );
        }
      }

      if (
        !(
          obj.x < punkt.x - punkt.gabX / 2 ||
          obj.x > punkt.x + punkt.gabX / 2 ||
          obj.y < punkt.y - punkt.gabY / 2 ||
          obj.y > punkt.y + punkt.gabY / 2
        )
      ) {
        ctx3.strokeStyle = "yellow";
        ctx3.strokeRect(
          punkt.x - (punkt.gabX * punkt.mas) / 2,
          punkt.y - (punkt.gabY * punkt.mas) / 2,
          punkt.gabX * punkt.mas,
          punkt.gabY * punkt.mas
        );

        if (pausa_click && !in_pausa_menu_obj_in[3].click) {
          in_pausa_menu_obj_in[3].click = true;

          click_key = { key: punkt, base: zst_obj };
        }
      }
    }
  }
};

const in_pausa_menu = function () {
  ctx3.lineWidth = 0.5;

  ctx3.fillStyle = "black";
  ctx3.fillRect(758, 9, 84, 24);

  ctx3.drawImage(
    sp,
    0,
    0,
    200,
    50,
    in_game_menu_obj.x - in_game_menu_obj.gabX / 2,
    in_game_menu_obj.y - in_game_menu_obj.gabY / 2,
    in_game_menu_obj.gabX,
    in_game_menu_obj.gabY
  );

  if (
    !win_or_loose &&
    !pausa &&
    !(
      obj.x < in_game_menu_obj.x - in_game_menu_obj.gabX / 2 ||
      obj.x > in_game_menu_obj.x + in_game_menu_obj.gabX / 2 ||
      obj.y < in_game_menu_obj.y - in_game_menu_obj.gabY / 2 ||
      obj.y > in_game_menu_obj.y + in_game_menu_obj.gabY / 2
    )
  ) {
    ctx3.strokeStyle = "yellow";
    ctx3.strokeRect(
      in_game_menu_obj.x - in_game_menu_obj.gabX / 2,
      in_game_menu_obj.y - in_game_menu_obj.gabY / 2,
      in_game_menu_obj.gabX,
      in_game_menu_obj.gabY
    );

    if (pausa_click && obj.x) {
      in_game_menu_obj.timer = 2;

      pausa = 1;

      in_pausa_menu_obj_in_create();
    }
  }

  if (in_game_menu_obj.timer) {
    if (in_game_menu_obj.timer > 0) {
      in_game_menu_obj.timer--;

      in_game_menu_obj.gabX -= 8;
      in_game_menu_obj.gabY -= 2;
    }
    //else{in_game_menu_obj.timer++;};
  } else {
    if (in_game_menu_obj.gabX < 80) {
      in_game_menu_obj.gabX += 8;
      in_game_menu_obj.gabY += 2;
    }
    //in_game_menu_obj.gabX=80;
    //in_game_menu_obj.gabY=20;
  }
};

const in_pausa_menu_obj_in_create = function () {
  if (music) {
    music.pausa_command = true;
  }

  select_sound_fly(undefined, "click", 1);

  zst_obj = {
    x: 350,
    y: 350,
    gabarit: 500,
    alfa: 0,
    imageToDraw: zst,
    ret: false,
  };

  in_pausa_menu_obj_in = [
    {
      x: 500,
      y: 200,
      gabX: 150,
      gabY: 30,
      alfa: 0,
      alfa_shadow: 0,
      text_a: "Exit to main menu",
      mas: 1,
      act: "exit",
    },
    {
      x: 500,
      y: 300,
      gabX: 150,
      gabY: 30,
      alfa: 0,
      alfa_shadow: 0,
      text_a: "Restart scenario",
      mas: 1,
      act: "res",
    },
    {
      x: 500,
      y: 400,
      gabX: 150,
      gabY: 30,
      alfa: 0,
      alfa_shadow: 0,
      text_a: "Return to game",
      mas: 1,
      act: "pausa",
    },
    { click: false },
  ];
};

const draw_alarms = function () {
  if (!player) {
    return;
  }

  /*	
if(!this.drawGabaritRadar){
	this.drawGabaritRadar=130/gameFielgMap.length;	
	
this.radarX=radar.x+(this.horizont*this.drawGabaritRadar);
this.radarY=radar.y+(this.vertikal*this.drawGabaritRadar);
};	



    ctx2.fillRect(this.radarX,this.radarY,this.drawGabaritRadar,this.drawGabaritRadar);		
*/

  //this.radar_alarms.push({obj:this.alarms[0].terpila,timer:100});

  for (let i = 0; i < player.radar_alarms.length; i++) {
    let obj = player.radar_alarms[i];

    if (!obj.timer && obj.list === 40) {
      player.radar_alarms.splice(i, 1);
      i--;
    }

    if (obj.timer) {
      obj.timer--;
    } else {
      obj.list++;
      obj.gabarit = 0;
      if (obj.list < 40) {
        obj.timer = 10;
      }
    }

    obj.alfa = obj.timer / 10;

    obj.gabarit = (gameFielg.length / 20) * (1 - obj.timer / 10);

    ctx3.globalAlpha = obj.alfa;
    ctx3.drawImage(
      obj.drawImage,
      0,
      0,
      100,
      100,
      obj.radarX - obj.gabarit / 2,
      obj.radarY - obj.gabarit / 2,
      obj.gabarit,
      obj.gabarit
    );
    ctx3.globalAlpha = 1;
  }
};
